[{"name": "C11", "type": "cpp", "path": "c\\11.html", "desc": "C11"}, {"name": "C17", "type": "cpp", "path": "c\\17.html", "desc": "C17"}, {"name": "C23", "type": "cpp", "path": "c\\23.html", "desc": "C23"}, {"name": "\u7b97\u6cd5", "type": "cpp", "path": "c\\algorithm.html", "desc": "\u7b97\u6cd5"}, {"name": "\u539f\u5b50\u64cd\u4f5c\u5e93", "type": "cpp", "path": "c\\atomic.html", "desc": "\u539f\u5b50\u64cd\u4f5c\u5e93"}, {"name": "\u65e5\u671f\u548c\u65f6\u95f4\u5de5\u5177", "type": "cpp", "path": "c\\chrono.html", "desc": "\u65e5\u671f\u548c\u65f6\u95f4\u5de5\u5177"}, {"name": "\u6ce8\u91ca", "type": "cpp", "path": "c\\comment.html", "desc": "\u6ce8\u91ca"}, {"name": "C \u7f16\u8bd1\u5668\u652f\u6301", "type": "cpp", "path": "c\\compiler_support.html", "desc": "C \u7f16\u8bd1\u5668\u652f\u6301"}, {"name": "\u5f53\u524d\u72b6\u51b5", "type": "cpp", "path": "c\\current_status.html", "desc": "\u5f53\u524d\u72b6\u51b5"}, {"name": "\u9519\u8bef\u5904\u7406", "type": "cpp", "path": "c\\error.html", "desc": "\u9519\u8bef\u5904\u7406"}, {"name": "\u5b9e\u9a8c\u6027 C \u7279\u6027", "type": "cpp", "path": "c\\experimental.html", "desc": "\u5b9e\u9a8c\u6027 C \u7279\u6027"}, {"name": "C \u6807\u51c6\u5e93\u5934\u6587\u4ef6", "type": "cpp", "path": "c\\header.html", "desc": "C \u6807\u51c6\u5e93\u5934\u6587\u4ef6"}, {"name": "\u6587\u4ef6\u8f93\u5165/\u8f93\u51fa", "type": "cpp", "path": "c\\io.html", "desc": "\u6587\u4ef6\u8f93\u5165/\u8f93\u51fa"}, {"name": "C \u5173\u952e\u8bcd", "type": "cpp", "path": "c\\keyword.html", "desc": "C \u5173\u952e\u8bcd"}, {"name": "C \u8bed\u8a00", "type": "cpp", "path": "c\\language.html", "desc": "C \u8bed\u8a00"}, {"name": "\u6709\u7528\u7684\u8d44\u6e90", "type": "cpp", "path": "c\\links.html", "desc": "\u6709\u7528\u7684\u8d44\u6e90"}, {"name": "\u672c\u5730\u5316\u652f\u6301", "type": "cpp", "path": "c\\locale.html", "desc": "\u672c\u5730\u5316\u652f\u6301"}, {"name": "\u52a8\u6001\u5185\u5b58\u7ba1\u7406", "type": "cpp", "path": "c\\memory.html", "desc": "\u52a8\u6001\u5185\u5b58\u7ba1\u7406"}, {"name": "\u6570\u503c", "type": "cpp", "path": "c\\numeric.html", "desc": "\u6570\u503c"}, {"name": "\u9884\u5904\u7406\u5668", "type": "cpp", "path": "c\\preprocessor.html", "desc": "\u9884\u5904\u7406\u5668"}, {"name": "\u7a0b\u5e8f\u652f\u6301\u5de5\u5177", "type": "cpp", "path": "c\\program.html", "desc": "\u7a0b\u5e8f\u652f\u6301\u5de5\u5177"}, {"name": "\u5b57\u7b26\u4e32\u5e93", "type": "cpp", "path": "c\\string.html", "desc": "\u5b57\u7b26\u4e32\u5e93"}, {"name": "\u7b26\u53f7\u7d22\u5f15", "type": "cpp", "path": "c\\symbol_index.html", "desc": "\u7b26\u53f7\u7d22\u5f15"}, {"name": "\u5e76\u53d1\u652f\u6301\u5e93", "type": "cpp", "path": "c\\thread.html", "desc": "\u5e76\u53d1\u652f\u6301\u5e93"}, {"name": "\u7c7b\u578b\u652f\u6301", "type": "cpp", "path": "c\\types.html", "desc": "\u7c7b\u578b\u652f\u6301"}, {"name": "\u53d8\u53c2\u6570\u51fd\u6570", "type": "cpp", "path": "c\\variadic.html", "desc": "\u53d8\u53c2\u6570\u51fd\u6570"}, {"name": "bsearch, bsearch_s", "type": "cpp", "path": "c\\algorithm\\bsearch.html", "desc": "bsearch, bsearch_s"}, {"name": "qsort, qsort_s", "type": "cpp", "path": "c\\algorithm\\qsort.html", "desc": "qsort, qsort_s"}, {"name": "atomic_compare_exchange_weak, atomic_compare_exchange_strong, atomic_compare_exchange_weak_explicit, atomic_compare_exchange_strong_explicit", "type": "cpp", "path": "c\\atomic\\atomic_compare_exchange.html", "desc": "atomic_compare_exchange_weak, atomic_compare_exchange_strong, atomic_compare_exchange_weak_explicit, atomic_compare_exchange_strong_explicit"}, {"name": "atomic_exchange, atomic_exchange_explicit", "type": "cpp", "path": "c\\atomic\\atomic_exchange.html", "desc": "atomic_exchange, atomic_exchange_explicit"}, {"name": "atomic_fetch_add, atomic_fetch_add_explicit", "type": "cpp", "path": "c\\atomic\\atomic_fetch_add.html", "desc": "atomic_fetch_add, atomic_fetch_add_explicit"}, {"name": "atomic_fetch_and, atomic_fetch_and_explicit", "type": "cpp", "path": "c\\atomic\\atomic_fetch_and.html", "desc": "atomic_fetch_and, atomic_fetch_and_explicit"}, {"name": "atomic_fetch_or, atomic_fetch_or_explicit", "type": "cpp", "path": "c\\atomic\\atomic_fetch_or.html", "desc": "atomic_fetch_or, atomic_fetch_or_explicit"}, {"name": "atomic_fetch_sub, atomic_fetch_sub_explicit", "type": "cpp", "path": "c\\atomic\\atomic_fetch_sub.html", "desc": "atomic_fetch_sub, atomic_fetch_sub_explicit"}, {"name": "atomic_fetch_xor, atomic_fetch_xor_explicit", "type": "cpp", "path": "c\\atomic\\atomic_fetch_xor.html", "desc": "atomic_fetch_xor, atomic_fetch_xor_explicit"}, {"name": "atomic_flag", "type": "cpp", "path": "c\\atomic\\atomic_flag.html", "desc": "atomic_flag"}, {"name": "atomic_flag_clear, atomic_flag_clear_explicit", "type": "cpp", "path": "c\\atomic\\atomic_flag_clear.html", "desc": "atomic_flag_clear, atomic_flag_clear_explicit"}, {"name": "ATOMIC_FLAG_INIT", "type": "cpp", "path": "c\\atomic\\ATOMIC_FLAG_INIT.html", "desc": "ATOMIC_FLAG_INIT"}, {"name": "atomic_flag_test_and_set, atomic_flag_test_and_set_explicit", "type": "cpp", "path": "c\\atomic\\atomic_flag_test_and_set.html", "desc": "atomic_flag_test_and_set, atomic_flag_test_and_set_explicit"}, {"name": "atomic_init", "type": "cpp", "path": "c\\atomic\\atomic_init.html", "desc": "atomic_init"}, {"name": "atomic_is_lock_free", "type": "cpp", "path": "c\\atomic\\atomic_is_lock_free.html", "desc": "atomic_is_lock_free"}, {"name": "atomic_load, atomic_load_explicit", "type": "cpp", "path": "c\\atomic\\atomic_load.html", "desc": "atomic_load, atomic_load_explicit"}, {"name": "ATOMIC_*_LOCK_FREE", "type": "cpp", "path": "c\\atomic\\ATOMIC_LOCK_FREE_consts.html", "desc": "ATOMIC_*_LOCK_FREE"}, {"name": "atomic_signal_fence", "type": "cpp", "path": "c\\atomic\\atomic_signal_fence.html", "desc": "atomic_signal_fence"}, {"name": "atomic_store, atomic_store_explicit", "type": "cpp", "path": "c\\atomic\\atomic_store.html", "desc": "atomic_store, atomic_store_explicit"}, {"name": "atomic_thread_fence", "type": "cpp", "path": "c\\atomic\\atomic_thread_fence.html", "desc": "atomic_thread_fence"}, {"name": "ATOMIC_VAR_INIT", "type": "cpp", "path": "c\\atomic\\ATOMIC_VAR_INIT.html", "desc": "ATOMIC_VAR_INIT"}, {"name": "kill_dependency", "type": "cpp", "path": "c\\atomic\\kill_dependency.html", "desc": "kill_dependency"}, {"name": "memory_order", "type": "cpp", "path": "c\\atomic\\memory_order.html", "desc": "memory_order"}, {"name": "asctime, asctime_s", "type": "cpp", "path": "c\\chrono\\asctime.html", "desc": "asctime, asctime_s"}, {"name": "clock", "type": "cpp", "path": "c\\chrono\\clock.html", "desc": "clock"}, {"name": "CLOCKS_PER_SEC", "type": "cpp", "path": "c\\chrono\\CLOCKS_PER_SEC.html", "desc": "CLOCKS_PER_SEC"}, {"name": "clock_t", "type": "cpp", "path": "c\\chrono\\clock_t.html", "desc": "clock_t"}, {"name": "ctime, ctime_s", "type": "cpp", "path": "c\\chrono\\ctime.html", "desc": "ctime, ctime_s"}, {"name": "difftime", "type": "cpp", "path": "c\\chrono\\difftime.html", "desc": "difftime"}, {"name": "gmtime, gmtime_r, gmtime_s", "type": "cpp", "path": "c\\chrono\\gmtime.html", "desc": "gmtime, gmtime_r, gmtime_s"}, {"name": "localtime, localtime_r, localtime_s", "type": "cpp", "path": "c\\chrono\\localtime.html", "desc": "localtime, localtime_r, localtime_s"}, {"name": "mktime", "type": "cpp", "path": "c\\chrono\\mktime.html", "desc": "mktime"}, {"name": "strftime", "type": "cpp", "path": "c\\chrono\\strftime.html", "desc": "strftime"}, {"name": "time", "type": "cpp", "path": "c\\chrono\\time.html", "desc": "time"}, {"name": "timespec", "type": "cpp", "path": "c\\chrono\\timespec.html", "desc": "timespec"}, {"name": "timespec_get", "type": "cpp", "path": "c\\chrono\\timespec_get.html", "desc": "timespec_get"}, {"name": "timespec_getres", "type": "cpp", "path": "c\\chrono\\timespec_getres.html", "desc": "timespec_getres"}, {"name": "time_t", "type": "cpp", "path": "c\\chrono\\time_t.html", "desc": "time_t"}, {"name": "tm", "type": "cpp", "path": "c\\chrono\\tm.html", "desc": "tm"}, {"name": "wcsftime", "type": "cpp", "path": "c\\chrono\\wcsftime.html", "desc": "wcsftime"}, {"name": "abort_handler_s", "type": "cpp", "path": "c\\error\\abort_handler_s.html", "desc": "abort_handler_s"}, {"name": "assert", "type": "cpp", "path": "c\\error\\assert.html", "desc": "assert"}, {"name": "errno", "type": "cpp", "path": "c\\error\\errno.html", "desc": "errno"}, {"name": "\u9519\u8bef\u53f7", "type": "cpp", "path": "c\\error\\errno_macros.html", "desc": "\u9519\u8bef\u53f7"}, {"name": "ignore_handler_s", "type": "cpp", "path": "c\\error\\ignore_handler_s.html", "desc": "ignore_handler_s"}, {"name": "set_constraint_handler_s, constraint_handler_t", "type": "cpp", "path": "c\\error\\set_constraint_handler_s.html", "desc": "set_constraint_handler_s, constraint_handler_t"}, {"name": "static_assert", "type": "cpp", "path": "c\\error\\static_assert.html", "desc": "static_assert"}, {"name": "\u52a8\u6001\u5185\u5b58\u6269\u5c55", "type": "cpp", "path": "c\\experimental\\dynamic.html", "desc": "\u52a8\u6001\u5185\u5b58\u6269\u5c55"}, {"name": "\u6d6e\u70b9\u6269\u5c55\u90e8\u5206 1 \uff1a\u4e8c\u8fdb\u5236\u6d6e\u70b9\u7b97\u672f", "type": "cpp", "path": "c\\experimental\\fpext1.html", "desc": "\u6d6e\u70b9\u6269\u5c55\u90e8\u5206 1 \uff1a\u4e8c\u8fdb\u5236\u6d6e\u70b9\u7b97\u672f"}, {"name": "\u6d6e\u70b9\u6269\u5c55\u90e8\u5206 4 \uff1a\u8865\u5145\u51fd\u6570", "type": "cpp", "path": "c\\experimental\\fpext4.html", "desc": "\u6d6e\u70b9\u6269\u5c55\u90e8\u5206 4 \uff1a\u8865\u5145\u51fd\u6570"}, {"name": "getline, getwline, getdelim, getwdelim", "type": "cpp", "path": "c\\experimental\\dynamic\\getline.html", "desc": "getline, getwline, getdelim, getwdelim"}, {"name": "strdup", "type": "cpp", "path": "c\\experimental\\dynamic\\strdup.html", "desc": "strdup"}, {"name": "strndup", "type": "cpp", "path": "c\\experimental\\dynamic\\strndup.html", "desc": "strndup"}, {"name": "clearerr", "type": "cpp", "path": "c\\io\\clearerr.html", "desc": "clearerr"}, {"name": "fclose", "type": "cpp", "path": "c\\io\\fclose.html", "desc": "fclose"}, {"name": "feof", "type": "cpp", "path": "c\\io\\feof.html", "desc": "feof"}, {"name": "ferror", "type": "cpp", "path": "c\\io\\ferror.html", "desc": "ferror"}, {"name": "fflush", "type": "cpp", "path": "c\\io\\fflush.html", "desc": "fflush"}, {"name": "fgetc, getc", "type": "cpp", "path": "c\\io\\fgetc.html", "desc": "fgetc, getc"}, {"name": "fgetpos", "type": "cpp", "path": "c\\io\\fgetpos.html", "desc": "fgetpos"}, {"name": "fgets", "type": "cpp", "path": "c\\io\\fgets.html", "desc": "fgets"}, {"name": "fgetwc", "type": "cpp", "path": "c\\io\\fgetwc.html", "desc": "fgetwc"}, {"name": "fgetws", "type": "cpp", "path": "c\\io\\fgetws.html", "desc": "fgetws"}, {"name": "FILE", "type": "cpp", "path": "c\\io\\FILE.html", "desc": "FILE"}, {"name": "fopen, fopen_s", "type": "cpp", "path": "c\\io\\fopen.html", "desc": "fopen, fopen_s"}, {"name": "fpos_t", "type": "cpp", "path": "c\\io\\fpos_t.html", "desc": "fpos_t"}, {"name": "printf, fprintf, sprintf, snprintf, printf_s, fprintf_s, sprintf_s, snprintf_s", "type": "cpp", "path": "c\\io\\fprintf.html", "desc": "printf, fprintf, sprintf, snprintf, printf_s, fprintf_s, sprintf_s, snprintf_s"}, {"name": "fputc, putc", "type": "cpp", "path": "c\\io\\fputc.html", "desc": "fputc, putc"}, {"name": "fputs", "type": "cpp", "path": "c\\io\\fputs.html", "desc": "fputs"}, {"name": "fputwc, putwc", "type": "cpp", "path": "c\\io\\fputwc.html", "desc": "fputwc, putwc"}, {"name": "fputws", "type": "cpp", "path": "c\\io\\fputws.html", "desc": "fputws"}, {"name": "fread", "type": "cpp", "path": "c\\io\\fread.html", "desc": "fread"}, {"name": "freopen, freopen_s", "type": "cpp", "path": "c\\io\\freopen.html", "desc": "freopen, freopen_s"}, {"name": "scanf, fscanf, sscanf, scanf_s, fscanf_s, sscanf_s", "type": "cpp", "path": "c\\io\\fscanf.html", "desc": "scanf, fscanf, sscanf, scanf_s, fscanf_s, sscanf_s"}, {"name": "fseek", "type": "cpp", "path": "c\\io\\fseek.html", "desc": "fseek"}, {"name": "fsetpos", "type": "cpp", "path": "c\\io\\fsetpos.html", "desc": "fsetpos"}, {"name": "ftell", "type": "cpp", "path": "c\\io\\ftell.html", "desc": "ftell"}, {"name": "fwide", "type": "cpp", "path": "c\\io\\fwide.html", "desc": "fwide"}, {"name": "wprintf, fwprintf, swprintf, wprintf_s, fwprintf_s, swprintf_s, snwprintf_s", "type": "cpp", "path": "c\\io\\fwprintf.html", "desc": "wprintf, fwprintf, swprintf, wprintf_s, fwprintf_s, swprintf_s, snwprintf_s"}, {"name": "fwrite", "type": "cpp", "path": "c\\io\\fwrite.html", "desc": "fwrite"}, {"name": "wscanf, fwscanf, swscanf, wscanf_s, fwscanf_s, swscanf_s", "type": "cpp", "path": "c\\io\\fwscanf.html", "desc": "wscanf, fwscanf, swscanf, wscanf_s, fwscanf_s, swscanf_s"}, {"name": "getchar", "type": "cpp", "path": "c\\io\\getchar.html", "desc": "getchar"}, {"name": "gets, gets_s", "type": "cpp", "path": "c\\io\\gets.html", "desc": "gets, gets_s"}, {"name": "getwchar", "type": "cpp", "path": "c\\io\\getwchar.html", "desc": "getwchar"}, {"name": "perror", "type": "cpp", "path": "c\\io\\perror.html", "desc": "perror"}, {"name": "putchar", "type": "cpp", "path": "c\\io\\putchar.html", "desc": "putchar"}, {"name": "puts", "type": "cpp", "path": "c\\io\\puts.html", "desc": "puts"}, {"name": "putwchar", "type": "cpp", "path": "c\\io\\putwchar.html", "desc": "putwchar"}, {"name": "remove", "type": "cpp", "path": "c\\io\\remove.html", "desc": "remove"}, {"name": "rename", "type": "cpp", "path": "c\\io\\rename.html", "desc": "rename"}, {"name": "rewind", "type": "cpp", "path": "c\\io\\rewind.html", "desc": "rewind"}, {"name": "setbuf", "type": "cpp", "path": "c\\io\\setbuf.html", "desc": "setbuf"}, {"name": "setvbuf", "type": "cpp", "path": "c\\io\\setvbuf.html", "desc": "setvbuf"}, {"name": "stdin, stdout, stderr", "type": "cpp", "path": "c\\io\\std_streams.html", "desc": "stdin, stdout, stderr"}, {"name": "tmpfile, tmpfile_s", "type": "cpp", "path": "c\\io\\tmpfile.html", "desc": "tmpfile, tmpfile_s"}, {"name": "tmpnam, tmpnam_s", "type": "cpp", "path": "c\\io\\tmpnam.html", "desc": "tmpnam, tmpnam_s"}, {"name": "ungetc", "type": "cpp", "path": "c\\io\\ungetc.html", "desc": "ungetc"}, {"name": "ungetwc", "type": "cpp", "path": "c\\io\\ungetwc.html", "desc": "ungetwc"}, {"name": "vprintf, vfprintf, vsprintf, vsnprintf, vprintf_s, vfprintf_s, vsprintf_s, vsnprintf_s", "type": "cpp", "path": "c\\io\\vfprintf.html", "desc": "vprintf, vfprintf, vsprintf, vsnprintf, vprintf_s, vfprintf_s, vsprintf_s, vsnprintf_s"}, {"name": "vscanf, vfscanf, vsscanf, vscanf_s, vfscanf_s, vsscanf_s", "type": "cpp", "path": "c\\io\\vfscanf.html", "desc": "vscanf, vfscanf, vsscanf, vscanf_s, vfscanf_s, vsscanf_s"}, {"name": "vwprintf, vfwprintf, vswprintf, vwprintf_s, vfwprintf_s, vswprintf_s, vsnwprintf_s", "type": "cpp", "path": "c\\io\\vfwprintf.html", "desc": "vwprintf, vfwprintf, vswprintf, vwprintf_s, vfwprintf_s, vswprintf_s, vsnwprintf_s"}, {"name": "vwscanf, vfwscanf, vswscanf, vwscanf_s, vfwscanf_s, vswscanf_s", "type": "cpp", "path": "c\\io\\vfwscanf.html", "desc": "vwscanf, vfwscanf, vswscanf, vwscanf_s, vfwscanf_s, vswscanf_s"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a auto", "type": "cpp", "path": "c\\keyword\\auto.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a auto"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a break", "type": "cpp", "path": "c\\keyword\\break.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a break"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a case", "type": "cpp", "path": "c\\keyword\\case.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a case"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a char", "type": "cpp", "path": "c\\keyword\\char.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a char"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a const", "type": "cpp", "path": "c\\keyword\\const.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a const"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a continue", "type": "cpp", "path": "c\\keyword\\continue.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a continue"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a default", "type": "cpp", "path": "c\\keyword\\default.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a default"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a do", "type": "cpp", "path": "c\\keyword\\do.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a do"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a double", "type": "cpp", "path": "c\\keyword\\double.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a double"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a else", "type": "cpp", "path": "c\\keyword\\else.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a else"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a enum", "type": "cpp", "path": "c\\keyword\\enum.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a enum"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a extern", "type": "cpp", "path": "c\\keyword\\extern.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a extern"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a float", "type": "cpp", "path": "c\\keyword\\float.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a float"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a for", "type": "cpp", "path": "c\\keyword\\for.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a for"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a fortran", "type": "cpp", "path": "c\\keyword\\fortran.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a fortran"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a goto", "type": "cpp", "path": "c\\keyword\\goto.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a goto"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a if", "type": "cpp", "path": "c\\keyword\\if.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a if"}, {"name": "C \u5173\u952e\u8bcd\uff1a (C99 \u8d77)C \u5173\u952e\u8bcd\uff1a inline (C99 \u8d77)", "type": "cpp", "path": "c\\keyword\\inline.html", "desc": "C \u5173\u952e\u8bcd\uff1a (C99 \u8d77)C \u5173\u952e\u8bcd\uff1a inline (C99 \u8d77)"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a int", "type": "cpp", "path": "c\\keyword\\int.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a int"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a long", "type": "cpp", "path": "c\\keyword\\long.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a long"}, {"name": "C \u5173\u952e\u8bcd\uff1a (C23 \u8d77)C \u5173\u952e\u8bcd\uff1a nullptr (C23 \u8d77)", "type": "cpp", "path": "c\\keyword\\nullptr.html", "desc": "C \u5173\u952e\u8bcd\uff1a (C23 \u8d77)C \u5173\u952e\u8bcd\uff1a nullptr (C23 \u8d77)"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a register", "type": "cpp", "path": "c\\keyword\\register.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a register"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a restrict", "type": "cpp", "path": "c\\keyword\\restrict.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a restrict"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a return", "type": "cpp", "path": "c\\keyword\\return.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a return"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a short", "type": "cpp", "path": "c\\keyword\\short.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a short"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a signed", "type": "cpp", "path": "c\\keyword\\signed.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a signed"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a sizeof", "type": "cpp", "path": "c\\keyword\\sizeof.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a sizeof"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a static", "type": "cpp", "path": "c\\keyword\\static.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a static"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a struct", "type": "cpp", "path": "c\\keyword\\struct.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a struct"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a switch", "type": "cpp", "path": "c\\keyword\\switch.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a switch"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a typedef", "type": "cpp", "path": "c\\keyword\\typedef.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a typedef"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a union", "type": "cpp", "path": "c\\keyword\\union.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a union"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a unsigned", "type": "cpp", "path": "c\\keyword\\unsigned.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a unsigned"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a void", "type": "cpp", "path": "c\\keyword\\void.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a void"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a volatile", "type": "cpp", "path": "c\\keyword\\volatile.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a volatile"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a while", "type": "cpp", "path": "c\\keyword\\while.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a while"}, {"name": "C \u5173\u952e\u8bcd\uff1a (C11 \u8d77)C \u5173\u952e\u8bcd\uff1a _Alignas (C11 \u8d77)", "type": "cpp", "path": "c\\keyword\\_Alignas.html", "desc": "C \u5173\u952e\u8bcd\uff1a (C11 \u8d77)C \u5173\u952e\u8bcd\uff1a _Alignas (C11 \u8d77)"}, {"name": "C \u5173\u952e\u8bcd\uff1a (C11 \u8d77)C \u5173\u952e\u8bcd\uff1a _Alignof (C11 \u8d77)", "type": "cpp", "path": "c\\keyword\\_Alignof.html", "desc": "C \u5173\u952e\u8bcd\uff1a (C11 \u8d77)C \u5173\u952e\u8bcd\uff1a _Alignof (C11 \u8d77)"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a _Atomic", "type": "cpp", "path": "c\\keyword\\_Atomic.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a _Atomic"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a _Bool", "type": "cpp", "path": "c\\keyword\\_Bool.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a _Bool"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a _Complex", "type": "cpp", "path": "c\\keyword\\_Complex.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a _Complex"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a _Decimal128", "type": "cpp", "path": "c\\keyword\\_Decimal128.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a _Decimal128"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a _Decimal32", "type": "cpp", "path": "c\\keyword\\_Decimal32.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a _Decimal32"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a _Decimal64", "type": "cpp", "path": "c\\keyword\\_Decimal64.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a _Decimal64"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a _Generic", "type": "cpp", "path": "c\\keyword\\_Generic.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a _Generic"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a _Imaginary", "type": "cpp", "path": "c\\keyword\\_Imaginary.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a _Imaginary"}, {"name": "C \u5173\u952e\u8bcd\uff1a (C11 \u8d77)C \u5173\u952e\u8bcd\uff1a _Noreturn (C11 \u8d77)", "type": "cpp", "path": "c\\keyword\\_Noreturn.html", "desc": "C \u5173\u952e\u8bcd\uff1a (C11 \u8d77)C \u5173\u952e\u8bcd\uff1a _Noreturn (C11 \u8d77)"}, {"name": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a _Static_assert", "type": "cpp", "path": "c\\keyword\\_Static_assert.html", "desc": "C \u5173\u952e\u8bcd\uff1aC \u5173\u952e\u8bcd\uff1a _Static_assert"}, {"name": "C \u5173\u952e\u8bcd\uff1a (C11 \u8d77)C \u5173\u952e\u8bcd\uff1a _Thread_local (C11 \u8d77)", "type": "cpp", "path": "c\\keyword\\_Thread_local.html", "desc": "C \u5173\u952e\u8bcd\uff1a (C11 \u8d77)C \u5173\u952e\u8bcd\uff1a _Thread_local (C11 \u8d77)"}, {"name": "\u53ef\u5206\u6790\u6027", "type": "cpp", "path": "c\\language\\analyzability.html", "desc": "\u53ef\u5206\u6790\u6027"}, {"name": "\u7b97\u672f\u7c7b\u578b", "type": "cpp", "path": "c\\language\\arithmetic_types.html", "desc": "\u7b97\u672f\u7c7b\u578b"}, {"name": "\u6570\u7ec4\u58f0\u660e", "type": "cpp", "path": "c\\language\\array.html", "desc": "\u6570\u7ec4\u58f0\u660e"}, {"name": "\u6570\u7ec4\u521d\u59cb\u5316", "type": "cpp", "path": "c\\language\\array_initialization.html", "desc": "\u6570\u7ec4\u521d\u59cb\u5316"}, {"name": "ASCII \u7801\u8868", "type": "cpp", "path": "c\\language\\ascii.html", "desc": "ASCII \u7801\u8868"}, {"name": "\u5185\u8054\u6c47\u7f16", "type": "cpp", "path": "c\\language\\asm.html", "desc": "\u5185\u8054\u6c47\u7f16"}, {"name": "\u539f\u5b50\u7c7b\u578b", "type": "cpp", "path": "c\\language\\atomic.html", "desc": "\u539f\u5b50\u7c7b\u578b"}, {"name": "(C23 \u8d77)\u5c5e\u6027\u8bf4\u660e\u7b26\u5e8f\u5217(C23 \u8d77)", "type": "cpp", "path": "c\\language\\attributes.html", "desc": "(C23 \u8d77)\u5c5e\u6027\u8bf4\u660e\u7b26\u5e8f\u5217(C23 \u8d77)"}, {"name": "\u57fa\u672c\u6982\u5ff5", "type": "cpp", "path": "c\\language\\basic_concepts.html", "desc": "\u57fa\u672c\u6982\u5ff5"}, {"name": "\u672a\u5b9a\u4e49\u884c\u4e3a", "type": "cpp", "path": "c\\language\\behavior.html", "desc": "\u672a\u5b9a\u4e49\u884c\u4e3a"}, {"name": "\u4f4d\u57df", "type": "cpp", "path": "c\\language\\bit_field.html", "desc": "\u4f4d\u57df"}, {"name": "(C23 \u8d77)\u9884\u5b9a\u4e49\u5e03\u5c14\u5e38\u91cf (C23 \u8d77)", "type": "cpp", "path": "c\\language\\bool_constant.html", "desc": "(C23 \u8d77)\u9884\u5b9a\u4e49\u5e03\u5c14\u5e38\u91cf (C23 \u8d77)"}, {"name": "break \u8bed\u53e5", "type": "cpp", "path": "c\\language\\break.html", "desc": "break \u8bed\u53e5"}, {"name": "\u8f6c\u578b\u8fd0\u7b97\u7b26", "type": "cpp", "path": "c\\language\\cast.html", "desc": "\u8f6c\u578b\u8fd0\u7b97\u7b26"}, {"name": "\u5b57\u7b26\u5e38\u91cf", "type": "cpp", "path": "c\\language\\character_constant.html", "desc": "\u5b57\u7b26\u5e38\u91cf"}, {"name": "\u5b57\u7b26\u96c6\u4e0e\u7f16\u7801", "type": "cpp", "path": "c\\language\\charset.html", "desc": "\u5b57\u7b26\u96c6\u4e0e\u7f16\u7801"}, {"name": "\u590d\u5408\u5b57\u9762\u91cf", "type": "cpp", "path": "c\\language\\compound_literal.html", "desc": "\u590d\u5408\u5b57\u9762\u91cf"}, {"name": "\u9075\u4ece\u6027", "type": "cpp", "path": "c\\language\\conformance.html", "desc": "\u9075\u4ece\u6027"}, {"name": "const \u7c7b\u578b\u9650\u5b9a\u7b26", "type": "cpp", "path": "c\\language\\const.html", "desc": "const \u7c7b\u578b\u9650\u5b9a\u7b26"}, {"name": "\u5e38\u91cf\u8868\u8fbe\u5f0f", "type": "cpp", "path": "c\\language\\constant_expression.html", "desc": "\u5e38\u91cf\u8868\u8fbe\u5f0f"}, {"name": "continue\u8bed\u53e5", "type": "cpp", "path": "c\\language\\continue.html", "desc": "continue\u8bed\u53e5"}, {"name": "\u9690\u5f0f\u8f6c\u6362", "type": "cpp", "path": "c\\language\\conversion.html", "desc": "\u9690\u5f0f\u8f6c\u6362"}, {"name": "\u58f0\u660e", "type": "cpp", "path": "c\\language\\declarations.html", "desc": "\u58f0\u660e"}, {"name": "do-while \u5faa\u73af", "type": "cpp", "path": "c\\language\\do.html", "desc": "do-while \u5faa\u73af"}, {"name": "\u679a\u4e3e", "type": "cpp", "path": "c\\language\\enum.html", "desc": "\u679a\u4e3e"}, {"name": "\u8f6c\u4e49\u5e8f\u5217", "type": "cpp", "path": "c\\language\\escape.html", "desc": "\u8f6c\u4e49\u5e8f\u5217"}, {"name": "\u6c42\u503c\u987a\u5e8f", "type": "cpp", "path": "c\\language\\eval_order.html", "desc": "\u6c42\u503c\u987a\u5e8f"}, {"name": "\u8868\u8fbe\u5f0f", "type": "cpp", "path": "c\\language\\expressions.html", "desc": "\u8868\u8fbe\u5f0f"}, {"name": "\u5916\u90e8\u53ca\u8bd5\u63a2\u6027\u5b9a\u4e49", "type": "cpp", "path": "c\\language\\extern.html", "desc": "\u5916\u90e8\u53ca\u8bd5\u63a2\u6027\u5b9a\u4e49"}, {"name": "\u6d6e\u70b9\u5e38\u91cf", "type": "cpp", "path": "c\\language\\floating_constant.html", "desc": "\u6d6e\u70b9\u5e38\u91cf"}, {"name": "for \u5faa\u73af", "type": "cpp", "path": "c\\language\\for.html", "desc": "for \u5faa\u73af"}, {"name": "\u51fd\u6570", "type": "cpp", "path": "c\\language\\functions.html", "desc": "\u51fd\u6570"}, {"name": "\u51fd\u6570\u58f0\u660e", "type": "cpp", "path": "c\\language\\function_declaration.html", "desc": "\u51fd\u6570\u58f0\u660e"}, {"name": "\u51fd\u6570\u5b9a\u4e49", "type": "cpp", "path": "c\\language\\function_definition.html", "desc": "\u51fd\u6570\u5b9a\u4e49"}, {"name": "\u6cdb\u578b\u9009\u62e9", "type": "cpp", "path": "c\\language\\generic.html", "desc": "\u6cdb\u578b\u9009\u62e9"}, {"name": "goto \u8bed\u53e5", "type": "cpp", "path": "c\\language\\goto.html", "desc": "goto \u8bed\u53e5"}, {"name": "C \u7684\u5386\u53f2", "type": "cpp", "path": "c\\language\\history.html", "desc": "C \u7684\u5386\u53f2"}, {"name": "\u6807\u8bc6\u7b26", "type": "cpp", "path": "c\\language\\identifier.html", "desc": "\u6807\u8bc6\u7b26"}, {"name": "if \u8bed\u53e5", "type": "cpp", "path": "c\\language\\if.html", "desc": "if \u8bed\u53e5"}, {"name": "\u521d\u59cb\u5316", "type": "cpp", "path": "c\\language\\initialization.html", "desc": "\u521d\u59cb\u5316"}, {"name": "inline \u51fd\u6570\u8bf4\u660e\u7b26", "type": "cpp", "path": "c\\language\\inline.html", "desc": "inline \u51fd\u6570\u8bf4\u660e\u7b26"}, {"name": "\u6574\u6570\u5e38\u91cf", "type": "cpp", "path": "c\\language\\integer_constant.html", "desc": "\u6574\u6570\u5e38\u91cf"}, {"name": "\u751f\u5b58\u671f", "type": "cpp", "path": "c\\language\\lifetime.html", "desc": "\u751f\u5b58\u671f"}, {"name": "\u4e3b\u51fd\u6570", "type": "cpp", "path": "c\\language\\main_function.html", "desc": "\u4e3b\u51fd\u6570"}, {"name": "\u5185\u5b58\u6a21\u578b", "type": "cpp", "path": "c\\language\\memory_model.html", "desc": "\u5185\u5b58\u6a21\u578b"}, {"name": "\u67e5\u627e\u4e0e\u547d\u540d\u7a7a\u95f4", "type": "cpp", "path": "c\\language\\name_space.html", "desc": "\u67e5\u627e\u4e0e\u547d\u540d\u7a7a\u95f4"}, {"name": "\u4e0d\u8981\u6c42\u8bca\u65ad", "type": "cpp", "path": "c\\language\\ndr.html", "desc": "\u4e0d\u8981\u6c42\u8bca\u65ad"}, {"name": "(C23 \u8d77)\u9884\u5b9a\u4e49\u7a7a\u6307\u9488\u5e38\u91cf (C23 \u8d77)", "type": "cpp", "path": "c\\language\\nullptr.html", "desc": "(C23 \u8d77)\u9884\u5b9a\u4e49\u7a7a\u6307\u9488\u5e38\u91cf (C23 \u8d77)"}, {"name": "\u5bf9\u8c61\u4e0e\u5bf9\u9f50", "type": "cpp", "path": "c\\language\\object.html", "desc": "\u5bf9\u8c61\u4e0e\u5bf9\u9f50"}, {"name": "\u66ff\u7528\u8fd0\u7b97\u7b26\u53ca\u8bb0\u53f7", "type": "cpp", "path": "c\\language\\operator_alternative.html", "desc": "\u66ff\u7528\u8fd0\u7b97\u7b26\u53ca\u8bb0\u53f7"}, {"name": "\u7b97\u672f\u8fd0\u7b97\u7b26", "type": "cpp", "path": "c\\language\\operator_arithmetic.html", "desc": "\u7b97\u672f\u8fd0\u7b97\u7b26"}, {"name": "\u8d4b\u503c\u8fd0\u7b97\u7b26", "type": "cpp", "path": "c\\language\\operator_assignment.html", "desc": "\u8d4b\u503c\u8fd0\u7b97\u7b26"}, {"name": "\u6bd4\u8f83\u8fd0\u7b97\u7b26", "type": "cpp", "path": "c\\language\\operator_comparison.html", "desc": "\u6bd4\u8f83\u8fd0\u7b97\u7b26"}, {"name": "\u81ea\u589e/\u81ea\u51cf\u8fd0\u7b97\u7b26", "type": "cpp", "path": "c\\language\\operator_incdec.html", "desc": "\u81ea\u589e/\u81ea\u51cf\u8fd0\u7b97\u7b26"}, {"name": "\u903b\u8f91\u8fd0\u7b97\u7b26", "type": "cpp", "path": "c\\language\\operator_logical.html", "desc": "\u903b\u8f91\u8fd0\u7b97\u7b26"}, {"name": "\u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26", "type": "cpp", "path": "c\\language\\operator_member_access.html", "desc": "\u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26"}, {"name": "\u5176\u4ed6\u8fd0\u7b97\u7b26", "type": "cpp", "path": "c\\language\\operator_other.html", "desc": "\u5176\u4ed6\u8fd0\u7b97\u7b26"}, {"name": "C \u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7", "type": "cpp", "path": "c\\language\\operator_precedence.html", "desc": "C \u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7"}, {"name": "\u6307\u9488\u58f0\u660e", "type": "cpp", "path": "c\\language\\pointer.html", "desc": "\u6307\u9488\u58f0\u660e"}, {"name": "\u6807\u70b9", "type": "cpp", "path": "c\\language\\punctuators.html", "desc": "\u6807\u70b9"}, {"name": "restrict \u7c7b\u578b\u9650\u5b9a\u7b26", "type": "cpp", "path": "c\\language\\restrict.html", "desc": "restrict \u7c7b\u578b\u9650\u5b9a\u7b26"}, {"name": "return \u8bed\u53e5", "type": "cpp", "path": "c\\language\\return.html", "desc": "return \u8bed\u53e5"}, {"name": "\u6807\u91cf\u521d\u59cb\u5316", "type": "cpp", "path": "c\\language\\scalar_initialization.html", "desc": "\u6807\u91cf\u521d\u59cb\u5316"}, {"name": "\u4f5c\u7528\u57df", "type": "cpp", "path": "c\\language\\scope.html", "desc": "\u4f5c\u7528\u57df"}, {"name": "sizeof \u8fd0\u7b97\u7b26", "type": "cpp", "path": "c\\language\\sizeof.html", "desc": "sizeof \u8fd0\u7b97\u7b26"}, {"name": "\u8bed\u53e5", "type": "cpp", "path": "c\\language\\statements.html", "desc": "\u8bed\u53e5"}, {"name": "\u5b58\u50a8\u7c7b\u8bf4\u660e\u7b26", "type": "cpp", "path": "c\\language\\storage_duration.html", "desc": "\u5b58\u50a8\u7c7b\u8bf4\u660e\u7b26"}, {"name": "\u5b57\u7b26\u4e32\u5b57\u9762\u91cf", "type": "cpp", "path": "c\\language\\string_literal.html", "desc": "\u5b57\u7b26\u4e32\u5b57\u9762\u91cf"}, {"name": "\u7ed3\u6784\u4f53\u58f0\u660e", "type": "cpp", "path": "c\\language\\struct.html", "desc": "\u7ed3\u6784\u4f53\u58f0\u660e"}, {"name": "\u7ed3\u6784\u4f53\u4e0e\u8054\u5408\u4f53\u521d\u59cb\u5316", "type": "cpp", "path": "c\\language\\struct_initialization.html", "desc": "\u7ed3\u6784\u4f53\u4e0e\u8054\u5408\u4f53\u521d\u59cb\u5316"}, {"name": "switch \u8bed\u53e5", "type": "cpp", "path": "c\\language\\switch.html", "desc": "switch \u8bed\u53e5"}, {"name": "\u7ffb\u8bd1\u9636\u6bb5", "type": "cpp", "path": "c\\language\\translation_phases.html", "desc": "\u7ffb\u8bd1\u9636\u6bb5"}, {"name": "\u7c7b\u578b", "type": "cpp", "path": "c\\language\\type.html", "desc": "\u7c7b\u578b"}, {"name": "typedef \u58f0\u660e", "type": "cpp", "path": "c\\language\\typedef.html", "desc": "typedef \u58f0\u660e"}, {"name": "\u8054\u5408\u4f53\u58f0\u660e", "type": "cpp", "path": "c\\language\\union.html", "desc": "\u8054\u5408\u4f53\u58f0\u660e"}, {"name": "\u503c\u7c7b\u522b", "type": "cpp", "path": "c\\language\\value_category.html", "desc": "\u503c\u7c7b\u522b"}, {"name": "\u53d8\u957f\u5b9e\u53c2", "type": "cpp", "path": "c\\language\\variadic.html", "desc": "\u53d8\u957f\u5b9e\u53c2"}, {"name": "volatile \u7c7b\u578b\u9650\u5b9a\u7b26", "type": "cpp", "path": "c\\language\\volatile.html", "desc": "volatile \u7c7b\u578b\u9650\u5b9a\u7b26"}, {"name": "while \u5faa\u73af", "type": "cpp", "path": "c\\language\\while.html", "desc": "while \u5faa\u73af"}, {"name": "_Alignas", "type": "cpp", "path": "c\\language\\_Alignas.html", "desc": "_Alignas"}, {"name": "_Alignof \u8fd0\u7b97\u7b26", "type": "cpp", "path": "c\\language\\_Alignof.html", "desc": "_Alignof \u8fd0\u7b97\u7b26"}, {"name": "_Noreturn \u51fd\u6570\u8bf4\u660e\u7b26", "type": "cpp", "path": "c\\language\\_Noreturn.html", "desc": "_Noreturn \u51fd\u6570\u8bf4\u660e\u7b26"}, {"name": "\u9759\u6001\u65ad\u8a00", "type": "cpp", "path": "c\\language\\_Static_assert.html", "desc": "\u9759\u6001\u65ad\u8a00"}, {"name": "C \u5c5e\u6027\uff1a (C23 \u8d77)C \u5c5e\u6027\uff1a deprecated (C23 \u8d77)", "type": "cpp", "path": "c\\language\\attributes\\deprecated.html", "desc": "C \u5c5e\u6027\uff1a (C23 \u8d77)C \u5c5e\u6027\uff1a deprecated (C23 \u8d77)"}, {"name": "C \u5c5e\u6027\uff1a (C23 \u8d77)C \u5c5e\u6027\uff1a fallthrough (C23 \u8d77)", "type": "cpp", "path": "c\\language\\attributes\\fallthrough.html", "desc": "C \u5c5e\u6027\uff1a (C23 \u8d77)C \u5c5e\u6027\uff1a fallthrough (C23 \u8d77)"}, {"name": "C \u5c5e\u6027\uff1a (C23 \u8d77)C \u5c5e\u6027\uff1a maybe_unused (C23 \u8d77)", "type": "cpp", "path": "c\\language\\attributes\\maybe_unused.html", "desc": "C \u5c5e\u6027\uff1a (C23 \u8d77)C \u5c5e\u6027\uff1a maybe_unused (C23 \u8d77)"}, {"name": "C \u5c5e\u6027\uff1a (C23 \u8d77)C \u5c5e\u6027\uff1a nodiscard (C23 \u8d77)", "type": "cpp", "path": "c\\language\\attributes\\nodiscard.html", "desc": "C \u5c5e\u6027\uff1a (C23 \u8d77)C \u5c5e\u6027\uff1a nodiscard (C23 \u8d77)"}, {"name": "\u5f00\u6e90 C \u5e93\u5217\u8868", "type": "cpp", "path": "c\\links\\libs.html", "desc": "\u5f00\u6e90 C \u5e93\u5217\u8868"}, {"name": "lconv", "type": "cpp", "path": "c\\locale\\lconv.html", "desc": "lconv"}, {"name": "LC_ALL, LC_COLLATE, LC_CTYPE, LC_MONETARY, LC_NUMERIC, LC_TIME", "type": "cpp", "path": "c\\locale\\LC_categories.html", "desc": "LC_ALL, LC_COLLATE, LC_CTYPE, LC_MONETARY, LC_NUMERIC, LC_TIME"}, {"name": "localeconv", "type": "cpp", "path": "c\\locale\\localeconv.html", "desc": "localeconv"}, {"name": "setlocale", "type": "cpp", "path": "c\\locale\\setlocale.html", "desc": "setlocale"}, {"name": "aligned_alloc", "type": "cpp", "path": "c\\memory\\aligned_alloc.html", "desc": "aligned_alloc"}, {"name": "calloc", "type": "cpp", "path": "c\\memory\\calloc.html", "desc": "calloc"}, {"name": "free", "type": "cpp", "path": "c\\memory\\free.html", "desc": "free"}, {"name": "malloc", "type": "cpp", "path": "c\\memory\\malloc.html", "desc": "malloc"}, {"name": "realloc", "type": "cpp", "path": "c\\memory\\realloc.html", "desc": "realloc"}, {"name": "\u590d\u6570\u7b97\u672f", "type": "cpp", "path": "c\\numeric\\complex.html", "desc": "\u590d\u6570\u7b97\u672f"}, {"name": "\u6d6e\u70b9\u73af\u5883", "type": "cpp", "path": "c\\numeric\\fenv.html", "desc": "\u6d6e\u70b9\u73af\u5883"}, {"name": "\u5e38\u7528\u6570\u5b66\u51fd\u6570", "type": "cpp", "path": "c\\numeric\\math.html", "desc": "\u5e38\u7528\u6570\u5b66\u51fd\u6570"}, {"name": "\u4f2a\u968f\u673a\u6570\u751f\u6210", "type": "cpp", "path": "c\\numeric\\random.html", "desc": "\u4f2a\u968f\u673a\u6570\u751f\u6210"}, {"name": "\u6cdb\u578b\u6570\u5b66", "type": "cpp", "path": "c\\numeric\\tgmath.html", "desc": "\u6cdb\u578b\u6570\u5b66"}, {"name": "cabsf, cabs, cabsl", "type": "cpp", "path": "c\\numeric\\complex\\cabs.html", "desc": "cabsf, cabs, cabsl"}, {"name": "cacosf, cacos, cacosl", "type": "cpp", "path": "c\\numeric\\complex\\cacos.html", "desc": "cacosf, cacos, cacosl"}, {"name": "cacoshf, cacosh, cacoshl", "type": "cpp", "path": "c\\numeric\\complex\\cacosh.html", "desc": "cacoshf, cacosh, cacoshl"}, {"name": "cargf, carg, cargl", "type": "cpp", "path": "c\\numeric\\complex\\carg.html", "desc": "cargf, carg, cargl"}, {"name": "casinf, casin, casinl", "type": "cpp", "path": "c\\numeric\\complex\\casin.html", "desc": "casinf, casin, casinl"}, {"name": "casinhf, casinh, casinhl", "type": "cpp", "path": "c\\numeric\\complex\\casinh.html", "desc": "casinhf, casinh, casinhl"}, {"name": "catanf, catan, catanl", "type": "cpp", "path": "c\\numeric\\complex\\catan.html", "desc": "catanf, catan, catanl"}, {"name": "catanhf, catanh, catanhl", "type": "cpp", "path": "c\\numeric\\complex\\catanh.html", "desc": "catanhf, catanh, catanhl"}, {"name": "ccosf, ccos, ccosl", "type": "cpp", "path": "c\\numeric\\complex\\ccos.html", "desc": "ccosf, ccos, ccosl"}, {"name": "ccoshf, ccosh, ccoshl", "type": "cpp", "path": "c\\numeric\\complex\\ccosh.html", "desc": "ccoshf, ccosh, ccoshl"}, {"name": "cexpf, cexp, cexpl", "type": "cpp", "path": "c\\numeric\\complex\\cexp.html", "desc": "cexpf, cexp, cexpl"}, {"name": "cimagf, cimag, cimagl", "type": "cpp", "path": "c\\numeric\\complex\\cimag.html", "desc": "cimagf, cimag, cimagl"}, {"name": "clogf, clog, clogl", "type": "cpp", "path": "c\\numeric\\complex\\clog.html", "desc": "clogf, clog, clogl"}, {"name": "CMPLXF, CMPLX, CMPLXL", "type": "cpp", "path": "c\\numeric\\complex\\CMPLX.html", "desc": "CMPLXF, CMPLX, CMPLXL"}, {"name": "complex", "type": "cpp", "path": "c\\numeric\\complex\\complex.html", "desc": "complex"}, {"name": "_Complex_I", "type": "cpp", "path": "c\\numeric\\complex\\Complex_I.html", "desc": "_Complex_I"}, {"name": "conjf, conj, conjl", "type": "cpp", "path": "c\\numeric\\complex\\conj.html", "desc": "conjf, conj, conjl"}, {"name": "cpowf, cpow, cpowl", "type": "cpp", "path": "c\\numeric\\complex\\cpow.html", "desc": "cpowf, cpow, cpowl"}, {"name": "cprojf, cproj, cprojl", "type": "cpp", "path": "c\\numeric\\complex\\cproj.html", "desc": "cprojf, cproj, cprojl"}, {"name": "crealf, creal, creall", "type": "cpp", "path": "c\\numeric\\complex\\creal.html", "desc": "crealf, creal, creall"}, {"name": "csinf, csin, csinl", "type": "cpp", "path": "c\\numeric\\complex\\csin.html", "desc": "csinf, csin, csinl"}, {"name": "csinhf, csinh, csinhl", "type": "cpp", "path": "c\\numeric\\complex\\csinh.html", "desc": "csinhf, csinh, csinhl"}, {"name": "csqrtf, csqrt, csqrtl", "type": "cpp", "path": "c\\numeric\\complex\\csqrt.html", "desc": "csqrtf, csqrt, csqrtl"}, {"name": "ctanf, ctan, ctanl", "type": "cpp", "path": "c\\numeric\\complex\\ctan.html", "desc": "ctanf, ctan, ctanl"}, {"name": "ctanhf, ctanh, ctanhl", "type": "cpp", "path": "c\\numeric\\complex\\ctanh.html", "desc": "ctanhf, ctanh, ctanhl"}, {"name": "I", "type": "cpp", "path": "c\\numeric\\complex\\I.html", "desc": "I"}, {"name": "imaginary", "type": "cpp", "path": "c\\numeric\\complex\\imaginary.html", "desc": "imaginary"}, {"name": "_Imaginary_I", "type": "cpp", "path": "c\\numeric\\complex\\Imaginary_I.html", "desc": "_Imaginary_I"}, {"name": "feclearexcept", "type": "cpp", "path": "c\\numeric\\fenv\\feclearexcept.html", "desc": "feclearexcept"}, {"name": "fegetenv, fesetenv", "type": "cpp", "path": "c\\numeric\\fenv\\feenv.html", "desc": "fegetenv, fesetenv"}, {"name": "fegetexceptflag, fesetexceptflag", "type": "cpp", "path": "c\\numeric\\fenv\\feexceptflag.html", "desc": "fegetexceptflag, fesetexceptflag"}, {"name": "feholdexcept", "type": "cpp", "path": "c\\numeric\\fenv\\feholdexcept.html", "desc": "feholdexcept"}, {"name": "feraiseexcept", "type": "cpp", "path": "c\\numeric\\fenv\\feraiseexcept.html", "desc": "feraiseexcept"}, {"name": "fegetround, fesetround", "type": "cpp", "path": "c\\numeric\\fenv\\feround.html", "desc": "fegetround, fesetround"}, {"name": "fetestexcept", "type": "cpp", "path": "c\\numeric\\fenv\\fetestexcept.html", "desc": "fetestexcept"}, {"name": "feupdateenv", "type": "cpp", "path": "c\\numeric\\fenv\\feupdateenv.html", "desc": "feupdateenv"}, {"name": "FE_DFL_ENV", "type": "cpp", "path": "c\\numeric\\fenv\\FE_DFL_ENV.html", "desc": "FE_DFL_ENV"}, {"name": "FE_DIVBYZERO, FE_INEXACT, FE_INVALID, FE_OVERFLOW, FE_UNDERFLOW, FE_ALL_EXCEPT", "type": "cpp", "path": "c\\numeric\\fenv\\FE_exceptions.html", "desc": "FE_DIVBYZERO, FE_INEXACT, FE_INVALID, FE_OVERFLOW, FE_UNDERFLOW, FE_ALL_EXCEPT"}, {"name": "FE_DOWNWARD, FE_TONEAREST, FE_TOWARDZERO, FE_UPWARD", "type": "cpp", "path": "c\\numeric\\fenv\\FE_round.html", "desc": "FE_DOWNWARD, FE_TONEAREST, FE_TOWARDZERO, FE_UPWARD"}, {"name": "abs, labs, llabs, imaxabs", "type": "cpp", "path": "c\\numeric\\math\\abs.html", "desc": "abs, labs, llabs, imaxabs"}, {"name": "acos, acosf, acosl", "type": "cpp", "path": "c\\numeric\\math\\acos.html", "desc": "acos, acosf, acosl"}, {"name": "acosh, acoshf, acoshl", "type": "cpp", "path": "c\\numeric\\math\\acosh.html", "desc": "acosh, acoshf, acoshl"}, {"name": "asin, asinf, asinl", "type": "cpp", "path": "c\\numeric\\math\\asin.html", "desc": "asin, asinf, asinl"}, {"name": "asinh, asinhf, asinhl", "type": "cpp", "path": "c\\numeric\\math\\asinh.html", "desc": "asinh, asinhf, asinhl"}, {"name": "atan, atanf, atanl", "type": "cpp", "path": "c\\numeric\\math\\atan.html", "desc": "atan, atanf, atanl"}, {"name": "atan2, atan2f, atan2l", "type": "cpp", "path": "c\\numeric\\math\\atan2.html", "desc": "atan2, atan2f, atan2l"}, {"name": "atanh, atanhf, atanhl", "type": "cpp", "path": "c\\numeric\\math\\atanh.html", "desc": "atanh, atanhf, atanhl"}, {"name": "cbrt, cbrtf, cbrtl", "type": "cpp", "path": "c\\numeric\\math\\cbrt.html", "desc": "cbrt, cbrtf, cbrtl"}, {"name": "ceil, ceilf, ceill", "type": "cpp", "path": "c\\numeric\\math\\ceil.html", "desc": "ceil, ceilf, ceill"}, {"name": "copysign, copysignf, copysignl", "type": "cpp", "path": "c\\numeric\\math\\copysign.html", "desc": "copysign, copysignf, copysignl"}, {"name": "cos, cosf, cosl", "type": "cpp", "path": "c\\numeric\\math\\cos.html", "desc": "cos, cosf, cosl"}, {"name": "cosh, coshf, coshl", "type": "cpp", "path": "c\\numeric\\math\\cosh.html", "desc": "cosh, coshf, coshl"}, {"name": "div, ldiv, lldiv, imaxdiv", "type": "cpp", "path": "c\\numeric\\math\\div.html", "desc": "div, ldiv, lldiv, imaxdiv"}, {"name": "erf, erff, erfl", "type": "cpp", "path": "c\\numeric\\math\\erf.html", "desc": "erf, erff, erfl"}, {"name": "erfc, erfcf, erfcl", "type": "cpp", "path": "c\\numeric\\math\\erfc.html", "desc": "erfc, erfcf, erfcl"}, {"name": "exp, expf, expl", "type": "cpp", "path": "c\\numeric\\math\\exp.html", "desc": "exp, expf, expl"}, {"name": "exp2, exp2f, exp2l", "type": "cpp", "path": "c\\numeric\\math\\exp2.html", "desc": "exp2, exp2f, exp2l"}, {"name": "expm1, expm1f, expm1l", "type": "cpp", "path": "c\\numeric\\math\\expm1.html", "desc": "expm1, expm1f, expm1l"}, {"name": "fabs, fabsf, fabsl, fabsd32, fabsd64, fabsd128", "type": "cpp", "path": "c\\numeric\\math\\fabs.html", "desc": "fabs, fabsf, fabsl, fabsd32, fabsd64, fabsd128"}, {"name": "fdim", "type": "cpp", "path": "c\\numeric\\math\\fdim.html", "desc": "fdim"}, {"name": "float_t, double_t", "type": "cpp", "path": "c\\numeric\\math\\float_t.html", "desc": "float_t, double_t"}, {"name": "floor, floorf, floorl", "type": "cpp", "path": "c\\numeric\\math\\floor.html", "desc": "floor, floorf, floorl"}, {"name": "fma, fmaf, fmal", "type": "cpp", "path": "c\\numeric\\math\\fma.html", "desc": "fma, fmaf, fmal"}, {"name": "fmax, fmaxf, fmaxl", "type": "cpp", "path": "c\\numeric\\math\\fmax.html", "desc": "fmax, fmaxf, fmaxl"}, {"name": "fmin, fminf, fminl", "type": "cpp", "path": "c\\numeric\\math\\fmin.html", "desc": "fmin, fminf, fminl"}, {"name": "fmod, fmodf, fmodl", "type": "cpp", "path": "c\\numeric\\math\\fmod.html", "desc": "fmod, fmodf, fmodl"}, {"name": "fpclassify", "type": "cpp", "path": "c\\numeric\\math\\fpclassify.html", "desc": "fpclassify"}, {"name": "FP_NORMAL, FP_SUBNORMAL, FP_ZERO, FP_INFINITE, FP_NAN", "type": "cpp", "path": "c\\numeric\\math\\FP_categories.html", "desc": "FP_NORMAL, FP_SUBNORMAL, FP_ZERO, FP_INFINITE, FP_NAN"}, {"name": "frexp, frexpf, frexpl", "type": "cpp", "path": "c\\numeric\\math\\frexp.html", "desc": "frexp, frexpf, frexpl"}, {"name": "HUGE_VALF, HUGE_VAL, HUGE_VALL", "type": "cpp", "path": "c\\numeric\\math\\HUGE_VAL.html", "desc": "HUGE_VALF, HUGE_VAL, HUGE_VALL"}, {"name": "hypot, hypotf, hypotl", "type": "cpp", "path": "c\\numeric\\math\\hypot.html", "desc": "hypot, hypotf, hypotl"}, {"name": "ilogb, ilogbf, ilogbl", "type": "cpp", "path": "c\\numeric\\math\\ilogb.html", "desc": "ilogb, ilogbf, ilogbl"}, {"name": "INFINITY", "type": "cpp", "path": "c\\numeric\\math\\INFINITY.html", "desc": "INFINITY"}, {"name": "isfinite", "type": "cpp", "path": "c\\numeric\\math\\isfinite.html", "desc": "isfinite"}, {"name": "isgreater", "type": "cpp", "path": "c\\numeric\\math\\isgreater.html", "desc": "isgreater"}, {"name": "isgreaterequal", "type": "cpp", "path": "c\\numeric\\math\\isgreaterequal.html", "desc": "isgreaterequal"}, {"name": "isinf", "type": "cpp", "path": "c\\numeric\\math\\isinf.html", "desc": "isinf"}, {"name": "isless", "type": "cpp", "path": "c\\numeric\\math\\isless.html", "desc": "isless"}, {"name": "islessequal", "type": "cpp", "path": "c\\numeric\\math\\islessequal.html", "desc": "islessequal"}, {"name": "islessgreater", "type": "cpp", "path": "c\\numeric\\math\\islessgreater.html", "desc": "islessgreater"}, {"name": "isnan", "type": "cpp", "path": "c\\numeric\\math\\isnan.html", "desc": "isnan"}, {"name": "isnormal", "type": "cpp", "path": "c\\numeric\\math\\isnormal.html", "desc": "isnormal"}, {"name": "isunordered", "type": "cpp", "path": "c\\numeric\\math\\isunordered.html", "desc": "isunordered"}, {"name": "ldexp, ldexpf, ldexpl", "type": "cpp", "path": "c\\numeric\\math\\ldexp.html", "desc": "ldexp, ldexpf, ldexpl"}, {"name": "lgamma, lgammaf, lgammal", "type": "cpp", "path": "c\\numeric\\math\\lgamma.html", "desc": "lgamma, lgammaf, lgammal"}, {"name": "log, logf, logl", "type": "cpp", "path": "c\\numeric\\math\\log.html", "desc": "log, logf, logl"}, {"name": "log10, log10f, log10l", "type": "cpp", "path": "c\\numeric\\math\\log10.html", "desc": "log10, log10f, log10l"}, {"name": "log1p, log1pf, log1pl", "type": "cpp", "path": "c\\numeric\\math\\log1p.html", "desc": "log1p, log1pf, log1pl"}, {"name": "log2, log2f, log2l", "type": "cpp", "path": "c\\numeric\\math\\log2.html", "desc": "log2, log2f, log2l"}, {"name": "logb, logbf, logbl", "type": "cpp", "path": "c\\numeric\\math\\logb.html", "desc": "logb, logbf, logbl"}, {"name": "MATH_ERRNO, MATH_ERREXCEPT, math_errhandling", "type": "cpp", "path": "c\\numeric\\math\\math_errhandling.html", "desc": "MATH_ERRNO, MATH_ERREXCEPT, math_errhandling"}, {"name": "modf, modff, modfl", "type": "cpp", "path": "c\\numeric\\math\\modf.html", "desc": "modf, modff, modfl"}, {"name": "NAN", "type": "cpp", "path": "c\\numeric\\math\\nan.html", "desc": "NAN"}, {"name": "nearbyint, nearbyintf, nearbyintl", "type": "cpp", "path": "c\\numeric\\math\\nearbyint.html", "desc": "nearbyint, nearbyintf, nearbyintl"}, {"name": "nextafter, nextafterf, nextafterl, nexttoward, nexttowardf, nexttowardl", "type": "cpp", "path": "c\\numeric\\math\\nextafter.html", "desc": "nextafter, nextafterf, nextafterl, nexttoward, nexttowardf, nexttowardl"}, {"name": "nextafter, nextafterf, nextafterl, nexttoward, nexttowardf, nexttowardl", "type": "cpp", "path": "c\\numeric\\math\\nexttoward.html", "desc": "nextafter, nextafterf, nextafterl, nexttoward, nexttowardf, nexttowardl"}, {"name": "pow, powf, powl", "type": "cpp", "path": "c\\numeric\\math\\pow.html", "desc": "pow, powf, powl"}, {"name": "remainder, remainderf, remainderl", "type": "cpp", "path": "c\\numeric\\math\\remainder.html", "desc": "remainder, remainderf, remainderl"}, {"name": "remquo, remquof, remquol", "type": "cpp", "path": "c\\numeric\\math\\remquo.html", "desc": "remquo, remquof, remquol"}, {"name": "rint, rintf, rintl, lrint, lrintf, lrintl, llrint, llrintf, llrintl", "type": "cpp", "path": "c\\numeric\\math\\rint.html", "desc": "rint, rintf, rintl, lrint, lrintf, lrintl, llrint, llrintf, llrintl"}, {"name": "round, roundf, roundl, lround, lroundf, lroundl, llround, llroundf, llroundl", "type": "cpp", "path": "c\\numeric\\math\\round.html", "desc": "round, roundf, roundl, lround, lroundf, lroundl, llround, llroundf, llroundl"}, {"name": "scalbn, scalbnf, scalbnl, scalbln, scalblnf, scalblnl", "type": "cpp", "path": "c\\numeric\\math\\scalbn.html", "desc": "scalbn, scalbnf, scalbnl, scalbln, scalblnf, scalblnl"}, {"name": "signbit", "type": "cpp", "path": "c\\numeric\\math\\signbit.html", "desc": "signbit"}, {"name": "sin, sinf, sinl", "type": "cpp", "path": "c\\numeric\\math\\sin.html", "desc": "sin, sinf, sinl"}, {"name": "sinh, sinhf, sinhl", "type": "cpp", "path": "c\\numeric\\math\\sinh.html", "desc": "sinh, sinhf, sinhl"}, {"name": "sqrt, sqrtf, sqrtl", "type": "cpp", "path": "c\\numeric\\math\\sqrt.html", "desc": "sqrt, sqrtf, sqrtl"}, {"name": "tan, tanf, tanl", "type": "cpp", "path": "c\\numeric\\math\\tan.html", "desc": "tan, tanf, tanl"}, {"name": "tanh, tanhf, tanhl", "type": "cpp", "path": "c\\numeric\\math\\tanh.html", "desc": "tanh, tanhf, tanhl"}, {"name": "tgamma, tgammaf, tgammal", "type": "cpp", "path": "c\\numeric\\math\\tgamma.html", "desc": "tgamma, tgammaf, tgammal"}, {"name": "trunc, truncf, truncl", "type": "cpp", "path": "c\\numeric\\math\\trunc.html", "desc": "trunc, truncf, truncl"}, {"name": "rand", "type": "cpp", "path": "c\\numeric\\random\\rand.html", "desc": "rand"}, {"name": "RAND_MAX", "type": "cpp", "path": "c\\numeric\\random\\RAND_MAX.html", "desc": "RAND_MAX"}, {"name": "srand", "type": "cpp", "path": "c\\numeric\\random\\srand.html", "desc": "srand"}, {"name": "\u6761\u4ef6\u5305\u542b", "type": "cpp", "path": "c\\preprocessor\\conditional.html", "desc": "\u6761\u4ef6\u5305\u542b"}, {"name": "\u8bca\u65ad\u6307\u4ee4", "type": "cpp", "path": "c\\preprocessor\\error.html", "desc": "\u8bca\u65ad\u6307\u4ee4"}, {"name": "\u5b9e\u73b0\u5b9a\u4e49\u884c\u4e3a\u63a7\u5236", "type": "cpp", "path": "c\\preprocessor\\impl.html", "desc": "\u5b9e\u73b0\u5b9a\u4e49\u884c\u4e3a\u63a7\u5236"}, {"name": "\u6e90\u6587\u4ef6\u5305\u542b", "type": "cpp", "path": "c\\preprocessor\\include.html", "desc": "\u6e90\u6587\u4ef6\u5305\u542b"}, {"name": "\u6587\u4ef6\u540d\u548c\u884c\u4fe1\u606f", "type": "cpp", "path": "c\\preprocessor\\line.html", "desc": "\u6587\u4ef6\u540d\u548c\u884c\u4fe1\u606f"}, {"name": "\u66ff\u6362\u6587\u672c\u5b8f", "type": "cpp", "path": "c\\preprocessor\\replace.html", "desc": "\u66ff\u6362\u6587\u672c\u5b8f"}, {"name": "abort", "type": "cpp", "path": "c\\program\\abort.html", "desc": "abort"}, {"name": "atexit", "type": "cpp", "path": "c\\program\\atexit.html", "desc": "atexit"}, {"name": "at_quick_exit", "type": "cpp", "path": "c\\program\\at_quick_exit.html", "desc": "at_quick_exit"}, {"name": "exit", "type": "cpp", "path": "c\\program\\exit.html", "desc": "exit"}, {"name": "EXIT_SUCCESS, EXIT_FAILURE", "type": "cpp", "path": "c\\program\\EXIT_status.html", "desc": "EXIT_SUCCESS, EXIT_FAILURE"}, {"name": "getenv, getenv_s", "type": "cpp", "path": "c\\program\\getenv.html", "desc": "getenv, getenv_s"}, {"name": "jmp_buf", "type": "cpp", "path": "c\\program\\jmp_buf.html", "desc": "jmp_buf"}, {"name": "longjmp", "type": "cpp", "path": "c\\program\\longjmp.html", "desc": "longjmp"}, {"name": "quick_exit", "type": "cpp", "path": "c\\program\\quick_exit.html", "desc": "quick_exit"}, {"name": "raise", "type": "cpp", "path": "c\\program\\raise.html", "desc": "raise"}, {"name": "setjmp", "type": "cpp", "path": "c\\program\\setjmp.html", "desc": "setjmp"}, {"name": "signal", "type": "cpp", "path": "c\\program\\signal.html", "desc": "signal"}, {"name": "sig_atomic_t", "type": "cpp", "path": "c\\program\\sig_atomic_t.html", "desc": "sig_atomic_t"}, {"name": "SIG_ERR", "type": "cpp", "path": "c\\program\\SIG_ERR.html", "desc": "SIG_ERR"}, {"name": "SIG_DFL, SIG_IGN", "type": "cpp", "path": "c\\program\\SIG_strategies.html", "desc": "SIG_DFL, SIG_IGN"}, {"name": "SIGTERM, SIGSEGV, SIGINT, SIGILL, SIGABRT, SIGFPE", "type": "cpp", "path": "c\\program\\SIG_types.html", "desc": "SIGTERM, SIGSEGV, SIGINT, SIGILL, SIGABRT, SIGFPE"}, {"name": "system", "type": "cpp", "path": "c\\program\\system.html", "desc": "system"}, {"name": "unreachable", "type": "cpp", "path": "c\\program\\unreachable.html", "desc": "unreachable"}, {"name": "_Exit", "type": "cpp", "path": "c\\program\\_Exit.html", "desc": "_Exit"}, {"name": "\u7a7a\u7ec8\u6b62\u5b57\u8282\u5b57\u7b26\u4e32", "type": "cpp", "path": "c\\string\\byte.html", "desc": "\u7a7a\u7ec8\u6b62\u5b57\u8282\u5b57\u7b26\u4e32"}, {"name": "\u7a7a\u7ec8\u6b62\u591a\u5b57\u8282\u5b57\u7b26\u4e32", "type": "cpp", "path": "c\\string\\multibyte.html", "desc": "\u7a7a\u7ec8\u6b62\u591a\u5b57\u8282\u5b57\u7b26\u4e32"}, {"name": "\u7a7a\u7ec8\u6b62\u5bbd\u5b57\u7b26\u4e32", "type": "cpp", "path": "c\\string\\wide.html", "desc": "\u7a7a\u7ec8\u6b62\u5bbd\u5b57\u7b26\u4e32"}, {"name": "atof", "type": "cpp", "path": "c\\string\\byte\\atof.html", "desc": "atof"}, {"name": "atoi, atol, atoll", "type": "cpp", "path": "c\\string\\byte\\atoi.html", "desc": "atoi, atol, atoll"}, {"name": "isalnum", "type": "cpp", "path": "c\\string\\byte\\isalnum.html", "desc": "isalnum"}, {"name": "isalpha", "type": "cpp", "path": "c\\string\\byte\\isalpha.html", "desc": "isalpha"}, {"name": "isblank", "type": "cpp", "path": "c\\string\\byte\\isblank.html", "desc": "isblank"}, {"name": "iscntrl", "type": "cpp", "path": "c\\string\\byte\\iscntrl.html", "desc": "iscntrl"}, {"name": "isdigit", "type": "cpp", "path": "c\\string\\byte\\isdigit.html", "desc": "isdigit"}, {"name": "isgraph", "type": "cpp", "path": "c\\string\\byte\\isgraph.html", "desc": "isgraph"}, {"name": "islower", "type": "cpp", "path": "c\\string\\byte\\islower.html", "desc": "islower"}, {"name": "isprint", "type": "cpp", "path": "c\\string\\byte\\isprint.html", "desc": "isprint"}, {"name": "ispunct", "type": "cpp", "path": "c\\string\\byte\\ispunct.html", "desc": "ispunct"}, {"name": "isspace", "type": "cpp", "path": "c\\string\\byte\\isspace.html", "desc": "isspace"}, {"name": "isupper", "type": "cpp", "path": "c\\string\\byte\\isupper.html", "desc": "isupper"}, {"name": "isxdigit", "type": "cpp", "path": "c\\string\\byte\\isxdigit.html", "desc": "isxdigit"}, {"name": "memccpy", "type": "cpp", "path": "c\\string\\byte\\memccpy.html", "desc": "memccpy"}, {"name": "memchr", "type": "cpp", "path": "c\\string\\byte\\memchr.html", "desc": "memchr"}, {"name": "memcmp", "type": "cpp", "path": "c\\string\\byte\\memcmp.html", "desc": "memcmp"}, {"name": "memcpy, memcpy_s", "type": "cpp", "path": "c\\string\\byte\\memcpy.html", "desc": "memcpy, memcpy_s"}, {"name": "memmove, memmove_s", "type": "cpp", "path": "c\\string\\byte\\memmove.html", "desc": "memmove, memmove_s"}, {"name": "memset, memset_s", "type": "cpp", "path": "c\\string\\byte\\memset.html", "desc": "memset, memset_s"}, {"name": "strcat, strcat_s", "type": "cpp", "path": "c\\string\\byte\\strcat.html", "desc": "strcat, strcat_s"}, {"name": "strchr", "type": "cpp", "path": "c\\string\\byte\\strchr.html", "desc": "strchr"}, {"name": "strcmp", "type": "cpp", "path": "c\\string\\byte\\strcmp.html", "desc": "strcmp"}, {"name": "strcoll", "type": "cpp", "path": "c\\string\\byte\\strcoll.html", "desc": "strcoll"}, {"name": "strcpy, strcpy_s", "type": "cpp", "path": "c\\string\\byte\\strcpy.html", "desc": "strcpy, strcpy_s"}, {"name": "strcspn", "type": "cpp", "path": "c\\string\\byte\\strcspn.html", "desc": "strcspn"}, {"name": "strdup", "type": "cpp", "path": "c\\string\\byte\\strdup.html", "desc": "strdup"}, {"name": "strerror, strerror_s, strerrorlen_s", "type": "cpp", "path": "c\\string\\byte\\strerror.html", "desc": "strerror, strerror_s, strerrorlen_s"}, {"name": "strlen, strnlen_s", "type": "cpp", "path": "c\\string\\byte\\strlen.html", "desc": "strlen, strnlen_s"}, {"name": "strncat, strncat_s", "type": "cpp", "path": "c\\string\\byte\\strncat.html", "desc": "strncat, strncat_s"}, {"name": "strncmp", "type": "cpp", "path": "c\\string\\byte\\strncmp.html", "desc": "strncmp"}, {"name": "strncpy, strncpy_s", "type": "cpp", "path": "c\\string\\byte\\strncpy.html", "desc": "strncpy, strncpy_s"}, {"name": "strndup", "type": "cpp", "path": "c\\string\\byte\\strndup.html", "desc": "strndup"}, {"name": "strpbrk", "type": "cpp", "path": "c\\string\\byte\\strpbrk.html", "desc": "strpbrk"}, {"name": "strrchr", "type": "cpp", "path": "c\\string\\byte\\strrchr.html", "desc": "strrchr"}, {"name": "strspn", "type": "cpp", "path": "c\\string\\byte\\strspn.html", "desc": "strspn"}, {"name": "strstr", "type": "cpp", "path": "c\\string\\byte\\strstr.html", "desc": "strstr"}, {"name": "strtof, strtod, strtold", "type": "cpp", "path": "c\\string\\byte\\strtof.html", "desc": "strtof, strtod, strtold"}, {"name": "strtoimax, strtoumax", "type": "cpp", "path": "c\\string\\byte\\strtoimax.html", "desc": "strtoimax, strtoumax"}, {"name": "strtok, strtok_s", "type": "cpp", "path": "c\\string\\byte\\strtok.html", "desc": "strtok, strtok_s"}, {"name": "strtol, strtoll", "type": "cpp", "path": "c\\string\\byte\\strtol.html", "desc": "strtol, strtoll"}, {"name": "strtoul, strtoull", "type": "cpp", "path": "c\\string\\byte\\strtoul.html", "desc": "strtoul, strtoull"}, {"name": "strxfrm", "type": "cpp", "path": "c\\string\\byte\\strxfrm.html", "desc": "strxfrm"}, {"name": "tolower", "type": "cpp", "path": "c\\string\\byte\\tolower.html", "desc": "tolower"}, {"name": "toupper", "type": "cpp", "path": "c\\string\\byte\\toupper.html", "desc": "toupper"}, {"name": "btowc", "type": "cpp", "path": "c\\string\\multibyte\\btowc.html", "desc": "btowc"}, {"name": "c16rtomb", "type": "cpp", "path": "c\\string\\multibyte\\c16rtomb.html", "desc": "c16rtomb"}, {"name": "c32rtomb", "type": "cpp", "path": "c\\string\\multibyte\\c32rtomb.html", "desc": "c32rtomb"}, {"name": "c8rtomb", "type": "cpp", "path": "c\\string\\multibyte\\c8rtomb.html", "desc": "c8rtomb"}, {"name": "char16_t", "type": "cpp", "path": "c\\string\\multibyte\\char16_t.html", "desc": "char16_t"}, {"name": "char32_t", "type": "cpp", "path": "c\\string\\multibyte\\char32_t.html", "desc": "char32_t"}, {"name": "mblen", "type": "cpp", "path": "c\\string\\multibyte\\mblen.html", "desc": "mblen"}, {"name": "mbrlen", "type": "cpp", "path": "c\\string\\multibyte\\mbrlen.html", "desc": "mbrlen"}, {"name": "mbrtoc16", "type": "cpp", "path": "c\\string\\multibyte\\mbrtoc16.html", "desc": "mbrtoc16"}, {"name": "mbrtoc32", "type": "cpp", "path": "c\\string\\multibyte\\mbrtoc32.html", "desc": "mbrtoc32"}, {"name": "mbrtoc8", "type": "cpp", "path": "c\\string\\multibyte\\mbrtoc8.html", "desc": "mbrtoc8"}, {"name": "mbrtowc", "type": "cpp", "path": "c\\string\\multibyte\\mbrtowc.html", "desc": "mbrtowc"}, {"name": "mbsinit", "type": "cpp", "path": "c\\string\\multibyte\\mbsinit.html", "desc": "mbsinit"}, {"name": "mbsrtowcs, mbsrtowcs_s", "type": "cpp", "path": "c\\string\\multibyte\\mbsrtowcs.html", "desc": "mbsrtowcs, mbsrtowcs_s"}, {"name": "mbstate_t", "type": "cpp", "path": "c\\string\\multibyte\\mbstate_t.html", "desc": "mbstate_t"}, {"name": "mbstowcs, mbstowcs_s", "type": "cpp", "path": "c\\string\\multibyte\\mbstowcs.html", "desc": "mbstowcs, mbstowcs_s"}, {"name": "mbtowc", "type": "cpp", "path": "c\\string\\multibyte\\mbtowc.html", "desc": "mbtowc"}, {"name": "wcrtomb, wcrtomb_s", "type": "cpp", "path": "c\\string\\multibyte\\wcrtomb.html", "desc": "wcrtomb, wcrtomb_s"}, {"name": "wcsrtombs, wcsrtombs_s", "type": "cpp", "path": "c\\string\\multibyte\\wcsrtombs.html", "desc": "wcsrtombs, wcsrtombs_s"}, {"name": "wcstombs, wcstombs_s", "type": "cpp", "path": "c\\string\\multibyte\\wcstombs.html", "desc": "wcstombs, wcstombs_s"}, {"name": "wctob", "type": "cpp", "path": "c\\string\\multibyte\\wctob.html", "desc": "wctob"}, {"name": "wctomb, wctomb_s", "type": "cpp", "path": "c\\string\\multibyte\\wctomb.html", "desc": "wctomb, wctomb_s"}, {"name": "iswalnum", "type": "cpp", "path": "c\\string\\wide\\iswalnum.html", "desc": "iswalnum"}, {"name": "iswalpha", "type": "cpp", "path": "c\\string\\wide\\iswalpha.html", "desc": "iswalpha"}, {"name": "iswblank", "type": "cpp", "path": "c\\string\\wide\\iswblank.html", "desc": "iswblank"}, {"name": "iswcntrl", "type": "cpp", "path": "c\\string\\wide\\iswcntrl.html", "desc": "iswcntrl"}, {"name": "iswctype", "type": "cpp", "path": "c\\string\\wide\\iswctype.html", "desc": "iswctype"}, {"name": "iswdigit", "type": "cpp", "path": "c\\string\\wide\\iswdigit.html", "desc": "iswdigit"}, {"name": "iswgraph", "type": "cpp", "path": "c\\string\\wide\\iswgraph.html", "desc": "iswgraph"}, {"name": "iswlower", "type": "cpp", "path": "c\\string\\wide\\iswlower.html", "desc": "iswlower"}, {"name": "iswprint", "type": "cpp", "path": "c\\string\\wide\\iswprint.html", "desc": "iswprint"}, {"name": "iswpunct", "type": "cpp", "path": "c\\string\\wide\\iswpunct.html", "desc": "iswpunct"}, {"name": "iswspace", "type": "cpp", "path": "c\\string\\wide\\iswspace.html", "desc": "iswspace"}, {"name": "iswupper", "type": "cpp", "path": "c\\string\\wide\\iswupper.html", "desc": "iswupper"}, {"name": "iswxdigit", "type": "cpp", "path": "c\\string\\wide\\iswxdigit.html", "desc": "iswxdigit"}, {"name": "towctrans", "type": "cpp", "path": "c\\string\\wide\\towctrans.html", "desc": "towctrans"}, {"name": "towlower", "type": "cpp", "path": "c\\string\\wide\\towlower.html", "desc": "towlower"}, {"name": "towupper", "type": "cpp", "path": "c\\string\\wide\\towupper.html", "desc": "towupper"}, {"name": "wcscat, wcscat_s", "type": "cpp", "path": "c\\string\\wide\\wcscat.html", "desc": "wcscat, wcscat_s"}, {"name": "wcschr", "type": "cpp", "path": "c\\string\\wide\\wcschr.html", "desc": "wcschr"}, {"name": "wcscmp", "type": "cpp", "path": "c\\string\\wide\\wcscmp.html", "desc": "wcscmp"}, {"name": "wcscoll", "type": "cpp", "path": "c\\string\\wide\\wcscoll.html", "desc": "wcscoll"}, {"name": "wcscpy, wcscpy_s", "type": "cpp", "path": "c\\string\\wide\\wcscpy.html", "desc": "wcscpy, wcscpy_s"}, {"name": "wcscspn", "type": "cpp", "path": "c\\string\\wide\\wcscspn.html", "desc": "wcscspn"}, {"name": "wcslen, wcsnlen_s", "type": "cpp", "path": "c\\string\\wide\\wcslen.html", "desc": "wcslen, wcsnlen_s"}, {"name": "wcsncat, wcsncat_s", "type": "cpp", "path": "c\\string\\wide\\wcsncat.html", "desc": "wcsncat, wcsncat_s"}, {"name": "wcsncmp", "type": "cpp", "path": "c\\string\\wide\\wcsncmp.html", "desc": "wcsncmp"}, {"name": "wcsncpy, wcsncpy_s", "type": "cpp", "path": "c\\string\\wide\\wcsncpy.html", "desc": "wcsncpy, wcsncpy_s"}, {"name": "wcspbrk", "type": "cpp", "path": "c\\string\\wide\\wcspbrk.html", "desc": "wcspbrk"}, {"name": "wcsrchr", "type": "cpp", "path": "c\\string\\wide\\wcsrchr.html", "desc": "wcsrchr"}, {"name": "wcsspn", "type": "cpp", "path": "c\\string\\wide\\wcsspn.html", "desc": "wcsspn"}, {"name": "wcsstr", "type": "cpp", "path": "c\\string\\wide\\wcsstr.html", "desc": "wcsstr"}, {"name": "wcstof, wcstod, wcstold", "type": "cpp", "path": "c\\string\\wide\\wcstof.html", "desc": "wcstof, wcstod, wcstold"}, {"name": "wcstoimax, wcstoumax", "type": "cpp", "path": "c\\string\\wide\\wcstoimax.html", "desc": "wcstoimax, wcstoumax"}, {"name": "wcstok, wcstok_s", "type": "cpp", "path": "c\\string\\wide\\wcstok.html", "desc": "wcstok, wcstok_s"}, {"name": "wcstol, wcstoll", "type": "cpp", "path": "c\\string\\wide\\wcstol.html", "desc": "wcstol, wcstoll"}, {"name": "wcstoul, wcstoull", "type": "cpp", "path": "c\\string\\wide\\wcstoul.html", "desc": "wcstoul, wcstoull"}, {"name": "wcsxfrm", "type": "cpp", "path": "c\\string\\wide\\wcsxfrm.html", "desc": "wcsxfrm"}, {"name": "wctrans", "type": "cpp", "path": "c\\string\\wide\\wctrans.html", "desc": "wctrans"}, {"name": "wctype", "type": "cpp", "path": "c\\string\\wide\\wctype.html", "desc": "wctype"}, {"name": "wmemchr", "type": "cpp", "path": "c\\string\\wide\\wmemchr.html", "desc": "wmemchr"}, {"name": "wmemcmp", "type": "cpp", "path": "c\\string\\wide\\wmemcmp.html", "desc": "wmemcmp"}, {"name": "wmemcpy, wmemcpy_s", "type": "cpp", "path": "c\\string\\wide\\wmemcpy.html", "desc": "wmemcpy, wmemcpy_s"}, {"name": "wmemmove, wmemmove_s", "type": "cpp", "path": "c\\string\\wide\\wmemmove.html", "desc": "wmemmove, wmemmove_s"}, {"name": "wmemset", "type": "cpp", "path": "c\\string\\wide\\wmemset.html", "desc": "wmemset"}, {"name": "\u5b8f\u7b26\u53f7\u7d22\u5f15", "type": "cpp", "path": "c\\symbol_index\\macro.html", "desc": "\u5b8f\u7b26\u53f7\u7d22\u5f15"}, {"name": "call_once, once_flag, ONCE_FLAG_INIT", "type": "cpp", "path": "c\\thread\\call_once.html", "desc": "call_once, once_flag, ONCE_FLAG_INIT"}, {"name": "cnd_broadcast", "type": "cpp", "path": "c\\thread\\cnd_broadcast.html", "desc": "cnd_broadcast"}, {"name": "cnd_destroy", "type": "cpp", "path": "c\\thread\\cnd_destroy.html", "desc": "cnd_destroy"}, {"name": "cnd_init", "type": "cpp", "path": "c\\thread\\cnd_init.html", "desc": "cnd_init"}, {"name": "cnd_signal", "type": "cpp", "path": "c\\thread\\cnd_signal.html", "desc": "cnd_signal"}, {"name": "cnd_timedwait", "type": "cpp", "path": "c\\thread\\cnd_timedwait.html", "desc": "cnd_timedwait"}, {"name": "cnd_wait", "type": "cpp", "path": "c\\thread\\cnd_wait.html", "desc": "cnd_wait"}, {"name": "mtx_destroy", "type": "cpp", "path": "c\\thread\\mtx_destroy.html", "desc": "mtx_destroy"}, {"name": "mtx_init", "type": "cpp", "path": "c\\thread\\mtx_init.html", "desc": "mtx_init"}, {"name": "mtx_lock", "type": "cpp", "path": "c\\thread\\mtx_lock.html", "desc": "mtx_lock"}, {"name": "mtx_timedlock", "type": "cpp", "path": "c\\thread\\mtx_timedlock.html", "desc": "mtx_timedlock"}, {"name": "mtx_trylock", "type": "cpp", "path": "c\\thread\\mtx_trylock.html", "desc": "mtx_trylock"}, {"name": "mtx_plain, mtx_recursive, mtx_timed", "type": "cpp", "path": "c\\thread\\mtx_types.html", "desc": "mtx_plain, mtx_recursive, mtx_timed"}, {"name": "mtx_unlock", "type": "cpp", "path": "c\\thread\\mtx_unlock.html", "desc": "mtx_unlock"}, {"name": "call_once, once_flag, ONCE_FLAG_INIT", "type": "cpp", "path": "c\\thread\\ONCE_FLAG_INIT.html", "desc": "call_once, once_flag, ONCE_FLAG_INIT"}, {"name": "thrd_create", "type": "cpp", "path": "c\\thread\\thrd_create.html", "desc": "thrd_create"}, {"name": "thrd_current", "type": "cpp", "path": "c\\thread\\thrd_current.html", "desc": "thrd_current"}, {"name": "thrd_detach", "type": "cpp", "path": "c\\thread\\thrd_detach.html", "desc": "thrd_detach"}, {"name": "thrd_equal", "type": "cpp", "path": "c\\thread\\thrd_equal.html", "desc": "thrd_equal"}, {"name": "thrd_success, thrd_timedout, thrd_busy, thrd_nomem, thrd_error", "type": "cpp", "path": "c\\thread\\thrd_errors.html", "desc": "thrd_success, thrd_timedout, thrd_busy, thrd_nomem, thrd_error"}, {"name": "thrd_exit", "type": "cpp", "path": "c\\thread\\thrd_exit.html", "desc": "thrd_exit"}, {"name": "thrd_join", "type": "cpp", "path": "c\\thread\\thrd_join.html", "desc": "thrd_join"}, {"name": "thrd_sleep", "type": "cpp", "path": "c\\thread\\thrd_sleep.html", "desc": "thrd_sleep"}, {"name": "thrd_yield", "type": "cpp", "path": "c\\thread\\thrd_yield.html", "desc": "thrd_yield"}, {"name": "thread_local", "type": "cpp", "path": "c\\thread\\thread_local.html", "desc": "thread_local"}, {"name": "tss_create", "type": "cpp", "path": "c\\thread\\tss_create.html", "desc": "tss_create"}, {"name": "tss_delete", "type": "cpp", "path": "c\\thread\\tss_delete.html", "desc": "tss_delete"}, {"name": "TSS_DTOR_ITERATIONS", "type": "cpp", "path": "c\\thread\\TSS_DTOR_ITERATIONS.html", "desc": "TSS_DTOR_ITERATIONS"}, {"name": "tss_get", "type": "cpp", "path": "c\\thread\\tss_get.html", "desc": "tss_get"}, {"name": "tss_set", "type": "cpp", "path": "c\\thread\\tss_set.html", "desc": "tss_set"}, {"name": "(C99 \u8d77)\u5b9a\u5bbd\u6574\u6570\u7c7b\u578b (C99 \u8d77)", "type": "cpp", "path": "c\\types\\integer.html", "desc": "(C99 \u8d77)\u5b9a\u5bbd\u6574\u6570\u7c7b\u578b (C99 \u8d77)"}, {"name": "\u6570\u503c\u6781\u9650", "type": "cpp", "path": "c\\types\\limits.html", "desc": "\u6570\u503c\u6781\u9650"}, {"name": "max_align_t", "type": "cpp", "path": "c\\types\\max_align_t.html", "desc": "max_align_t"}, {"name": "NULL", "type": "cpp", "path": "c\\types\\NULL.html", "desc": "NULL"}, {"name": "nullptr_t", "type": "cpp", "path": "c\\types\\nullptr_t.html", "desc": "nullptr_t"}, {"name": "offsetof", "type": "cpp", "path": "c\\types\\offsetof.html", "desc": "offsetof"}, {"name": "ptrdiff_t", "type": "cpp", "path": "c\\types\\ptrdiff_t.html", "desc": "ptrdiff_t"}, {"name": "size_t", "type": "cpp", "path": "c\\types\\size_t.html", "desc": "size_t"}, {"name": "FLT_EVAL_METHOD", "type": "cpp", "path": "c\\types\\limits\\FLT_EVAL_METHOD.html", "desc": "FLT_EVAL_METHOD"}, {"name": "FLT_ROUNDS", "type": "cpp", "path": "c\\types\\limits\\FLT_ROUNDS.html", "desc": "FLT_ROUNDS"}, {"name": "va_arg", "type": "cpp", "path": "c\\variadic\\va_arg.html", "desc": "va_arg"}, {"name": "va_copy", "type": "cpp", "path": "c\\variadic\\va_copy.html", "desc": "va_copy"}, {"name": "va_end", "type": "cpp", "path": "c\\variadic\\va_end.html", "desc": "va_end"}, {"name": "va_list", "type": "cpp", "path": "c\\variadic\\va_list.html", "desc": "va_list"}, {"name": "va_start", "type": "cpp", "path": "c\\variadic\\va_start.html", "desc": "va_start"}, {"name": "C++11", "type": "cpp", "path": "cpp\\11.html", "desc": "C++11"}, {"name": "C++14", "type": "cpp", "path": "cpp\\14.html", "desc": "C++14"}, {"name": "C++17", "type": "cpp", "path": "cpp\\17.html", "desc": "C++17"}, {"name": "C++20", "type": "cpp", "path": "cpp\\20.html", "desc": "C++20"}, {"name": "C++23", "type": "cpp", "path": "cpp\\23.html", "desc": "C++23"}, {"name": "cpp/26", "type": "cpp", "path": "cpp\\26.html", "desc": "cpp/26"}, {"name": "\u7b97\u6cd5\u5e93", "type": "cpp", "path": "cpp\\algorithm.html", "desc": "\u7b97\u6cd5\u5e93"}, {"name": "\u539f\u5b50\u64cd\u4f5c\u5e93", "type": "cpp", "path": "cpp\\atomic.html", "desc": "\u539f\u5b50\u64cd\u4f5c\u5e93"}, {"name": "\u53cc\u8bed\u672f\u8bed\u8868", "type": "cpp", "path": "cpp\\bilingual_glossary.html", "desc": "\u53cc\u8bed\u672f\u8bed\u8868"}, {"name": "C \u53c2\u8003\u624b\u518c", "type": "cpp", "path": "cpp\\c.html", "desc": "C \u53c2\u8003\u624b\u518c"}, {"name": "\u65e5\u671f\u548c\u65f6\u95f4\u5de5\u5177", "type": "cpp", "path": "cpp\\chrono.html", "desc": "\u65e5\u671f\u548c\u65f6\u95f4\u5de5\u5177"}, {"name": "\u6ce8\u91ca", "type": "cpp", "path": "cpp\\comment.html", "desc": "\u6ce8\u91ca"}, {"name": "\u6ce8\u91ca", "type": "cpp", "path": "cpp\\comments.html", "desc": "\u6ce8\u91ca"}, {"name": "C++ \u7f16\u8bd1\u5668\u652f\u6301\u60c5\u51b5\u8868", "type": "cpp", "path": "cpp\\compiler_support.html", "desc": "C++ \u7f16\u8bd1\u5668\u652f\u6301\u60c5\u51b5\u8868"}, {"name": "(C++20)\u6982\u5ff5\u5e93 (C++20)", "type": "cpp", "path": "cpp\\concepts.html", "desc": "(C++20)\u6982\u5ff5\u5e93 (C++20)"}, {"name": "\u5bb9\u5668\u5e93", "type": "cpp", "path": "cpp\\container.html", "desc": "\u5bb9\u5668\u5e93"}, {"name": "(C++20)\u534f\u7a0b\u652f\u6301 (C++20)", "type": "cpp", "path": "cpp\\coroutine.html", "desc": "(C++20)\u534f\u7a0b\u652f\u6301 (C++20)"}, {"name": "C++ \u53c2\u8003\u624b\u518c", "type": "cpp", "path": "cpp\\cpp.html", "desc": "C++ \u53c2\u8003\u624b\u518c"}, {"name": "\u5f53\u524d\u72b6\u51b5", "type": "cpp", "path": "cpp\\current_status.html", "desc": "\u5f53\u524d\u72b6\u51b5"}, {"name": "\u9519\u8bef\u5904\u7406", "type": "cpp", "path": "cpp\\error.html", "desc": "\u9519\u8bef\u5904\u7406"}, {"name": "\u5b9e\u9a8c\u6027 C++ \u7279\u6027", "type": "cpp", "path": "cpp\\experimental.html", "desc": "\u5b9e\u9a8c\u6027 C++ \u7279\u6027"}, {"name": "(C++20)\u529f\u80fd\u7279\u6027\u6d4b\u8bd5 (C++20)", "type": "cpp", "path": "cpp\\feature_test.html", "desc": "(C++20)\u529f\u80fd\u7279\u6027\u6d4b\u8bd5 (C++20)"}, {"name": "\u6587\u4ef6\u7cfb\u7edf\u5e93", "type": "cpp", "path": "cpp\\filesystem.html", "desc": "\u6587\u4ef6\u7cfb\u7edf\u5e93"}, {"name": "\u72ec\u7acb\u4e0e\u5bbf\u4e3b\u5b9e\u73b0", "type": "cpp", "path": "cpp\\freestanding.html", "desc": "\u72ec\u7acb\u4e0e\u5bbf\u4e3b\u5b9e\u73b0"}, {"name": "C++ \u6807\u51c6\u5e93\u6807\u5934", "type": "cpp", "path": "cpp\\header.html", "desc": "C++ \u6807\u51c6\u5e93\u6807\u5934"}, {"name": "C++ \u6807\u51c6\u5e93\u6807\u5934", "type": "cpp", "path": "cpp\\headers.html", "desc": "C++ \u6807\u51c6\u5e93\u6807\u5934"}, {"name": "C \u548c C++ \u53c2\u8003\u624b\u518c", "type": "cpp", "path": "cpp\\index.html", "desc": "C \u548c C++ \u53c2\u8003\u624b\u518c"}, {"name": "\u8f93\u5165/\u8f93\u51fa\u5e93", "type": "cpp", "path": "cpp\\io.html", "desc": "\u8f93\u5165/\u8f93\u51fa\u5e93"}, {"name": "\u8fed\u4ee3\u5668\u5e93", "type": "cpp", "path": "cpp\\iterator.html", "desc": "\u8fed\u4ee3\u5668\u5e93"}, {"name": "C++ \u5173\u952e\u8bcd", "type": "cpp", "path": "cpp\\keyword.html", "desc": "C++ \u5173\u952e\u8bcd"}, {"name": "C++ \u5173\u952e\u8bcd", "type": "cpp", "path": "cpp\\keywords.html", "desc": "C++ \u5173\u952e\u8bcd"}, {"name": "C++ \u8bed\u8a00", "type": "cpp", "path": "cpp\\language.html", "desc": "C++ \u8bed\u8a00"}, {"name": "\u6709\u7528\u7684\u8d44\u6e90", "type": "cpp", "path": "cpp\\links.html", "desc": "\u6709\u7528\u7684\u8d44\u6e90"}, {"name": "\u672c\u5730\u5316\u5e93", "type": "cpp", "path": "cpp\\locale.html", "desc": "\u672c\u5730\u5316\u5e93"}, {"name": "\u52a8\u6001\u5185\u5b58\u7ba1\u7406", "type": "cpp", "path": "cpp\\memory.html", "desc": "\u52a8\u6001\u5185\u5b58\u7ba1\u7406"}, {"name": "\u5143\u7f16\u7a0b\u5e93", "type": "cpp", "path": "cpp\\meta.html", "desc": "\u5143\u7f16\u7a0b\u5e93"}, {"name": "\u5177\u540d\u8981\u6c42", "type": "cpp", "path": "cpp\\named_req.html", "desc": "\u5177\u540d\u8981\u6c42"}, {"name": "\u6570\u503c\u5e93", "type": "cpp", "path": "cpp\\numeric.html", "desc": "\u6570\u503c\u5e93"}, {"name": "\u9884\u5904\u7406\u5668", "type": "cpp", "path": "cpp\\preprocessor.html", "desc": "\u9884\u5904\u7406\u5668"}, {"name": "(C++20)\u8303\u56f4\u5e93 (C++20)", "type": "cpp", "path": "cpp\\ranges.html", "desc": "(C++20)\u8303\u56f4\u5e93 (C++20)"}, {"name": "\u6b63\u5219\u8868\u8fbe\u5f0f\u5e93", "type": "cpp", "path": "cpp\\regex.html", "desc": "\u6b63\u5219\u8868\u8fbe\u5f0f\u5e93"}, {"name": "C++ \u6807\u51c6\u5e93", "type": "cpp", "path": "cpp\\standard_library.html", "desc": "C++ \u6807\u51c6\u5e93"}, {"name": "\u5b57\u7b26\u4e32\u5e93", "type": "cpp", "path": "cpp\\string.html", "desc": "\u5b57\u7b26\u4e32\u5e93"}, {"name": "std \u7b26\u53f7\u7d22\u5f15", "type": "cpp", "path": "cpp\\symbol_index.html", "desc": "std \u7b26\u53f7\u7d22\u5f15"}, {"name": "\u5e76\u53d1\u652f\u6301\u5e93", "type": "cpp", "path": "cpp\\thread.html", "desc": "\u5e76\u53d1\u652f\u6301\u5e93"}, {"name": "\u7c7b\u578b\u652f\u6301\uff08\u57fa\u672c\u7c7b\u578b\u3001RTTI\uff09", "type": "cpp", "path": "cpp\\types.html", "desc": "\u7c7b\u578b\u652f\u6301\uff08\u57fa\u672c\u7c7b\u578b\u3001RTTI\uff09"}, {"name": "\u5de5\u5177\u5e93", "type": "cpp", "path": "cpp\\utility.html", "desc": "\u5de5\u5177\u5e93"}, {"name": "C \u548c C++ \u53c2\u8003\u624b\u518c", "type": "cpp", "path": "cpp\\\u9996\u9875.html", "desc": "C \u548c C++ \u53c2\u8003\u624b\u518c"}, {"name": "std::std::accumulate", "type": "cpp", "path": "cpp\\algorithm\\accumulate.html", "desc": "std::std::accumulate"}, {"name": "std::std::adjacent_difference", "type": "cpp", "path": "cpp\\algorithm\\adjacent_difference.html", "desc": "std::std::adjacent_difference"}, {"name": "std::std::adjacent_find", "type": "cpp", "path": "cpp\\algorithm\\adjacent_find.html", "desc": "std::std::adjacent_find"}, {"name": "std:: std:: std::std::all_of, std::any_of, std::none_of", "type": "cpp", "path": "cpp\\algorithm\\all_any_none_of.html", "desc": "std:: std:: std::std::all_of, std::any_of, std::none_of"}, {"name": "std::std::binary_search", "type": "cpp", "path": "cpp\\algorithm\\binary_search.html", "desc": "std::std::binary_search"}, {"name": "std::std::bsearch", "type": "cpp", "path": "cpp\\algorithm\\bsearch.html", "desc": "std::std::bsearch"}, {"name": "std::std::clamp", "type": "cpp", "path": "cpp\\algorithm\\clamp.html", "desc": "std::std::clamp"}, {"name": "std:: std::std::copy, std::copy_if", "type": "cpp", "path": "cpp\\algorithm\\copy.html", "desc": "std:: std::std::copy, std::copy_if"}, {"name": "std::std::copy_backward", "type": "cpp", "path": "cpp\\algorithm\\copy_backward.html", "desc": "std::std::copy_backward"}, {"name": "std::std::copy_n", "type": "cpp", "path": "cpp\\algorithm\\copy_n.html", "desc": "std::std::copy_n"}, {"name": "std:: std::std::count, std::count_if", "type": "cpp", "path": "cpp\\algorithm\\count.html", "desc": "std:: std::std::count, std::count_if"}, {"name": "std:: std::std::count, std::count_if", "type": "cpp", "path": "cpp\\algorithm\\count_if.html", "desc": "std:: std::std::count, std::count_if"}, {"name": "std::std::equal", "type": "cpp", "path": "cpp\\algorithm\\equal.html", "desc": "std::std::equal"}, {"name": "std::std::equal_range", "type": "cpp", "path": "cpp\\algorithm\\equal_range.html", "desc": "std::std::equal_range"}, {"name": "std::std::exclusive_scan", "type": "cpp", "path": "cpp\\algorithm\\exclusive_scan.html", "desc": "std::std::exclusive_scan"}, {"name": "std::execution:: std::execution:: std::execution:: std::execution::std::execution::seq, std::execution::par, std::execution::par_unseq, std::execution::unseq", "type": "cpp", "path": "cpp\\algorithm\\execution_policy_tag.html", "desc": "std::execution:: std::execution:: std::execution:: std::execution::std::execution::seq, std::execution::par, std::execution::par_unseq, std::execution::unseq"}, {"name": "std::execution:: std::execution:: std::execution:: std::execution::std::execution::sequenced_policy, std::execution::parallel_policy, std::execution::parallel_unsequenced_policy, std::execution::unsequenced_policy", "type": "cpp", "path": "cpp\\algorithm\\execution_policy_tag_t.html", "desc": "std::execution:: std::execution:: std::execution:: std::execution::std::execution::sequenced_policy, std::execution::parallel_policy, std::execution::parallel_unsequenced_policy, std::execution::unsequenced_policy"}, {"name": "std::std::fill", "type": "cpp", "path": "cpp\\algorithm\\fill.html", "desc": "std::std::fill"}, {"name": "std::std::fill_n", "type": "cpp", "path": "cpp\\algorithm\\fill_n.html", "desc": "std::std::fill_n"}, {"name": "std:: std:: std::std::find, std::find_if, std::find_if_not", "type": "cpp", "path": "cpp\\algorithm\\find.html", "desc": "std:: std:: std::std::find, std::find_if, std::find_if_not"}, {"name": "std::std::find_end", "type": "cpp", "path": "cpp\\algorithm\\find_end.html", "desc": "std::std::find_end"}, {"name": "std::std::find_first_of", "type": "cpp", "path": "cpp\\algorithm\\find_first_of.html", "desc": "std::std::find_first_of"}, {"name": "std:: std:: std::std::find, std::find_if, std::find_if_not", "type": "cpp", "path": "cpp\\algorithm\\find_if.html", "desc": "std:: std:: std::std::find, std::find_if, std::find_if_not"}, {"name": "std:: std:: std::std::find, std::find_if, std::find_if_not", "type": "cpp", "path": "cpp\\algorithm\\find_if_not.html", "desc": "std:: std:: std::std::find, std::find_if, std::find_if_not"}, {"name": "std::std::for_each", "type": "cpp", "path": "cpp\\algorithm\\for_each.html", "desc": "std::std::for_each"}, {"name": "std::std::for_each_n", "type": "cpp", "path": "cpp\\algorithm\\for_each_n.html", "desc": "std::std::for_each_n"}, {"name": "std::std::generate", "type": "cpp", "path": "cpp\\algorithm\\generate.html", "desc": "std::std::generate"}, {"name": "std::std::generate_n", "type": "cpp", "path": "cpp\\algorithm\\generate_n.html", "desc": "std::std::generate_n"}, {"name": "std::std::includes", "type": "cpp", "path": "cpp\\algorithm\\includes.html", "desc": "std::std::includes"}, {"name": "std::std::inclusive_scan", "type": "cpp", "path": "cpp\\algorithm\\inclusive_scan.html", "desc": "std::std::inclusive_scan"}, {"name": "std::std::inner_product", "type": "cpp", "path": "cpp\\algorithm\\inner_product.html", "desc": "std::std::inner_product"}, {"name": "std::std::inplace_merge", "type": "cpp", "path": "cpp\\algorithm\\inplace_merge.html", "desc": "std::std::inplace_merge"}, {"name": "std::std::iota", "type": "cpp", "path": "cpp\\algorithm\\iota.html", "desc": "std::std::iota"}, {"name": "std::std::is_execution_policy", "type": "cpp", "path": "cpp\\algorithm\\is_execution_policy.html", "desc": "std::std::is_execution_policy"}, {"name": "std::std::is_heap", "type": "cpp", "path": "cpp\\algorithm\\is_heap.html", "desc": "std::std::is_heap"}, {"name": "std::std::is_heap_until", "type": "cpp", "path": "cpp\\algorithm\\is_heap_until.html", "desc": "std::std::is_heap_until"}, {"name": "std::std::is_partitioned", "type": "cpp", "path": "cpp\\algorithm\\is_partitioned.html", "desc": "std::std::is_partitioned"}, {"name": "std::std::is_permutation", "type": "cpp", "path": "cpp\\algorithm\\is_permutation.html", "desc": "std::std::is_permutation"}, {"name": "std::std::is_sorted", "type": "cpp", "path": "cpp\\algorithm\\is_sorted.html", "desc": "std::std::is_sorted"}, {"name": "std::std::is_sorted_until", "type": "cpp", "path": "cpp\\algorithm\\is_sorted_until.html", "desc": "std::std::is_sorted_until"}, {"name": "std::std::iter_swap", "type": "cpp", "path": "cpp\\algorithm\\iter_swap.html", "desc": "std::std::iter_swap"}, {"name": "std::std::lexicographical_compare", "type": "cpp", "path": "cpp\\algorithm\\lexicographical_compare.html", "desc": "std::std::lexicographical_compare"}, {"name": "std::std::lexicographical_compare_three_way", "type": "cpp", "path": "cpp\\algorithm\\lexicographical_compare_three_way.html", "desc": "std::std::lexicographical_compare_three_way"}, {"name": "std::std::lower_bound", "type": "cpp", "path": "cpp\\algorithm\\lower_bound.html", "desc": "std::std::lower_bound"}, {"name": "std::std::make_heap", "type": "cpp", "path": "cpp\\algorithm\\make_heap.html", "desc": "std::std::make_heap"}, {"name": "std::std::max", "type": "cpp", "path": "cpp\\algorithm\\max.html", "desc": "std::std::max"}, {"name": "std::std::max_element", "type": "cpp", "path": "cpp\\algorithm\\max_element.html", "desc": "std::std::max_element"}, {"name": "std::std::merge", "type": "cpp", "path": "cpp\\algorithm\\merge.html", "desc": "std::std::merge"}, {"name": "std::std::min", "type": "cpp", "path": "cpp\\algorithm\\min.html", "desc": "std::std::min"}, {"name": "std::std::minmax", "type": "cpp", "path": "cpp\\algorithm\\minmax.html", "desc": "std::std::minmax"}, {"name": "std::std::minmax_element", "type": "cpp", "path": "cpp\\algorithm\\minmax_element.html", "desc": "std::std::minmax_element"}, {"name": "std::std::min_element", "type": "cpp", "path": "cpp\\algorithm\\min_element.html", "desc": "std::std::min_element"}, {"name": "std::std::mismatch", "type": "cpp", "path": "cpp\\algorithm\\mismatch.html", "desc": "std::std::mismatch"}, {"name": "std::std::move", "type": "cpp", "path": "cpp\\algorithm\\move.html", "desc": "std::std::move"}, {"name": "std::std::move_backward", "type": "cpp", "path": "cpp\\algorithm\\move_backward.html", "desc": "std::std::move_backward"}, {"name": "std::std::next_permutation", "type": "cpp", "path": "cpp\\algorithm\\next_permutation.html", "desc": "std::std::next_permutation"}, {"name": "std::std::nth_element", "type": "cpp", "path": "cpp\\algorithm\\nth_element.html", "desc": "std::std::nth_element"}, {"name": "std::std::partial_sort", "type": "cpp", "path": "cpp\\algorithm\\partial_sort.html", "desc": "std::std::partial_sort"}, {"name": "std::std::partial_sort_copy", "type": "cpp", "path": "cpp\\algorithm\\partial_sort_copy.html", "desc": "std::std::partial_sort_copy"}, {"name": "std::std::partial_sum", "type": "cpp", "path": "cpp\\algorithm\\partial_sum.html", "desc": "std::std::partial_sum"}, {"name": "std::std::partition", "type": "cpp", "path": "cpp\\algorithm\\partition.html", "desc": "std::std::partition"}, {"name": "std::std::partition_copy", "type": "cpp", "path": "cpp\\algorithm\\partition_copy.html", "desc": "std::std::partition_copy"}, {"name": "std::std::partition_point", "type": "cpp", "path": "cpp\\algorithm\\partition_point.html", "desc": "std::std::partition_point"}, {"name": "std::std::pop_heap", "type": "cpp", "path": "cpp\\algorithm\\pop_heap.html", "desc": "std::std::pop_heap"}, {"name": "std::std::prev_permutation", "type": "cpp", "path": "cpp\\algorithm\\prev_permutation.html", "desc": "std::std::prev_permutation"}, {"name": "std::std::push_heap", "type": "cpp", "path": "cpp\\algorithm\\push_heap.html", "desc": "std::std::push_heap"}, {"name": "std::std::qsort", "type": "cpp", "path": "cpp\\algorithm\\qsort.html", "desc": "std::std::qsort"}, {"name": "std:: std::std::random_shuffle, std::shuffle", "type": "cpp", "path": "cpp\\algorithm\\random_shuffle.html", "desc": "std:: std::std::random_shuffle, std::shuffle"}, {"name": "(C++20 \u8d77)\u53d7\u7ea6\u675f\u7b97\u6cd5 (C++20 \u8d77)", "type": "cpp", "path": "cpp\\algorithm\\ranges.html", "desc": "(C++20 \u8d77)\u53d7\u7ea6\u675f\u7b97\u6cd5 (C++20 \u8d77)"}, {"name": "std::std::reduce", "type": "cpp", "path": "cpp\\algorithm\\reduce.html", "desc": "std::std::reduce"}, {"name": "std:: std::std::remove, std::remove_if", "type": "cpp", "path": "cpp\\algorithm\\remove.html", "desc": "std:: std::std::remove, std::remove_if"}, {"name": "std:: std::std::remove_copy, std::remove_copy_if", "type": "cpp", "path": "cpp\\algorithm\\remove_copy.html", "desc": "std:: std::std::remove_copy, std::remove_copy_if"}, {"name": "std:: std::std::replace, std::replace_if", "type": "cpp", "path": "cpp\\algorithm\\replace.html", "desc": "std:: std::std::replace, std::replace_if"}, {"name": "std:: std::std::replace_copy, std::replace_copy_if", "type": "cpp", "path": "cpp\\algorithm\\replace_copy.html", "desc": "std:: std::std::replace_copy, std::replace_copy_if"}, {"name": "std:: std::std::replace_copy, std::replace_copy_if", "type": "cpp", "path": "cpp\\algorithm\\replace_copy_if.html", "desc": "std:: std::std::replace_copy, std::replace_copy_if"}, {"name": "std::std::reverse", "type": "cpp", "path": "cpp\\algorithm\\reverse.html", "desc": "std::std::reverse"}, {"name": "std::std::reverse_copy", "type": "cpp", "path": "cpp\\algorithm\\reverse_copy.html", "desc": "std::std::reverse_copy"}, {"name": "std::std::rotate", "type": "cpp", "path": "cpp\\algorithm\\rotate.html", "desc": "std::std::rotate"}, {"name": "std::std::rotate_copy", "type": "cpp", "path": "cpp\\algorithm\\rotate_copy.html", "desc": "std::std::rotate_copy"}, {"name": "std::std::sample", "type": "cpp", "path": "cpp\\algorithm\\sample.html", "desc": "std::std::sample"}, {"name": "std::std::search", "type": "cpp", "path": "cpp\\algorithm\\search.html", "desc": "std::std::search"}, {"name": "std::std::search_n", "type": "cpp", "path": "cpp\\algorithm\\search_n.html", "desc": "std::std::search_n"}, {"name": "std::std::set_difference", "type": "cpp", "path": "cpp\\algorithm\\set_difference.html", "desc": "std::std::set_difference"}, {"name": "std::std::set_intersection", "type": "cpp", "path": "cpp\\algorithm\\set_intersection.html", "desc": "std::std::set_intersection"}, {"name": "std::std::set_symmetric_difference", "type": "cpp", "path": "cpp\\algorithm\\set_symmetric_difference.html", "desc": "std::std::set_symmetric_difference"}, {"name": "std::std::set_union", "type": "cpp", "path": "cpp\\algorithm\\set_union.html", "desc": "std::std::set_union"}, {"name": "std:: std::std::shift_left, std::shift_right", "type": "cpp", "path": "cpp\\algorithm\\shift.html", "desc": "std:: std::std::shift_left, std::shift_right"}, {"name": "std::std::sort", "type": "cpp", "path": "cpp\\algorithm\\sort.html", "desc": "std::std::sort"}, {"name": "std::std::sort_heap", "type": "cpp", "path": "cpp\\algorithm\\sort_heap.html", "desc": "std::std::sort_heap"}, {"name": "std::std::stable_partition", "type": "cpp", "path": "cpp\\algorithm\\stable_partition.html", "desc": "std::std::stable_partition"}, {"name": "std::std::stable_sort", "type": "cpp", "path": "cpp\\algorithm\\stable_sort.html", "desc": "std::std::stable_sort"}, {"name": "std::std::swap", "type": "cpp", "path": "cpp\\algorithm\\swap.html", "desc": "std::std::swap"}, {"name": "std::std::swap_ranges", "type": "cpp", "path": "cpp\\algorithm\\swap_ranges.html", "desc": "std::std::swap_ranges"}, {"name": "std::std::transform", "type": "cpp", "path": "cpp\\algorithm\\transform.html", "desc": "std::std::transform"}, {"name": "std::std::transform_exclusive_scan", "type": "cpp", "path": "cpp\\algorithm\\transform_exclusive_scan.html", "desc": "std::std::transform_exclusive_scan"}, {"name": "std::std::transform_inclusive_scan", "type": "cpp", "path": "cpp\\algorithm\\transform_inclusive_scan.html", "desc": "std::std::transform_inclusive_scan"}, {"name": "std::std::transform_reduce", "type": "cpp", "path": "cpp\\algorithm\\transform_reduce.html", "desc": "std::std::transform_reduce"}, {"name": "std::std::unique", "type": "cpp", "path": "cpp\\algorithm\\unique.html", "desc": "std::std::unique"}, {"name": "std::std::unique_copy", "type": "cpp", "path": "cpp\\algorithm\\unique_copy.html", "desc": "std::std::unique_copy"}, {"name": "std::std::upper_bound", "type": "cpp", "path": "cpp\\algorithm\\upper_bound.html", "desc": "std::std::upper_bound"}, {"name": "std::ranges::std::ranges::adjacent_find", "type": "cpp", "path": "cpp\\algorithm\\ranges\\adjacent_find.html", "desc": "std::ranges::std::ranges::adjacent_find"}, {"name": "std::ranges:: std::ranges:: std::ranges::std::ranges::all_of, std::ranges::any_of, std::ranges::none_of", "type": "cpp", "path": "cpp\\algorithm\\ranges\\all_any_none_of.html", "desc": "std::ranges:: std::ranges:: std::ranges::std::ranges::all_of, std::ranges::any_of, std::ranges::none_of"}, {"name": "std::ranges::std::ranges::binary_search", "type": "cpp", "path": "cpp\\algorithm\\ranges\\binary_search.html", "desc": "std::ranges::std::ranges::binary_search"}, {"name": "std::ranges::std::ranges::clamp", "type": "cpp", "path": "cpp\\algorithm\\ranges\\clamp.html", "desc": "std::ranges::std::ranges::clamp"}, {"name": "std::ranges:: std::ranges::std::ranges::contains, std::ranges::contains_subrange", "type": "cpp", "path": "cpp\\algorithm\\ranges\\contains.html", "desc": "std::ranges:: std::ranges::std::ranges::contains, std::ranges::contains_subrange"}, {"name": "std::ranges:: std::ranges:: std::ranges:: std::ranges::std::ranges::copy, std::ranges::copy_if, std::ranges::copy_result, std::ranges::copy_if_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\copy.html", "desc": "std::ranges:: std::ranges:: std::ranges:: std::ranges::std::ranges::copy, std::ranges::copy_if, std::ranges::copy_result, std::ranges::copy_if_result"}, {"name": "std::ranges:: std::ranges::std::ranges::copy_backward, std::ranges::copy_backward_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\copy_backward.html", "desc": "std::ranges:: std::ranges::std::ranges::copy_backward, std::ranges::copy_backward_result"}, {"name": "std::ranges:: std::ranges::std::ranges::copy_n, std::ranges::copy_n_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\copy_n.html", "desc": "std::ranges:: std::ranges::std::ranges::copy_n, std::ranges::copy_n_result"}, {"name": "std::ranges:: std::ranges::std::ranges::count, std::ranges::count_if", "type": "cpp", "path": "cpp\\algorithm\\ranges\\count.html", "desc": "std::ranges:: std::ranges::std::ranges::count, std::ranges::count_if"}, {"name": "std::ranges::std::ranges::ends_with", "type": "cpp", "path": "cpp\\algorithm\\ranges\\ends_with.html", "desc": "std::ranges::std::ranges::ends_with"}, {"name": "std::ranges::std::ranges::equal", "type": "cpp", "path": "cpp\\algorithm\\ranges\\equal.html", "desc": "std::ranges::std::ranges::equal"}, {"name": "std::ranges::std::ranges::equal_range", "type": "cpp", "path": "cpp\\algorithm\\ranges\\equal_range.html", "desc": "std::ranges::std::ranges::equal_range"}, {"name": "std::ranges::std::ranges::fill", "type": "cpp", "path": "cpp\\algorithm\\ranges\\fill.html", "desc": "std::ranges::std::ranges::fill"}, {"name": "std::ranges::std::ranges::fill_n", "type": "cpp", "path": "cpp\\algorithm\\ranges\\fill_n.html", "desc": "std::ranges::std::ranges::fill_n"}, {"name": "std::ranges:: std::ranges:: std::ranges::std::ranges::find, std::ranges::find_if, std::ranges::find_if_not", "type": "cpp", "path": "cpp\\algorithm\\ranges\\find.html", "desc": "std::ranges:: std::ranges:: std::ranges::std::ranges::find, std::ranges::find_if, std::ranges::find_if_not"}, {"name": "std::ranges::std::ranges::find_end", "type": "cpp", "path": "cpp\\algorithm\\ranges\\find_end.html", "desc": "std::ranges::std::ranges::find_end"}, {"name": "std::ranges::std::ranges::find_first_of", "type": "cpp", "path": "cpp\\algorithm\\ranges\\find_first_of.html", "desc": "std::ranges::std::ranges::find_first_of"}, {"name": "std::ranges:: std::ranges:: std::ranges::std::ranges::find_last, std::ranges::find_last_if, std::ranges::find_last_if_not", "type": "cpp", "path": "cpp\\algorithm\\ranges\\find_last.html", "desc": "std::ranges:: std::ranges:: std::ranges::std::ranges::find_last, std::ranges::find_last_if, std::ranges::find_last_if_not"}, {"name": "std::ranges::std::ranges::fold_left", "type": "cpp", "path": "cpp\\algorithm\\ranges\\fold_left.html", "desc": "std::ranges::std::ranges::fold_left"}, {"name": "std::ranges::std::ranges::fold_left_first", "type": "cpp", "path": "cpp\\algorithm\\ranges\\fold_left_first.html", "desc": "std::ranges::std::ranges::fold_left_first"}, {"name": "std::ranges:: std::ranges::std::ranges::fold_left_first_with_iter, std::ranges::fold_left_first_with_iter_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\fold_left_first_with_iter.html", "desc": "std::ranges:: std::ranges::std::ranges::fold_left_first_with_iter, std::ranges::fold_left_first_with_iter_result"}, {"name": "std::ranges:: std::ranges::std::ranges::fold_left_with_iter, std::ranges::fold_left_with_iter_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\fold_left_with_iter.html", "desc": "std::ranges:: std::ranges::std::ranges::fold_left_with_iter, std::ranges::fold_left_with_iter_result"}, {"name": "std::ranges::std::ranges::fold_right", "type": "cpp", "path": "cpp\\algorithm\\ranges\\fold_right.html", "desc": "std::ranges::std::ranges::fold_right"}, {"name": "std::ranges::std::ranges::fold_right_last", "type": "cpp", "path": "cpp\\algorithm\\ranges\\fold_right_last.html", "desc": "std::ranges::std::ranges::fold_right_last"}, {"name": "std::ranges::std::ranges::for_each", "type": "cpp", "path": "cpp\\algorithm\\ranges\\for_each.html", "desc": "std::ranges::std::ranges::for_each"}, {"name": "std::ranges:: std::ranges::std::ranges::for_each_n, std::ranges::for_each_n_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\for_each_n.html", "desc": "std::ranges:: std::ranges::std::ranges::for_each_n, std::ranges::for_each_n_result"}, {"name": "std::ranges::std::ranges::generate", "type": "cpp", "path": "cpp\\algorithm\\ranges\\generate.html", "desc": "std::ranges::std::ranges::generate"}, {"name": "std::ranges::std::ranges::generate_n", "type": "cpp", "path": "cpp\\algorithm\\ranges\\generate_n.html", "desc": "std::ranges::std::ranges::generate_n"}, {"name": "std::ranges::std::ranges::includes", "type": "cpp", "path": "cpp\\algorithm\\ranges\\includes.html", "desc": "std::ranges::std::ranges::includes"}, {"name": "std::ranges::std::ranges::inplace_merge", "type": "cpp", "path": "cpp\\algorithm\\ranges\\inplace_merge.html", "desc": "std::ranges::std::ranges::inplace_merge"}, {"name": "std::ranges:: std::ranges::std::ranges::iota, std::ranges::iota_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\iota.html", "desc": "std::ranges:: std::ranges::std::ranges::iota, std::ranges::iota_result"}, {"name": "std::ranges::std::ranges::is_heap", "type": "cpp", "path": "cpp\\algorithm\\ranges\\is_heap.html", "desc": "std::ranges::std::ranges::is_heap"}, {"name": "std::ranges::std::ranges::is_heap_until", "type": "cpp", "path": "cpp\\algorithm\\ranges\\is_heap_until.html", "desc": "std::ranges::std::ranges::is_heap_until"}, {"name": "std::ranges::std::ranges::is_partitioned", "type": "cpp", "path": "cpp\\algorithm\\ranges\\is_partitioned.html", "desc": "std::ranges::std::ranges::is_partitioned"}, {"name": "std::ranges::std::ranges::is_permutation", "type": "cpp", "path": "cpp\\algorithm\\ranges\\is_permutation.html", "desc": "std::ranges::std::ranges::is_permutation"}, {"name": "std::ranges::std::ranges::is_sorted", "type": "cpp", "path": "cpp\\algorithm\\ranges\\is_sorted.html", "desc": "std::ranges::std::ranges::is_sorted"}, {"name": "std::ranges::std::ranges::is_sorted_until", "type": "cpp", "path": "cpp\\algorithm\\ranges\\is_sorted_until.html", "desc": "std::ranges::std::ranges::is_sorted_until"}, {"name": "std::ranges::std::ranges::lexicographical_compare", "type": "cpp", "path": "cpp\\algorithm\\ranges\\lexicographical_compare.html", "desc": "std::ranges::std::ranges::lexicographical_compare"}, {"name": "std::ranges::std::ranges::lower_bound", "type": "cpp", "path": "cpp\\algorithm\\ranges\\lower_bound.html", "desc": "std::ranges::std::ranges::lower_bound"}, {"name": "std::ranges::std::ranges::make_heap", "type": "cpp", "path": "cpp\\algorithm\\ranges\\make_heap.html", "desc": "std::ranges::std::ranges::make_heap"}, {"name": "std::ranges::std::ranges::max", "type": "cpp", "path": "cpp\\algorithm\\ranges\\max.html", "desc": "std::ranges::std::ranges::max"}, {"name": "std::ranges::std::ranges::max_element", "type": "cpp", "path": "cpp\\algorithm\\ranges\\max_element.html", "desc": "std::ranges::std::ranges::max_element"}, {"name": "std::ranges:: std::ranges::std::ranges::merge, std::ranges::merge_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\merge.html", "desc": "std::ranges:: std::ranges::std::ranges::merge, std::ranges::merge_result"}, {"name": "std::ranges::std::ranges::min", "type": "cpp", "path": "cpp\\algorithm\\ranges\\min.html", "desc": "std::ranges::std::ranges::min"}, {"name": "std::ranges:: std::ranges::std::ranges::minmax, std::ranges::minmax_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\minmax.html", "desc": "std::ranges:: std::ranges::std::ranges::minmax, std::ranges::minmax_result"}, {"name": "std::ranges::std::ranges::minmax_element", "type": "cpp", "path": "cpp\\algorithm\\ranges\\minmax_element.html", "desc": "std::ranges::std::ranges::minmax_element"}, {"name": "std::ranges::std::ranges::min_element", "type": "cpp", "path": "cpp\\algorithm\\ranges\\min_element.html", "desc": "std::ranges::std::ranges::min_element"}, {"name": "std::ranges:: std::ranges::std::ranges::mismatch, std::ranges::mismatch_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\mismatch.html", "desc": "std::ranges:: std::ranges::std::ranges::mismatch, std::ranges::mismatch_result"}, {"name": "std::ranges:: std::ranges::std::ranges::move, std::ranges::move_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\move.html", "desc": "std::ranges:: std::ranges::std::ranges::move, std::ranges::move_result"}, {"name": "std::ranges:: std::ranges::std::ranges::move_backward, std::ranges::move_backward_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\move_backward.html", "desc": "std::ranges:: std::ranges::std::ranges::move_backward, std::ranges::move_backward_result"}, {"name": "std::ranges:: std::ranges::std::ranges::next_permutation, std::ranges::next_permutation_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\next_permutation.html", "desc": "std::ranges:: std::ranges::std::ranges::next_permutation, std::ranges::next_permutation_result"}, {"name": "std::ranges::std::ranges::nth_element", "type": "cpp", "path": "cpp\\algorithm\\ranges\\nth_element.html", "desc": "std::ranges::std::ranges::nth_element"}, {"name": "std::ranges::std::ranges::partial_sort", "type": "cpp", "path": "cpp\\algorithm\\ranges\\partial_sort.html", "desc": "std::ranges::std::ranges::partial_sort"}, {"name": "std::ranges:: std::ranges::std::ranges::partial_sort_copy, std::ranges::partial_sort_copy_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\partial_sort_copy.html", "desc": "std::ranges:: std::ranges::std::ranges::partial_sort_copy, std::ranges::partial_sort_copy_result"}, {"name": "std::ranges::std::ranges::partition", "type": "cpp", "path": "cpp\\algorithm\\ranges\\partition.html", "desc": "std::ranges::std::ranges::partition"}, {"name": "std::ranges:: std::ranges::std::ranges::partition_copy, std::ranges::partition_copy_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\partition_copy.html", "desc": "std::ranges:: std::ranges::std::ranges::partition_copy, std::ranges::partition_copy_result"}, {"name": "std::ranges::std::ranges::partition_point", "type": "cpp", "path": "cpp\\algorithm\\ranges\\partition_point.html", "desc": "std::ranges::std::ranges::partition_point"}, {"name": "std::ranges::std::ranges::pop_heap", "type": "cpp", "path": "cpp\\algorithm\\ranges\\pop_heap.html", "desc": "std::ranges::std::ranges::pop_heap"}, {"name": "std::ranges:: std::ranges::std::ranges::prev_permutation, std::ranges::prev_permutation_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\prev_permutation.html", "desc": "std::ranges:: std::ranges::std::ranges::prev_permutation, std::ranges::prev_permutation_result"}, {"name": "std::ranges::std::ranges::push_heap", "type": "cpp", "path": "cpp\\algorithm\\ranges\\push_heap.html", "desc": "std::ranges::std::ranges::push_heap"}, {"name": "std::ranges:: std::ranges::std::ranges::remove, std::ranges::remove_if", "type": "cpp", "path": "cpp\\algorithm\\ranges\\remove.html", "desc": "std::ranges:: std::ranges::std::ranges::remove, std::ranges::remove_if"}, {"name": "std::ranges:: std::ranges:: std::ranges:: std::ranges::std::ranges::remove_copy, std::ranges::remove_copy_if, std::ranges::remove_copy_result, std::ranges::remove_copy_if_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\remove_copy.html", "desc": "std::ranges:: std::ranges:: std::ranges:: std::ranges::std::ranges::remove_copy, std::ranges::remove_copy_if, std::ranges::remove_copy_result, std::ranges::remove_copy_if_result"}, {"name": "std::ranges:: std::ranges::std::ranges::replace, std::ranges::replace_if", "type": "cpp", "path": "cpp\\algorithm\\ranges\\replace.html", "desc": "std::ranges:: std::ranges::std::ranges::replace, std::ranges::replace_if"}, {"name": "std::ranges:: std::ranges:: std::ranges:: std::ranges::std::ranges::replace_copy, std::ranges::replace_copy_if, std::ranges::replace_copy_result, std::ranges::replace_copy_if_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\replace_copy.html", "desc": "std::ranges:: std::ranges:: std::ranges:: std::ranges::std::ranges::replace_copy, std::ranges::replace_copy_if, std::ranges::replace_copy_result, std::ranges::replace_copy_if_result"}, {"name": "std::ranges::std::ranges::reverse", "type": "cpp", "path": "cpp\\algorithm\\ranges\\reverse.html", "desc": "std::ranges::std::ranges::reverse"}, {"name": "std::ranges:: std::ranges::std::ranges::reverse_copy, std::ranges::reverse_copy_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\reverse_copy.html", "desc": "std::ranges:: std::ranges::std::ranges::reverse_copy, std::ranges::reverse_copy_result"}, {"name": "std::ranges::std::ranges::rotate", "type": "cpp", "path": "cpp\\algorithm\\ranges\\rotate.html", "desc": "std::ranges::std::ranges::rotate"}, {"name": "std::ranges:: std::ranges::std::ranges::rotate_copy, std::ranges::rotate_copy_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\rotate_copy.html", "desc": "std::ranges:: std::ranges::std::ranges::rotate_copy, std::ranges::rotate_copy_result"}, {"name": "std::ranges::std::ranges::sample", "type": "cpp", "path": "cpp\\algorithm\\ranges\\sample.html", "desc": "std::ranges::std::ranges::sample"}, {"name": "std::ranges::std::ranges::search", "type": "cpp", "path": "cpp\\algorithm\\ranges\\search.html", "desc": "std::ranges::std::ranges::search"}, {"name": "std::ranges::std::ranges::search_n", "type": "cpp", "path": "cpp\\algorithm\\ranges\\search_n.html", "desc": "std::ranges::std::ranges::search_n"}, {"name": "std::ranges:: std::ranges::std::ranges::set_difference, std::ranges::set_difference_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\set_difference.html", "desc": "std::ranges:: std::ranges::std::ranges::set_difference, std::ranges::set_difference_result"}, {"name": "std::ranges:: std::ranges::std::ranges::set_intersection, std::ranges::set_intersection_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\set_intersection.html", "desc": "std::ranges:: std::ranges::std::ranges::set_intersection, std::ranges::set_intersection_result"}, {"name": "std::ranges:: std::ranges::std::ranges::set_symmetric_difference, std::ranges::set_symmetric_difference_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\set_symmetric_difference.html", "desc": "std::ranges:: std::ranges::std::ranges::set_symmetric_difference, std::ranges::set_symmetric_difference_result"}, {"name": "std::ranges:: std::ranges::std::ranges::set_union, std::ranges::set_union_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\set_union.html", "desc": "std::ranges:: std::ranges::std::ranges::set_union, std::ranges::set_union_result"}, {"name": "cpp/algorithm/ranges/shift", "type": "cpp", "path": "cpp\\algorithm\\ranges\\shift.html", "desc": "cpp/algorithm/ranges/shift"}, {"name": "std::ranges::std::ranges::shuffle", "type": "cpp", "path": "cpp\\algorithm\\ranges\\shuffle.html", "desc": "std::ranges::std::ranges::shuffle"}, {"name": "std::ranges::std::ranges::sort", "type": "cpp", "path": "cpp\\algorithm\\ranges\\sort.html", "desc": "std::ranges::std::ranges::sort"}, {"name": "std::ranges::std::ranges::sort_heap", "type": "cpp", "path": "cpp\\algorithm\\ranges\\sort_heap.html", "desc": "std::ranges::std::ranges::sort_heap"}, {"name": "std::ranges::std::ranges::stable_partition", "type": "cpp", "path": "cpp\\algorithm\\ranges\\stable_partition.html", "desc": "std::ranges::std::ranges::stable_partition"}, {"name": "std::ranges::std::ranges::stable_sort", "type": "cpp", "path": "cpp\\algorithm\\ranges\\stable_sort.html", "desc": "std::ranges::std::ranges::stable_sort"}, {"name": "std::ranges::std::ranges::starts_with", "type": "cpp", "path": "cpp\\algorithm\\ranges\\starts_with.html", "desc": "std::ranges::std::ranges::starts_with"}, {"name": "std::ranges:: std::ranges::std::ranges::swap_ranges, std::ranges::swap_ranges_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\swap_ranges.html", "desc": "std::ranges:: std::ranges::std::ranges::swap_ranges, std::ranges::swap_ranges_result"}, {"name": "std::ranges:: std::ranges:: std::ranges::std::ranges::transform, std::ranges::unary_transform_result, std::ranges::binary_transfor_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\transform.html", "desc": "std::ranges:: std::ranges:: std::ranges::std::ranges::transform, std::ranges::unary_transform_result, std::ranges::binary_transfor_result"}, {"name": "std::ranges::std::ranges::unique", "type": "cpp", "path": "cpp\\algorithm\\ranges\\unique.html", "desc": "std::ranges::std::ranges::unique"}, {"name": "std::ranges:: std::ranges::std::ranges::unique_copy, std::ranges::unique_copy_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\unique_copy.html", "desc": "std::ranges:: std::ranges::std::ranges::unique_copy, std::ranges::unique_copy_result"}, {"name": "std::ranges::std::ranges::upper_bound", "type": "cpp", "path": "cpp\\algorithm\\ranges\\upper_bound.html", "desc": "std::ranges::std::ranges::upper_bound"}, {"name": "std::ranges::std::ranges::in_found_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\return_types\\in_found_result.html", "desc": "std::ranges::std::ranges::in_found_result"}, {"name": "std::ranges::std::ranges::in_fun_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\return_types\\in_fun_result.html", "desc": "std::ranges::std::ranges::in_fun_result"}, {"name": "std::ranges::std::ranges::in_in_out_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\return_types\\in_in_out_result.html", "desc": "std::ranges::std::ranges::in_in_out_result"}, {"name": "std::ranges::std::ranges::in_in_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\return_types\\in_in_result.html", "desc": "std::ranges::std::ranges::in_in_result"}, {"name": "std::ranges::std::ranges::in_out_out_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\return_types\\in_out_out_result.html", "desc": "std::ranges::std::ranges::in_out_out_result"}, {"name": "std::ranges::std::ranges::in_out_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\return_types\\in_out_result.html", "desc": "std::ranges::std::ranges::in_out_result"}, {"name": "std::ranges::std::ranges::in_value_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\return_types\\in_value_result.html", "desc": "std::ranges::std::ranges::in_value_result"}, {"name": "std::ranges::std::ranges::min_max_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\return_types\\min_max_result.html", "desc": "std::ranges::std::ranges::min_max_result"}, {"name": "std::ranges::std::ranges::out_value_result", "type": "cpp", "path": "cpp\\algorithm\\ranges\\return_types\\out_value_result.html", "desc": "std::ranges::std::ranges::out_value_result"}, {"name": "std::std::atomic", "type": "cpp", "path": "cpp\\atomic\\atomic.html", "desc": "std::std::atomic"}, {"name": "std:: std:: std:: std::std::atomic_compare_exchange_weak, std::atomic_compare_exchange_strong, std::atomic_compare_exchange_weak_explicit, std::atomic_compare_exchange_strong_explicit", "type": "cpp", "path": "cpp\\atomic\\atomic_compare_exchange.html", "desc": "std:: std:: std:: std::std::atomic_compare_exchange_weak, std::atomic_compare_exchange_strong, std::atomic_compare_exchange_weak_explicit, std::atomic_compare_exchange_strong_explicit"}, {"name": "std:: std::std::atomic_exchange, std::atomic_exchange_explicit", "type": "cpp", "path": "cpp\\atomic\\atomic_exchange.html", "desc": "std:: std::std::atomic_exchange, std::atomic_exchange_explicit"}, {"name": "std:: std::std::atomic_fetch_add, std::atomic_fetch_add_explicit", "type": "cpp", "path": "cpp\\atomic\\atomic_fetch_add.html", "desc": "std:: std::std::atomic_fetch_add, std::atomic_fetch_add_explicit"}, {"name": "std:: std::std::atomic_fetch_and, std::atomic_fetch_and_explicit", "type": "cpp", "path": "cpp\\atomic\\atomic_fetch_and.html", "desc": "std:: std::std::atomic_fetch_and, std::atomic_fetch_and_explicit"}, {"name": "std:: std::std::atomic_fetch_or, std::atomic_fetch_or_explicit", "type": "cpp", "path": "cpp\\atomic\\atomic_fetch_or.html", "desc": "std:: std::std::atomic_fetch_or, std::atomic_fetch_or_explicit"}, {"name": "std:: std::std::atomic_fetch_sub, std::atomic_fetch_sub_explicit", "type": "cpp", "path": "cpp\\atomic\\atomic_fetch_sub.html", "desc": "std:: std::std::atomic_fetch_sub, std::atomic_fetch_sub_explicit"}, {"name": "std:: std::std::atomic_fetch_xor, std::atomic_fetch_xor_explicit", "type": "cpp", "path": "cpp\\atomic\\atomic_fetch_xor.html", "desc": "std:: std::std::atomic_fetch_xor, std::atomic_fetch_xor_explicit"}, {"name": "std::std::atomic_flag", "type": "cpp", "path": "cpp\\atomic\\atomic_flag.html", "desc": "std::std::atomic_flag"}, {"name": "std:: std::std::atomic_flag_clear, std::atomic_flag_clear_explicit", "type": "cpp", "path": "cpp\\atomic\\atomic_flag_clear.html", "desc": "std:: std::std::atomic_flag_clear, std::atomic_flag_clear_explicit"}, {"name": "ATOMIC_FLAG_INIT", "type": "cpp", "path": "cpp\\atomic\\ATOMIC_FLAG_INIT.html", "desc": "ATOMIC_FLAG_INIT"}, {"name": "std::std::atomic_flag_notify_all", "type": "cpp", "path": "cpp\\atomic\\atomic_flag_notify_all.html", "desc": "std::std::atomic_flag_notify_all"}, {"name": "std::std::atomic_flag_notify_one", "type": "cpp", "path": "cpp\\atomic\\atomic_flag_notify_one.html", "desc": "std::std::atomic_flag_notify_one"}, {"name": "std:: std::std::atomic_flag_test, std::atomic_flag_test_explicit", "type": "cpp", "path": "cpp\\atomic\\atomic_flag_test.html", "desc": "std:: std::std::atomic_flag_test, std::atomic_flag_test_explicit"}, {"name": "std:: std::std::atomic_flag_test_and_set, std::atomic_flag_test_and_set_explicit", "type": "cpp", "path": "cpp\\atomic\\atomic_flag_test_and_set.html", "desc": "std:: std::std::atomic_flag_test_and_set, std::atomic_flag_test_and_set_explicit"}, {"name": "std:: std::std::atomic_flag_wait, std::atomic_flag_wait_explicit", "type": "cpp", "path": "cpp\\atomic\\atomic_flag_wait.html", "desc": "std:: std::std::atomic_flag_wait, std::atomic_flag_wait_explicit"}, {"name": "std::std::atomic_init", "type": "cpp", "path": "cpp\\atomic\\atomic_init.html", "desc": "std::std::atomic_init"}, {"name": "std::std::atomic_is_lock_free, ATOMIC_xxx_LOCK_FREE", "type": "cpp", "path": "cpp\\atomic\\atomic_is_lock_free.html", "desc": "std::std::atomic_is_lock_free, ATOMIC_xxx_LOCK_FREE"}, {"name": "std:: std::std::atomic_load, std::atomic_load_explicit", "type": "cpp", "path": "cpp\\atomic\\atomic_load.html", "desc": "std:: std::std::atomic_load, std::atomic_load_explicit"}, {"name": "std::std::atomic_notify_all", "type": "cpp", "path": "cpp\\atomic\\atomic_notify_all.html", "desc": "std::std::atomic_notify_all"}, {"name": "std::std::atomic_notify_one", "type": "cpp", "path": "cpp\\atomic\\atomic_notify_one.html", "desc": "std::std::atomic_notify_one"}, {"name": "std::std::atomic_ref", "type": "cpp", "path": "cpp\\atomic\\atomic_ref.html", "desc": "std::std::atomic_ref"}, {"name": "std::std::atomic_signal_fence", "type": "cpp", "path": "cpp\\atomic\\atomic_signal_fence.html", "desc": "std::std::atomic_signal_fence"}, {"name": "std:: std::std::atomic_store, std::atomic_store_explicit", "type": "cpp", "path": "cpp\\atomic\\atomic_store.html", "desc": "std:: std::std::atomic_store, std::atomic_store_explicit"}, {"name": "std::std::atomic_thread_fence", "type": "cpp", "path": "cpp\\atomic\\atomic_thread_fence.html", "desc": "std::std::atomic_thread_fence"}, {"name": "ATOMIC_VAR_INIT", "type": "cpp", "path": "cpp\\atomic\\ATOMIC_VAR_INIT.html", "desc": "ATOMIC_VAR_INIT"}, {"name": "std:: std::std::atomic_wait, std::atomic_wait_explicit", "type": "cpp", "path": "cpp\\atomic\\atomic_wait.html", "desc": "std:: std::std::atomic_wait, std::atomic_wait_explicit"}, {"name": "std::std::kill_dependency", "type": "cpp", "path": "cpp\\atomic\\kill_dependency.html", "desc": "std::std::kill_dependency"}, {"name": "std::std::memory_order", "type": "cpp", "path": "cpp\\atomic\\memory_order.html", "desc": "std::std::memory_order"}, {"name": "std::atomic<T>::std::atomic<T>::atomic", "type": "cpp", "path": "cpp\\atomic\\atomic\\atomic.html", "desc": "std::atomic<T>::std::atomic<T>::atomic"}, {"name": "std::atomic<T>:: std::atomic<T>::std::atomic<T>::compare_exchange_weak, std::atomic<T>::compare_exchange_strong", "type": "cpp", "path": "cpp\\atomic\\atomic\\compare_exchange.html", "desc": "std::atomic<T>:: std::atomic<T>::std::atomic<T>::compare_exchange_weak, std::atomic<T>::compare_exchange_strong"}, {"name": "std::atomic<T>::std::atomic<T>::exchange", "type": "cpp", "path": "cpp\\atomic\\atomic\\exchange.html", "desc": "std::atomic<T>::std::atomic<T>::exchange"}, {"name": "std::atomic<T>::std::atomic<T>::fetch_add", "type": "cpp", "path": "cpp\\atomic\\atomic\\fetch_add.html", "desc": "std::atomic<T>::std::atomic<T>::fetch_add"}, {"name": "std::atomic<T>::std::atomic<T>::fetch_and", "type": "cpp", "path": "cpp\\atomic\\atomic\\fetch_and.html", "desc": "std::atomic<T>::std::atomic<T>::fetch_and"}, {"name": "std::atomic<T>::std::atomic<T>::fetch_or", "type": "cpp", "path": "cpp\\atomic\\atomic\\fetch_or.html", "desc": "std::atomic<T>::std::atomic<T>::fetch_or"}, {"name": "std::atomic<T>::std::atomic<T>::fetch_sub", "type": "cpp", "path": "cpp\\atomic\\atomic\\fetch_sub.html", "desc": "std::atomic<T>::std::atomic<T>::fetch_sub"}, {"name": "std::atomic<T>::std::atomic<T>::fetch_xor", "type": "cpp", "path": "cpp\\atomic\\atomic\\fetch_xor.html", "desc": "std::atomic<T>::std::atomic<T>::fetch_xor"}, {"name": "std::atomic<T>::std::atomic<T>::is_always_lock_free", "type": "cpp", "path": "cpp\\atomic\\atomic\\is_always_lock_free.html", "desc": "std::atomic<T>::std::atomic<T>::is_always_lock_free"}, {"name": "std::atomic<T>::std::atomic<T>::is_lock_free", "type": "cpp", "path": "cpp\\atomic\\atomic\\is_lock_free.html", "desc": "std::atomic<T>::std::atomic<T>::is_lock_free"}, {"name": "std::atomic<T>::std::atomic<T>::load", "type": "cpp", "path": "cpp\\atomic\\atomic\\load.html", "desc": "std::atomic<T>::std::atomic<T>::load"}, {"name": "std::atomic<T>::std::atomic<T>::notify_all", "type": "cpp", "path": "cpp\\atomic\\atomic\\notify_all.html", "desc": "std::atomic<T>::std::atomic<T>::notify_all"}, {"name": "std::atomic<T>::std::atomic<T>::notify_one", "type": "cpp", "path": "cpp\\atomic\\atomic\\notify_one.html", "desc": "std::atomic<T>::std::atomic<T>::notify_one"}, {"name": "std::atomic<T>::std::atomic<T>::operator=", "type": "cpp", "path": "cpp\\atomic\\atomic\\operator=.html", "desc": "std::atomic<T>::std::atomic<T>::operator="}, {"name": "std::atomic<T>:: (int) (int)std::atomic<T>::operator++,++(int),--,--(int)", "type": "cpp", "path": "cpp\\atomic\\atomic\\operator_arith.html", "desc": "std::atomic<T>:: (int) (int)std::atomic<T>::operator++,++(int),--,--(int)"}, {"name": "std::atomic<T>::std::atomic<T>::operator+=,-=,&=,|=,^=", "type": "cpp", "path": "cpp\\atomic\\atomic\\operator_arith2.html", "desc": "std::atomic<T>::std::atomic<T>::operator+=,-=,&=,|=,^="}, {"name": "std::atomic<T>::std::atomic<T>::operator T", "type": "cpp", "path": "cpp\\atomic\\atomic\\operator_T.html", "desc": "std::atomic<T>::std::atomic<T>::operator T"}, {"name": "std::atomic<T>::std::atomic<T>::store", "type": "cpp", "path": "cpp\\atomic\\atomic\\store.html", "desc": "std::atomic<T>::std::atomic<T>::store"}, {"name": "std::atomic<T>::std::atomic<T>::wait", "type": "cpp", "path": "cpp\\atomic\\atomic\\wait.html", "desc": "std::atomic<T>::std::atomic<T>::wait"}, {"name": "std::atomic_flag::std::atomic_flag::atomic_flag", "type": "cpp", "path": "cpp\\atomic\\atomic_flag\\atomic_flag.html", "desc": "std::atomic_flag::std::atomic_flag::atomic_flag"}, {"name": "std::atomic_flag::std::atomic_flag::clear", "type": "cpp", "path": "cpp\\atomic\\atomic_flag\\clear.html", "desc": "std::atomic_flag::std::atomic_flag::clear"}, {"name": "std::atomic_flag::std::atomic_flag::notify_all", "type": "cpp", "path": "cpp\\atomic\\atomic_flag\\notify_all.html", "desc": "std::atomic_flag::std::atomic_flag::notify_all"}, {"name": "std::atomic_flag::std::atomic_flag::notify_one", "type": "cpp", "path": "cpp\\atomic\\atomic_flag\\notify_one.html", "desc": "std::atomic_flag::std::atomic_flag::notify_one"}, {"name": "std::atomic_flag::std::atomic_flag::operator=", "type": "cpp", "path": "cpp\\atomic\\atomic_flag\\operator=.html", "desc": "std::atomic_flag::std::atomic_flag::operator="}, {"name": "std::atomic_flag::std::atomic_flag::test", "type": "cpp", "path": "cpp\\atomic\\atomic_flag\\test.html", "desc": "std::atomic_flag::std::atomic_flag::test"}, {"name": "std::atomic_flag::std::atomic_flag::test_and_set", "type": "cpp", "path": "cpp\\atomic\\atomic_flag\\test_and_set.html", "desc": "std::atomic_flag::std::atomic_flag::test_and_set"}, {"name": "std::atomic_flag::std::atomic_flag::wait", "type": "cpp", "path": "cpp\\atomic\\atomic_flag\\wait.html", "desc": "std::atomic_flag::std::atomic_flag::wait"}, {"name": "std::atomic_ref<T>::std::atomic_ref<T>::atomic_ref", "type": "cpp", "path": "cpp\\atomic\\atomic_ref\\atomic_ref.html", "desc": "std::atomic_ref<T>::std::atomic_ref<T>::atomic_ref"}, {"name": "std::atomic_ref<T>:: std::atomic_ref<T>::std::atomic_ref<T>::compare_exchange_weak, std::atomic_ref<T>::compare_exchange_strong", "type": "cpp", "path": "cpp\\atomic\\atomic_ref\\compare_exchange.html", "desc": "std::atomic_ref<T>:: std::atomic_ref<T>::std::atomic_ref<T>::compare_exchange_weak, std::atomic_ref<T>::compare_exchange_strong"}, {"name": "std::atomic_ref<T>::std::atomic_ref<T>::exchange", "type": "cpp", "path": "cpp\\atomic\\atomic_ref\\exchange.html", "desc": "std::atomic_ref<T>::std::atomic_ref<T>::exchange"}, {"name": "std::atomic_ref<T>::std::atomic_ref<T>::fetch_add", "type": "cpp", "path": "cpp\\atomic\\atomic_ref\\fetch_add.html", "desc": "std::atomic_ref<T>::std::atomic_ref<T>::fetch_add"}, {"name": "std::atomic_ref<T>::std::atomic_ref<T>::fetch_and", "type": "cpp", "path": "cpp\\atomic\\atomic_ref\\fetch_and.html", "desc": "std::atomic_ref<T>::std::atomic_ref<T>::fetch_and"}, {"name": "std::atomic_ref<T>::std::atomic_ref<T>::fetch_or", "type": "cpp", "path": "cpp\\atomic\\atomic_ref\\fetch_or.html", "desc": "std::atomic_ref<T>::std::atomic_ref<T>::fetch_or"}, {"name": "std::atomic_ref<T>::std::atomic_ref<T>::fetch_sub", "type": "cpp", "path": "cpp\\atomic\\atomic_ref\\fetch_sub.html", "desc": "std::atomic_ref<T>::std::atomic_ref<T>::fetch_sub"}, {"name": "std::atomic_ref<T>::std::atomic_ref<T>::fetch_xor", "type": "cpp", "path": "cpp\\atomic\\atomic_ref\\fetch_xor.html", "desc": "std::atomic_ref<T>::std::atomic_ref<T>::fetch_xor"}, {"name": "std::atomic_ref<T>::std::atomic_ref<T>::is_always_lock_free", "type": "cpp", "path": "cpp\\atomic\\atomic_ref\\is_always_lock_free.html", "desc": "std::atomic_ref<T>::std::atomic_ref<T>::is_always_lock_free"}, {"name": "std::atomic_ref<T>::std::atomic_ref<T>::is_lock_free", "type": "cpp", "path": "cpp\\atomic\\atomic_ref\\is_lock_free.html", "desc": "std::atomic_ref<T>::std::atomic_ref<T>::is_lock_free"}, {"name": "std::atomic_ref<T>::std::atomic_ref<T>::load", "type": "cpp", "path": "cpp\\atomic\\atomic_ref\\load.html", "desc": "std::atomic_ref<T>::std::atomic_ref<T>::load"}, {"name": "std::atomic_ref<T>::std::atomic_ref<T>::notify_all", "type": "cpp", "path": "cpp\\atomic\\atomic_ref\\notify_all.html", "desc": "std::atomic_ref<T>::std::atomic_ref<T>::notify_all"}, {"name": "std::atomic_ref<T>::std::atomic_ref<T>::notify_one", "type": "cpp", "path": "cpp\\atomic\\atomic_ref\\notify_one.html", "desc": "std::atomic_ref<T>::std::atomic_ref<T>::notify_one"}, {"name": "std::atomic_ref<T>::std::atomic_ref<T>::operator=", "type": "cpp", "path": "cpp\\atomic\\atomic_ref\\operator=.html", "desc": "std::atomic_ref<T>::std::atomic_ref<T>::operator="}, {"name": "std::atomic_ref<T>:: (int) (int)std::atomic_ref<T>::operator++,++(int),--,--(int)", "type": "cpp", "path": "cpp\\atomic\\atomic_ref\\operator_arith.html", "desc": "std::atomic_ref<T>:: (int) (int)std::atomic_ref<T>::operator++,++(int),--,--(int)"}, {"name": "std::atomic_ref<T>::std::atomic_ref<T>::operator+=,-=,&=,|=,^=", "type": "cpp", "path": "cpp\\atomic\\atomic_ref\\operator_arith2.html", "desc": "std::atomic_ref<T>::std::atomic_ref<T>::operator+=,-=,&=,|=,^="}, {"name": "std::atomic_ref<T>::std::atomic_ref<T>::operator T", "type": "cpp", "path": "cpp\\atomic\\atomic_ref\\operator_T.html", "desc": "std::atomic_ref<T>::std::atomic_ref<T>::operator T"}, {"name": "std::atomic_ref<T>::std::atomic_ref<T>::required_alignment", "type": "cpp", "path": "cpp\\atomic\\atomic_ref\\required_alignment.html", "desc": "std::atomic_ref<T>::std::atomic_ref<T>::required_alignment"}, {"name": "std::atomic_ref<T>::std::atomic_ref<T>::store", "type": "cpp", "path": "cpp\\atomic\\atomic_ref\\store.html", "desc": "std::atomic_ref<T>::std::atomic_ref<T>::store"}, {"name": "std::atomic_ref<T>::std::atomic_ref<T>::wait", "type": "cpp", "path": "cpp\\atomic\\atomic_ref\\wait.html", "desc": "std::atomic_ref<T>::std::atomic_ref<T>::wait"}, {"name": "std::chrono::std::chrono::ambiguous_local_time", "type": "cpp", "path": "cpp\\chrono\\ambiguous_local_time.html", "desc": "std::chrono::std::chrono::ambiguous_local_time"}, {"name": "C \u65e5\u671f\u548c\u65f6\u95f4\u5de5\u5177", "type": "cpp", "path": "cpp\\chrono\\c.html", "desc": "C \u65e5\u671f\u548c\u65f6\u95f4\u5de5\u5177"}, {"name": "std::chrono::std::chrono::choose", "type": "cpp", "path": "cpp\\chrono\\choose.html", "desc": "std::chrono::std::chrono::choose"}, {"name": "std::chrono::std::chrono::clock_cast", "type": "cpp", "path": "cpp\\chrono\\clock_cast.html", "desc": "std::chrono::std::chrono::clock_cast"}, {"name": "std::chrono::std::chrono::clock_time_conversion", "type": "cpp", "path": "cpp\\chrono\\clock_time_conversion.html", "desc": "std::chrono::std::chrono::clock_time_conversion"}, {"name": "std::chrono::std::chrono::current_zone", "type": "cpp", "path": "cpp\\chrono\\current_zone.html", "desc": "std::chrono::std::chrono::current_zone"}, {"name": "std::chrono::std::chrono::day", "type": "cpp", "path": "cpp\\chrono\\day.html", "desc": "std::chrono::std::chrono::day"}, {"name": "std::chrono::std::chrono::duration", "type": "cpp", "path": "cpp\\chrono\\duration.html", "desc": "std::chrono::std::chrono::duration"}, {"name": "std::chrono::std::chrono::duration_values", "type": "cpp", "path": "cpp\\chrono\\duration_values.html", "desc": "std::chrono::std::chrono::duration_values"}, {"name": "std::chrono::std::chrono::file_clock", "type": "cpp", "path": "cpp\\chrono\\file_clock.html", "desc": "std::chrono::std::chrono::file_clock"}, {"name": "std::chrono::std::chrono::gps_clock", "type": "cpp", "path": "cpp\\chrono\\gps_clock.html", "desc": "std::chrono::std::chrono::gps_clock"}, {"name": "std::chrono::std::chrono::hh_mm_ss", "type": "cpp", "path": "cpp\\chrono\\hh_mm_ss.html", "desc": "std::chrono::std::chrono::hh_mm_ss"}, {"name": "std::chrono::std::chrono::high_resolution_clock", "type": "cpp", "path": "cpp\\chrono\\high_resolution_clock.html", "desc": "std::chrono::std::chrono::high_resolution_clock"}, {"name": "std::chrono:: std::chrono:: std::chrono:: std::chrono::std::chrono::is_am, std::chrono::is_pm, std::chrono::make12, std::chrono::make24", "type": "cpp", "path": "cpp\\chrono\\hour_fun.html", "desc": "std::chrono:: std::chrono:: std::chrono:: std::chrono::std::chrono::is_am, std::chrono::is_pm, std::chrono::make12, std::chrono::make24"}, {"name": "std::chrono::std::chrono::is_clock", "type": "cpp", "path": "cpp\\chrono\\is_clock.html", "desc": "std::chrono::std::chrono::is_clock"}, {"name": "std::chrono:: std::chrono::std::chrono::last_spec, std::chrono::last", "type": "cpp", "path": "cpp\\chrono\\last_spec.html", "desc": "std::chrono:: std::chrono::std::chrono::last_spec, std::chrono::last"}, {"name": "std::chrono::std::chrono::leap_second", "type": "cpp", "path": "cpp\\chrono\\leap_second.html", "desc": "std::chrono::std::chrono::leap_second"}, {"name": "std::chrono::std::chrono::local_info", "type": "cpp", "path": "cpp\\chrono\\local_info.html", "desc": "std::chrono::std::chrono::local_info"}, {"name": "std::chrono::std::chrono::local_t", "type": "cpp", "path": "cpp\\chrono\\local_t.html", "desc": "std::chrono::std::chrono::local_t"}, {"name": "std::chrono::std::chrono::locate_zone", "type": "cpp", "path": "cpp\\chrono\\locate_zone.html", "desc": "std::chrono::std::chrono::locate_zone"}, {"name": "std::chrono::std::chrono::month", "type": "cpp", "path": "cpp\\chrono\\month.html", "desc": "std::chrono::std::chrono::month"}, {"name": "std::chrono::std::chrono::month_day", "type": "cpp", "path": "cpp\\chrono\\month_day.html", "desc": "std::chrono::std::chrono::month_day"}, {"name": "std::chrono::std::chrono::month_day_last", "type": "cpp", "path": "cpp\\chrono\\month_day_last.html", "desc": "std::chrono::std::chrono::month_day_last"}, {"name": "std::chrono::std::chrono::month_weekday", "type": "cpp", "path": "cpp\\chrono\\month_weekday.html", "desc": "std::chrono::std::chrono::month_weekday"}, {"name": "std::chrono::std::chrono::month_weekday_last", "type": "cpp", "path": "cpp\\chrono\\month_weekday_last.html", "desc": "std::chrono::std::chrono::month_weekday_last"}, {"name": "std::chrono::std::chrono::nonexistent_local_time", "type": "cpp", "path": "cpp\\chrono\\nonexistent_local_time.html", "desc": "std::chrono::std::chrono::nonexistent_local_time"}, {"name": "std::literals::chrono_literals::std::literals::chrono_literals::operator\"\"d", "type": "cpp", "path": "cpp\\chrono\\operator%22%22d.html", "desc": "std::literals::chrono_literals::std::literals::chrono_literals::operator\"\"d"}, {"name": "std::literals::chrono_literals::std::literals::chrono_literals::operator\"\"h", "type": "cpp", "path": "cpp\\chrono\\operator%22%22h.html", "desc": "std::literals::chrono_literals::std::literals::chrono_literals::operator\"\"h"}, {"name": "std::literals::chrono_literals::std::literals::chrono_literals::operator\"\"min", "type": "cpp", "path": "cpp\\chrono\\operator%22%22min.html", "desc": "std::literals::chrono_literals::std::literals::chrono_literals::operator\"\"min"}, {"name": "std::literals::chrono_literals::std::literals::chrono_literals::operator\"\"ms", "type": "cpp", "path": "cpp\\chrono\\operator%22%22ms.html", "desc": "std::literals::chrono_literals::std::literals::chrono_literals::operator\"\"ms"}, {"name": "std::literals::chrono_literals::std::literals::chrono_literals::operator\"\"ns", "type": "cpp", "path": "cpp\\chrono\\operator%22%22ns.html", "desc": "std::literals::chrono_literals::std::literals::chrono_literals::operator\"\"ns"}, {"name": "std::literals::chrono_literals::std::literals::chrono_literals::operator\"\"s", "type": "cpp", "path": "cpp\\chrono\\operator%22%22s.html", "desc": "std::literals::chrono_literals::std::literals::chrono_literals::operator\"\"s"}, {"name": "std::literals::chrono_literals::std::literals::chrono_literals::operator\"\"us", "type": "cpp", "path": "cpp\\chrono\\operator%22%22us.html", "desc": "std::literals::chrono_literals::std::literals::chrono_literals::operator\"\"us"}, {"name": "std::literals::chrono_literals::std::literals::chrono_literals::operator\"\"y", "type": "cpp", "path": "cpp\\chrono\\operator%22%22y.html", "desc": "std::literals::chrono_literals::std::literals::chrono_literals::operator\"\"y"}, {"name": "std::chrono:: (\u65e5\u5386)std::chrono::operator/ (\u65e5\u5386)", "type": "cpp", "path": "cpp\\chrono\\operator_slash.html", "desc": "std::chrono:: (\u65e5\u5386)std::chrono::operator/ (\u65e5\u5386)"}, {"name": "std::chrono::std::chrono::parse", "type": "cpp", "path": "cpp\\chrono\\parse.html", "desc": "std::chrono::std::chrono::parse"}, {"name": "std::chrono::std::chrono::steady_clock", "type": "cpp", "path": "cpp\\chrono\\steady_clock.html", "desc": "std::chrono::std::chrono::steady_clock"}, {"name": "std::chrono::std::chrono::system_clock", "type": "cpp", "path": "cpp\\chrono\\system_clock.html", "desc": "std::chrono::std::chrono::system_clock"}, {"name": "std::chrono::std::chrono::sys_info", "type": "cpp", "path": "cpp\\chrono\\sys_info.html", "desc": "std::chrono::std::chrono::sys_info"}, {"name": "std::chrono::std::chrono::tai_clock", "type": "cpp", "path": "cpp\\chrono\\tai_clock.html", "desc": "std::chrono::std::chrono::tai_clock"}, {"name": "std::chrono::std::chrono::time_point", "type": "cpp", "path": "cpp\\chrono\\time_point.html", "desc": "std::chrono::std::chrono::time_point"}, {"name": "std::chrono::std::chrono::time_zone", "type": "cpp", "path": "cpp\\chrono\\time_zone.html", "desc": "std::chrono::std::chrono::time_zone"}, {"name": "std::chrono::std::chrono::time_zone_link", "type": "cpp", "path": "cpp\\chrono\\time_zone_link.html", "desc": "std::chrono::std::chrono::time_zone_link"}, {"name": "std::chrono::std::chrono::treat_as_floating_point", "type": "cpp", "path": "cpp\\chrono\\treat_as_floating_point.html", "desc": "std::chrono::std::chrono::treat_as_floating_point"}, {"name": "std::chrono::std::chrono::tzdb", "type": "cpp", "path": "cpp\\chrono\\tzdb.html", "desc": "std::chrono::std::chrono::tzdb"}, {"name": "std::chrono:: std::chrono:: std::chrono:: std::chrono::std::chrono::get_tzdb_list, std::chrono::get_tzdb, std::chrono::remote_version, std::chrono::reload_tzdb", "type": "cpp", "path": "cpp\\chrono\\tzdb_functions.html", "desc": "std::chrono:: std::chrono:: std::chrono:: std::chrono::std::chrono::get_tzdb_list, std::chrono::get_tzdb, std::chrono::remote_version, std::chrono::reload_tzdb"}, {"name": "std::chrono::std::chrono::tzdb_list", "type": "cpp", "path": "cpp\\chrono\\tzdb_list.html", "desc": "std::chrono::std::chrono::tzdb_list"}, {"name": "std::chrono::std::chrono::utc_clock", "type": "cpp", "path": "cpp\\chrono\\utc_clock.html", "desc": "std::chrono::std::chrono::utc_clock"}, {"name": "std::chrono::std::chrono::weekday", "type": "cpp", "path": "cpp\\chrono\\weekday.html", "desc": "std::chrono::std::chrono::weekday"}, {"name": "std::chrono::std::chrono::weekday_indexed", "type": "cpp", "path": "cpp\\chrono\\weekday_indexed.html", "desc": "std::chrono::std::chrono::weekday_indexed"}, {"name": "std::chrono::std::chrono::weekday_last", "type": "cpp", "path": "cpp\\chrono\\weekday_last.html", "desc": "std::chrono::std::chrono::weekday_last"}, {"name": "std::chrono::std::chrono::year", "type": "cpp", "path": "cpp\\chrono\\year.html", "desc": "std::chrono::std::chrono::year"}, {"name": "std::chrono::std::chrono::year_month", "type": "cpp", "path": "cpp\\chrono\\year_month.html", "desc": "std::chrono::std::chrono::year_month"}, {"name": "std::chrono::std::chrono::year_month_day", "type": "cpp", "path": "cpp\\chrono\\year_month_day.html", "desc": "std::chrono::std::chrono::year_month_day"}, {"name": "std::chrono::std::chrono::year_month_day_last", "type": "cpp", "path": "cpp\\chrono\\year_month_day_last.html", "desc": "std::chrono::std::chrono::year_month_day_last"}, {"name": "std::chrono::std::chrono::year_month_weekday", "type": "cpp", "path": "cpp\\chrono\\year_month_weekday.html", "desc": "std::chrono::std::chrono::year_month_weekday"}, {"name": "std::chrono::std::chrono::year_month_weekday_last", "type": "cpp", "path": "cpp\\chrono\\year_month_weekday_last.html", "desc": "std::chrono::std::chrono::year_month_weekday_last"}, {"name": "std::chrono::std::chrono::zoned_time", "type": "cpp", "path": "cpp\\chrono\\zoned_time.html", "desc": "std::chrono::std::chrono::zoned_time"}, {"name": "std::chrono::std::chrono::zoned_traits", "type": "cpp", "path": "cpp\\chrono\\zoned_traits.html", "desc": "std::chrono::std::chrono::zoned_traits"}, {"name": "std::std::asctime", "type": "cpp", "path": "cpp\\chrono\\c\\asctime.html", "desc": "std::std::asctime"}, {"name": "std::std::clock", "type": "cpp", "path": "cpp\\chrono\\c\\clock.html", "desc": "std::std::clock"}, {"name": "CLOCKS_PER_SEC", "type": "cpp", "path": "cpp\\chrono\\c\\CLOCKS_PER_SEC.html", "desc": "CLOCKS_PER_SEC"}, {"name": "std::std::clock_t", "type": "cpp", "path": "cpp\\chrono\\c\\clock_t.html", "desc": "std::std::clock_t"}, {"name": "std::std::ctime", "type": "cpp", "path": "cpp\\chrono\\c\\ctime.html", "desc": "std::std::ctime"}, {"name": "std::std::difftime", "type": "cpp", "path": "cpp\\chrono\\c\\difftime.html", "desc": "std::std::difftime"}, {"name": "std::std::gmtime", "type": "cpp", "path": "cpp\\chrono\\c\\gmtime.html", "desc": "std::std::gmtime"}, {"name": "std::std::localtime", "type": "cpp", "path": "cpp\\chrono\\c\\localtime.html", "desc": "std::std::localtime"}, {"name": "std::std::mktime", "type": "cpp", "path": "cpp\\chrono\\c\\mktime.html", "desc": "std::std::mktime"}, {"name": "std::std::strftime", "type": "cpp", "path": "cpp\\chrono\\c\\strftime.html", "desc": "std::std::strftime"}, {"name": "std::std::time", "type": "cpp", "path": "cpp\\chrono\\c\\time.html", "desc": "std::std::time"}, {"name": "std::std::timespec", "type": "cpp", "path": "cpp\\chrono\\c\\timespec.html", "desc": "std::std::timespec"}, {"name": "std::std::timespec_get", "type": "cpp", "path": "cpp\\chrono\\c\\timespec_get.html", "desc": "std::std::timespec_get"}, {"name": "std::std::time_t", "type": "cpp", "path": "cpp\\chrono\\c\\time_t.html", "desc": "std::std::time_t"}, {"name": "std::std::tm", "type": "cpp", "path": "cpp\\chrono\\c\\tm.html", "desc": "std::std::tm"}, {"name": "std::std::wcsftime", "type": "cpp", "path": "cpp\\chrono\\c\\wcsftime.html", "desc": "std::std::wcsftime"}, {"name": "std::chrono::day::std::chrono::day::day", "type": "cpp", "path": "cpp\\chrono\\day\\day.html", "desc": "std::chrono::day::std::chrono::day::day"}, {"name": "std:: <std::chrono::day>std::formatter<std::chrono::day>", "type": "cpp", "path": "cpp\\chrono\\day\\formatter.html", "desc": "std:: <std::chrono::day>std::formatter<std::chrono::day>"}, {"name": "std::chrono:: (std::chrono::day)std::chrono::from_stream (std::chrono::day)", "type": "cpp", "path": "cpp\\chrono\\day\\from_stream.html", "desc": "std::chrono:: (std::chrono::day)std::chrono::from_stream (std::chrono::day)"}, {"name": "std:: <std::chrono::day>std::hash<std::chrono::day>", "type": "cpp", "path": "cpp\\chrono\\day\\hash.html", "desc": "std:: <std::chrono::day>std::hash<std::chrono::day>"}, {"name": "std::chrono::day::std::chrono::day::ok", "type": "cpp", "path": "cpp\\chrono\\day\\ok.html", "desc": "std::chrono::day::std::chrono::day::ok"}, {"name": "std::chrono::day:: std::chrono::day::std::chrono::day::operator+=, std::chrono::day::operator-=", "type": "cpp", "path": "cpp\\chrono\\day\\operator_arith.html", "desc": "std::chrono::day:: std::chrono::day::std::chrono::day::operator+=, std::chrono::day::operator-="}, {"name": "std::chrono:: std::chrono:: (std::chrono::day)std::chrono::operator+, std::chrono::operator- (std::chrono::day)", "type": "cpp", "path": "cpp\\chrono\\day\\operator_arith_2.html", "desc": "std::chrono:: std::chrono:: (std::chrono::day)std::chrono::operator+, std::chrono::operator- (std::chrono::day)"}, {"name": "std::chrono:: (std::chrono::day)std::chrono::operator==,<=>(std::chrono::day)", "type": "cpp", "path": "cpp\\chrono\\day\\operator_cmp.html", "desc": "std::chrono:: (std::chrono::day)std::chrono::operator==,<=>(std::chrono::day)"}, {"name": "std::chrono::day:: std::chrono::day::std::chrono::day::operator++, std::chrono::day::operator--", "type": "cpp", "path": "cpp\\chrono\\day\\operator_inc_dec.html", "desc": "std::chrono::day:: std::chrono::day::std::chrono::day::operator++, std::chrono::day::operator--"}, {"name": "std::chrono:: (std::chrono::day)std::chrono::operator<<(std::chrono::day)", "type": "cpp", "path": "cpp\\chrono\\day\\operator_ltlt.html", "desc": "std::chrono:: (std::chrono::day)std::chrono::operator<<(std::chrono::day)"}, {"name": "std::chrono::day::std::chrono::day::operator unsigned", "type": "cpp", "path": "cpp\\chrono\\day\\operator_unsigned.html", "desc": "std::chrono::day::std::chrono::day::operator unsigned"}, {"name": "std::chrono::std::chrono::abs(std::chrono::duration)", "type": "cpp", "path": "cpp\\chrono\\duration\\abs.html", "desc": "std::chrono::std::chrono::abs(std::chrono::duration)"}, {"name": "std::chrono::std::chrono::ceil(std::chrono::duration)", "type": "cpp", "path": "cpp\\chrono\\duration\\ceil.html", "desc": "std::chrono::std::chrono::ceil(std::chrono::duration)"}, {"name": "std::std::common_type(std::chrono::duration)", "type": "cpp", "path": "cpp\\chrono\\duration\\common_type.html", "desc": "std::std::common_type(std::chrono::duration)"}, {"name": "std::chrono::duration<Rep,Period>::std::chrono::duration<Rep,Period>::count", "type": "cpp", "path": "cpp\\chrono\\duration\\count.html", "desc": "std::chrono::duration<Rep,Period>::std::chrono::duration<Rep,Period>::count"}, {"name": "std::chrono::duration<Rep,Period>::std::chrono::duration<Rep,Period>::duration", "type": "cpp", "path": "cpp\\chrono\\duration\\duration.html", "desc": "std::chrono::duration<Rep,Period>::std::chrono::duration<Rep,Period>::duration"}, {"name": "std::chrono::std::chrono::duration_cast", "type": "cpp", "path": "cpp\\chrono\\duration\\duration_cast.html", "desc": "std::chrono::std::chrono::duration_cast"}, {"name": "std::chrono::std::chrono::floor(std::chrono::duration)", "type": "cpp", "path": "cpp\\chrono\\duration\\floor.html", "desc": "std::chrono::std::chrono::floor(std::chrono::duration)"}, {"name": "std:: <std::chrono::duration>std::formatter<std::chrono::duration>", "type": "cpp", "path": "cpp\\chrono\\duration\\formatter.html", "desc": "std:: <std::chrono::duration>std::formatter<std::chrono::duration>"}, {"name": "std::chrono:: (std::chrono::duration)std::chrono::from_stream (std::chrono::duration)", "type": "cpp", "path": "cpp\\chrono\\duration\\from_stream.html", "desc": "std::chrono:: (std::chrono::duration)std::chrono::from_stream (std::chrono::duration)"}, {"name": "std:: <std::chrono::duration>std::hash<std::chrono::duration>", "type": "cpp", "path": "cpp\\chrono\\duration\\hash.html", "desc": "std:: <std::chrono::duration>std::hash<std::chrono::duration>"}, {"name": "std::chrono::duration<Rep,Period>::std::chrono::duration<Rep,Period>::max", "type": "cpp", "path": "cpp\\chrono\\duration\\max.html", "desc": "std::chrono::duration<Rep,Period>::std::chrono::duration<Rep,Period>::max"}, {"name": "std::chrono::duration<Rep,Period>::std::chrono::duration<Rep,Period>::min", "type": "cpp", "path": "cpp\\chrono\\duration\\min.html", "desc": "std::chrono::duration<Rep,Period>::std::chrono::duration<Rep,Period>::min"}, {"name": "std::chrono::duration<Rep,Period>::std::chrono::duration<Rep,Period>::operator=", "type": "cpp", "path": "cpp\\chrono\\duration\\operator=.html", "desc": "std::chrono::duration<Rep,Period>::std::chrono::duration<Rep,Period>::operator="}, {"name": "std::chrono::duration<Rep,Period>:: (unary) std::chrono::duration<Rep,Period>:: (unary)std::chrono::duration<Rep,Period>::operator+(unary), std::chrono::duration<Rep,Period>::operator-(unary)", "type": "cpp", "path": "cpp\\chrono\\duration\\operator_arith.html", "desc": "std::chrono::duration<Rep,Period>:: (unary) std::chrono::duration<Rep,Period>:: (unary)std::chrono::duration<Rep,Period>::operator+(unary), std::chrono::duration<Rep,Period>::operator-(unary)"}, {"name": "std::chrono::duration<Rep,Period>:: std::chrono::duration<Rep,Period>::std::chrono::duration<Rep,Period>::operator++, std::chrono::duration<Rep,Period>::operator--", "type": "cpp", "path": "cpp\\chrono\\duration\\operator_arith2.html", "desc": "std::chrono::duration<Rep,Period>:: std::chrono::duration<Rep,Period>::std::chrono::duration<Rep,Period>::operator++, std::chrono::duration<Rep,Period>::operator--"}, {"name": "std::chrono::duration<Rep,Period>::std::chrono::duration<Rep,Period>::operator+=, -=, *=, /=, %=", "type": "cpp", "path": "cpp\\chrono\\duration\\operator_arith3.html", "desc": "std::chrono::duration<Rep,Period>::std::chrono::duration<Rep,Period>::operator+=, -=, *=, /=, %="}, {"name": "operator+,-,*,/,%(std::chrono::duration)", "type": "cpp", "path": "cpp\\chrono\\duration\\operator_arith4.html", "desc": "operator+,-,*,/,%(std::chrono::duration)"}, {"name": "operator==,!=,<,<=,>,>=,<=>(std::chrono::duration)", "type": "cpp", "path": "cpp\\chrono\\duration\\operator_cmp.html", "desc": "operator==,!=,<,<=,>,>=,<=>(std::chrono::duration)"}, {"name": "std::chrono:: (std::chrono::duration)std::chrono::operator<< (std::chrono::duration)", "type": "cpp", "path": "cpp\\chrono\\duration\\operator_ltlt.html", "desc": "std::chrono:: (std::chrono::duration)std::chrono::operator<< (std::chrono::duration)"}, {"name": "std::chrono::std::chrono::round(std::chrono::duration)", "type": "cpp", "path": "cpp\\chrono\\duration\\round.html", "desc": "std::chrono::std::chrono::round(std::chrono::duration)"}, {"name": "std::chrono::duration<Rep,Period>::std::chrono::duration<Rep,Period>::zero", "type": "cpp", "path": "cpp\\chrono\\duration\\zero.html", "desc": "std::chrono::duration<Rep,Period>::std::chrono::duration<Rep,Period>::zero"}, {"name": "std::chrono::duration_values<Rep>::std::chrono::duration_values<Rep>::max", "type": "cpp", "path": "cpp\\chrono\\duration_values\\max.html", "desc": "std::chrono::duration_values<Rep>::std::chrono::duration_values<Rep>::max"}, {"name": "std::chrono::duration_values<Rep>::std::chrono::duration_values<Rep>::min", "type": "cpp", "path": "cpp\\chrono\\duration_values\\min.html", "desc": "std::chrono::duration_values<Rep>::std::chrono::duration_values<Rep>::min"}, {"name": "std::chrono::duration_values<Rep>::std::chrono::duration_values<Rep>::zero", "type": "cpp", "path": "cpp\\chrono\\duration_values\\zero.html", "desc": "std::chrono::duration_values<Rep>::std::chrono::duration_values<Rep>::zero"}, {"name": "std::std::formatter<std::chrono::file_time>", "type": "cpp", "path": "cpp\\chrono\\file_clock\\formatter.html", "desc": "std::std::formatter<std::chrono::file_time>"}, {"name": "std::chrono:: (std::chrono::file_time)std::chrono::from_stream (std::chrono::file_time)", "type": "cpp", "path": "cpp\\chrono\\file_clock\\from_stream.html", "desc": "std::chrono:: (std::chrono::file_time)std::chrono::from_stream (std::chrono::file_time)"}, {"name": "std::chrono::file_clock::std::chrono::file_clock::now", "type": "cpp", "path": "cpp\\chrono\\file_clock\\now.html", "desc": "std::chrono::file_clock::std::chrono::file_clock::now"}, {"name": "std::chrono::std::chrono::operator<<(std::chrono::file_time)", "type": "cpp", "path": "cpp\\chrono\\file_clock\\operator_ltlt.html", "desc": "std::chrono::std::chrono::operator<<(std::chrono::file_time)"}, {"name": "std::chrono::file_clock:: std::chrono::file_clock::std::chrono::file_clock::to_sys, std::chrono::file_clock::from_sys", "type": "cpp", "path": "cpp\\chrono\\file_clock\\to_from_sys.html", "desc": "std::chrono::file_clock:: std::chrono::file_clock::std::chrono::file_clock::to_sys, std::chrono::file_clock::from_sys"}, {"name": "std::chrono::file_clock:: std::chrono::file_clock::std::chrono::file_clock::to_utc, std::chrono::file_clock::from_utc", "type": "cpp", "path": "cpp\\chrono\\file_clock\\to_from_utc.html", "desc": "std::chrono::file_clock:: std::chrono::file_clock::std::chrono::file_clock::to_utc, std::chrono::file_clock::from_utc"}, {"name": "std::std::formatter<std::chrono::gps_time>", "type": "cpp", "path": "cpp\\chrono\\gps_clock\\formatter.html", "desc": "std::std::formatter<std::chrono::gps_time>"}, {"name": "std::chrono:: (std::chrono::gps_time)std::chrono::from_stream (std::chrono::gps_time)", "type": "cpp", "path": "cpp\\chrono\\gps_clock\\from_stream.html", "desc": "std::chrono:: (std::chrono::gps_time)std::chrono::from_stream (std::chrono::gps_time)"}, {"name": "std::chrono::gps_clock::std::chrono::gps_clock::from_utc", "type": "cpp", "path": "cpp\\chrono\\gps_clock\\from_utc.html", "desc": "std::chrono::gps_clock::std::chrono::gps_clock::from_utc"}, {"name": "std::chrono::gps_clock::std::chrono::gps_clock::now", "type": "cpp", "path": "cpp\\chrono\\gps_clock\\now.html", "desc": "std::chrono::gps_clock::std::chrono::gps_clock::now"}, {"name": "std::chrono::std::chrono::operator<<(std::chrono::gps_time)", "type": "cpp", "path": "cpp\\chrono\\gps_clock\\operator_ltlt.html", "desc": "std::chrono::std::chrono::operator<<(std::chrono::gps_time)"}, {"name": "std::chrono::gps_clock::std::chrono::gps_clock::to_utc", "type": "cpp", "path": "cpp\\chrono\\gps_clock\\to_utc.html", "desc": "std::chrono::gps_clock::std::chrono::gps_clock::to_utc"}, {"name": "std::chrono::hh_mm_ss<Duration>:: std::chrono::hh_mm_ss<Duration>:: std::chrono::hh_mm_ss<Duration>:: std::chrono::hh_mm_ss<Duration>:: std::chrono::hh_mm_ss<Duration>::std::chrono::hh_mm_ss<Duration>::is_negative, std::chrono::hh_mm_ss<Duration>::hours, std::chrono::hh_mm_ss<Duration>::minutes, std::chrono::hh_mm_ss<Duration>::seconds, std::chrono::hh_mm_ss<Duration>::subseconds", "type": "cpp", "path": "cpp\\chrono\\hh_mm_ss\\accessors.html", "desc": "std::chrono::hh_mm_ss<Duration>:: std::chrono::hh_mm_ss<Duration>:: std::chrono::hh_mm_ss<Duration>:: std::chrono::hh_mm_ss<Duration>:: std::chrono::hh_mm_ss<Duration>::std::chrono::hh_mm_ss<Duration>::is_negative, std::chrono::hh_mm_ss<Duration>::hours, std::chrono::hh_mm_ss<Duration>::minutes, std::chrono::hh_mm_ss<Duration>::seconds, std::chrono::hh_mm_ss<Duration>::subseconds"}, {"name": "std::chrono::hh_mm_ss<Duration>:: std::chrono::hh_mm_ss<Duration>::std::chrono::hh_mm_ss<Duration>::operator precision, std::chrono::hh_mm_ss<Duration>::to_duration", "type": "cpp", "path": "cpp\\chrono\\hh_mm_ss\\duration.html", "desc": "std::chrono::hh_mm_ss<Duration>:: std::chrono::hh_mm_ss<Duration>::std::chrono::hh_mm_ss<Duration>::operator precision, std::chrono::hh_mm_ss<Duration>::to_duration"}, {"name": "std::std::formatter<std::chrono::hh_mm_ss>", "type": "cpp", "path": "cpp\\chrono\\hh_mm_ss\\formatter.html", "desc": "std::std::formatter<std::chrono::hh_mm_ss>"}, {"name": "std::chrono::hh_mm_ss<Duration>::std::chrono::hh_mm_ss<Duration>::hh_mm_ss", "type": "cpp", "path": "cpp\\chrono\\hh_mm_ss\\hh_mm_ss.html", "desc": "std::chrono::hh_mm_ss<Duration>::std::chrono::hh_mm_ss<Duration>::hh_mm_ss"}, {"name": "std::chrono::std::chrono::operator<<(std::chrono::hh_mm_ss)", "type": "cpp", "path": "cpp\\chrono\\hh_mm_ss\\operator_ltlt.html", "desc": "std::chrono::std::chrono::operator<<(std::chrono::hh_mm_ss)"}, {"name": "std::chrono::high_resolution_clock::std::chrono::high_resolution_clock::now", "type": "cpp", "path": "cpp\\chrono\\high_resolution_clock\\now.html", "desc": "std::chrono::high_resolution_clock::std::chrono::high_resolution_clock::now"}, {"name": "std::chrono::leap_second::std::chrono::leap_second::date", "type": "cpp", "path": "cpp\\chrono\\leap_second\\date.html", "desc": "std::chrono::leap_second::std::chrono::leap_second::date"}, {"name": "std:: <std::chrono::leap_second>std::hash<std::chrono::leap_second>", "type": "cpp", "path": "cpp\\chrono\\leap_second\\hash.html", "desc": "std:: <std::chrono::leap_second>std::hash<std::chrono::leap_second>"}, {"name": "std::chrono:: (std::chrono::leap_second)std::chrono::operator==,<,<=,>,>=,<=>(std::chrono::leap_second)", "type": "cpp", "path": "cpp\\chrono\\leap_second\\operator_cmp.html", "desc": "std::chrono:: (std::chrono::leap_second)std::chrono::operator==,<,<=,>,>=,<=>(std::chrono::leap_second)"}, {"name": "std::std::formatter<std::chrono::local_info>", "type": "cpp", "path": "cpp\\chrono\\local_info\\formatter.html", "desc": "std::std::formatter<std::chrono::local_info>"}, {"name": "std::chrono:: (std::chrono::local_info)std::chrono::operator<< (std::chrono::local_info)", "type": "cpp", "path": "cpp\\chrono\\local_info\\operator_ltlt.html", "desc": "std::chrono:: (std::chrono::local_info)std::chrono::operator<< (std::chrono::local_info)"}, {"name": "std:: <std::chrono::local_time> std:: chrono::std::formatter<std::chrono::local_time>, std::chrono::local_time_format", "type": "cpp", "path": "cpp\\chrono\\local_t\\formatter.html", "desc": "std:: <std::chrono::local_time> std:: chrono::std::formatter<std::chrono::local_time>, std::chrono::local_time_format"}, {"name": "std::chrono:: (std::chrono::local_time)std::chrono::from_stream (std::chrono::local_time)", "type": "cpp", "path": "cpp\\chrono\\local_t\\from_stream.html", "desc": "std::chrono:: (std::chrono::local_time)std::chrono::from_stream (std::chrono::local_time)"}, {"name": "std::chrono:: (std::chrono::local_time)std::chrono::operator<<(std::chrono::local_time)", "type": "cpp", "path": "cpp\\chrono\\local_t\\operator_ltlt.html", "desc": "std::chrono:: (std::chrono::local_time)std::chrono::operator<<(std::chrono::local_time)"}, {"name": "std::std::formatter<std::chrono::month>", "type": "cpp", "path": "cpp\\chrono\\month\\formatter.html", "desc": "std::std::formatter<std::chrono::month>"}, {"name": "std::chrono:: (std::chrono::month)std::chrono::from_stream (std::chrono::month)", "type": "cpp", "path": "cpp\\chrono\\month\\from_stream.html", "desc": "std::chrono:: (std::chrono::month)std::chrono::from_stream (std::chrono::month)"}, {"name": "std:: <std::chrono::month>std::hash<std::chrono::month>", "type": "cpp", "path": "cpp\\chrono\\month\\hash.html", "desc": "std:: <std::chrono::month>std::hash<std::chrono::month>"}, {"name": "std::chrono::month::std::chrono::month::month", "type": "cpp", "path": "cpp\\chrono\\month\\month.html", "desc": "std::chrono::month::std::chrono::month::month"}, {"name": "std::chrono::month::std::chrono::month::ok", "type": "cpp", "path": "cpp\\chrono\\month\\ok.html", "desc": "std::chrono::month::std::chrono::month::ok"}, {"name": "std::chrono::month:: std::chrono::month::std::chrono::month::operator+=, std::chrono::month::operator-=", "type": "cpp", "path": "cpp\\chrono\\month\\operator_arith.html", "desc": "std::chrono::month:: std::chrono::month::std::chrono::month::operator+=, std::chrono::month::operator-="}, {"name": "std::chrono:: std::chrono:: (std::chrono::month)std::chrono::operator+, std::chrono::operator- (std::chrono::month)", "type": "cpp", "path": "cpp\\chrono\\month\\operator_arith_2.html", "desc": "std::chrono:: std::chrono:: (std::chrono::month)std::chrono::operator+, std::chrono::operator- (std::chrono::month)"}, {"name": "std::chrono:: (std::chrono::month)std::chrono::operator==,<=>(std::chrono::month)", "type": "cpp", "path": "cpp\\chrono\\month\\operator_cmp.html", "desc": "std::chrono:: (std::chrono::month)std::chrono::operator==,<=>(std::chrono::month)"}, {"name": "std::chrono::month:: std::chrono::month::std::chrono::month::operator++, std::chrono::month::operator--", "type": "cpp", "path": "cpp\\chrono\\month\\operator_inc_dec.html", "desc": "std::chrono::month:: std::chrono::month::std::chrono::month::operator++, std::chrono::month::operator--"}, {"name": "std::chrono::std::chrono::operator<<(std::chrono::month)", "type": "cpp", "path": "cpp\\chrono\\month\\operator_ltlt.html", "desc": "std::chrono::std::chrono::operator<<(std::chrono::month)"}, {"name": "std::chrono::month::std::chrono::month::operator unsigned", "type": "cpp", "path": "cpp\\chrono\\month\\operator_unsigned.html", "desc": "std::chrono::month::std::chrono::month::operator unsigned"}, {"name": "std::chrono::month_day:: std::chrono::month_day::std::chrono::month_day::month, std::chrono::month_day::day", "type": "cpp", "path": "cpp\\chrono\\month_day\\accessors.html", "desc": "std::chrono::month_day:: std::chrono::month_day::std::chrono::month_day::month, std::chrono::month_day::day"}, {"name": "std::std::formatter<std::chrono::month_day>", "type": "cpp", "path": "cpp\\chrono\\month_day\\formatter.html", "desc": "std::std::formatter<std::chrono::month_day>"}, {"name": "std::chrono:: (std::chrono::month_day)std::chrono::from_stream (std::chrono::month_day)", "type": "cpp", "path": "cpp\\chrono\\month_day\\from_stream.html", "desc": "std::chrono:: (std::chrono::month_day)std::chrono::from_stream (std::chrono::month_day)"}, {"name": "std:: <std::chrono::month_day>std::hash<std::chrono::month_day>", "type": "cpp", "path": "cpp\\chrono\\month_day\\hash.html", "desc": "std:: <std::chrono::month_day>std::hash<std::chrono::month_day>"}, {"name": "std::chrono::month_day::std::chrono::month_day::month_day", "type": "cpp", "path": "cpp\\chrono\\month_day\\month_day.html", "desc": "std::chrono::month_day::std::chrono::month_day::month_day"}, {"name": "std::chrono::month_day::std::chrono::month_day::ok", "type": "cpp", "path": "cpp\\chrono\\month_day\\ok.html", "desc": "std::chrono::month_day::std::chrono::month_day::ok"}, {"name": "std::chrono:: (std::chrono::month_day)std::chrono::operator==,<=>(std::chrono::month_day)", "type": "cpp", "path": "cpp\\chrono\\month_day\\operator_cmp.html", "desc": "std::chrono:: (std::chrono::month_day)std::chrono::operator==,<=>(std::chrono::month_day)"}, {"name": "std::chrono::std::chrono::operator<<(std::chrono::month_day)", "type": "cpp", "path": "cpp\\chrono\\month_day\\operator_ltlt.html", "desc": "std::chrono::std::chrono::operator<<(std::chrono::month_day)"}, {"name": "std::std::formatter<std::chrono::month_day_last>", "type": "cpp", "path": "cpp\\chrono\\month_day_last\\formatter.html", "desc": "std::std::formatter<std::chrono::month_day_last>"}, {"name": "std:: <std::chrono::month_day_last>std::hash<std::chrono::month_day_last>", "type": "cpp", "path": "cpp\\chrono\\month_day_last\\hash.html", "desc": "std:: <std::chrono::month_day_last>std::hash<std::chrono::month_day_last>"}, {"name": "std::chrono::month_day_last::std::chrono::month_day_last::month", "type": "cpp", "path": "cpp\\chrono\\month_day_last\\month.html", "desc": "std::chrono::month_day_last::std::chrono::month_day_last::month"}, {"name": "std::chrono::month_day_last::std::chrono::month_day_last::month_day_last", "type": "cpp", "path": "cpp\\chrono\\month_day_last\\month_day_last.html", "desc": "std::chrono::month_day_last::std::chrono::month_day_last::month_day_last"}, {"name": "std::chrono::month_day_last::std::chrono::month_day_last::ok", "type": "cpp", "path": "cpp\\chrono\\month_day_last\\ok.html", "desc": "std::chrono::month_day_last::std::chrono::month_day_last::ok"}, {"name": "std::chrono:: (std::chrono::month_day_last)std::chrono::operator==,<=>(std::chrono::month_day_last)", "type": "cpp", "path": "cpp\\chrono\\month_day_last\\operator_cmp.html", "desc": "std::chrono:: (std::chrono::month_day_last)std::chrono::operator==,<=>(std::chrono::month_day_last)"}, {"name": "std::chrono::std::chrono::operator<<(std::chrono::month_day_last)", "type": "cpp", "path": "cpp\\chrono\\month_day_last\\operator_ltlt.html", "desc": "std::chrono::std::chrono::operator<<(std::chrono::month_day_last)"}, {"name": "std::chrono::month_weekday:: std::chrono::month_weekday::std::chrono::month_weekday::month, std::chrono::month_weekday::weekday_indexed", "type": "cpp", "path": "cpp\\chrono\\month_weekday\\accessors.html", "desc": "std::chrono::month_weekday:: std::chrono::month_weekday::std::chrono::month_weekday::month, std::chrono::month_weekday::weekday_indexed"}, {"name": "std::std::formatter<std::chrono::month_weekday>", "type": "cpp", "path": "cpp\\chrono\\month_weekday\\formatter.html", "desc": "std::std::formatter<std::chrono::month_weekday>"}, {"name": "std:: <std::chrono::month_weekday>std::hash<std::chrono::month_weekday>", "type": "cpp", "path": "cpp\\chrono\\month_weekday\\hash.html", "desc": "std:: <std::chrono::month_weekday>std::hash<std::chrono::month_weekday>"}, {"name": "std::chrono::month_weekday::std::chrono::month_weekday::month_weekday", "type": "cpp", "path": "cpp\\chrono\\month_weekday\\month_weekday.html", "desc": "std::chrono::month_weekday::std::chrono::month_weekday::month_weekday"}, {"name": "std::chrono::month_weekday::std::chrono::month_weekday::ok", "type": "cpp", "path": "cpp\\chrono\\month_weekday\\ok.html", "desc": "std::chrono::month_weekday::std::chrono::month_weekday::ok"}, {"name": "std::chrono:: (std::chrono::month_weekday)std::chrono::operator==(std::chrono::month_weekday)", "type": "cpp", "path": "cpp\\chrono\\month_weekday\\operator_cmp.html", "desc": "std::chrono:: (std::chrono::month_weekday)std::chrono::operator==(std::chrono::month_weekday)"}, {"name": "std::chrono::std::chrono::operator<<(std::chrono::month_weekday)", "type": "cpp", "path": "cpp\\chrono\\month_weekday\\operator_ltlt.html", "desc": "std::chrono::std::chrono::operator<<(std::chrono::month_weekday)"}, {"name": "std::chrono::month_weekday_last:: std::chrono::month_weekday_last::std::chrono::month_weekday_last::month, std::chrono::month_weekday_last::weekday_last", "type": "cpp", "path": "cpp\\chrono\\month_weekday_last\\accessors.html", "desc": "std::chrono::month_weekday_last:: std::chrono::month_weekday_last::std::chrono::month_weekday_last::month, std::chrono::month_weekday_last::weekday_last"}, {"name": "std::std::formatter<std::chrono::month_weekday_last>", "type": "cpp", "path": "cpp\\chrono\\month_weekday_last\\formatter.html", "desc": "std::std::formatter<std::chrono::month_weekday_last>"}, {"name": "std:: <std::chrono::month_weekday_last>std::hash<std::chrono::month_weekday_last>", "type": "cpp", "path": "cpp\\chrono\\month_weekday_last\\hash.html", "desc": "std:: <std::chrono::month_weekday_last>std::hash<std::chrono::month_weekday_last>"}, {"name": "std::chrono::month_weekday_last::std::chrono::month_weekday_last::month_weekday_last", "type": "cpp", "path": "cpp\\chrono\\month_weekday_last\\month_weekday_last.html", "desc": "std::chrono::month_weekday_last::std::chrono::month_weekday_last::month_weekday_last"}, {"name": "std::chrono::month_weekday_last::std::chrono::month_weekday_last::ok", "type": "cpp", "path": "cpp\\chrono\\month_weekday_last\\ok.html", "desc": "std::chrono::month_weekday_last::std::chrono::month_weekday_last::ok"}, {"name": "std::chrono:: (std::chrono::month_weekday_last)std::chrono::operator==(std::chrono::month_weekday_last)", "type": "cpp", "path": "cpp\\chrono\\month_weekday_last\\operator_cmp.html", "desc": "std::chrono:: (std::chrono::month_weekday_last)std::chrono::operator==(std::chrono::month_weekday_last)"}, {"name": "std::chrono::std::chrono::operator<<(std::chrono::month_weekday_last)", "type": "cpp", "path": "cpp\\chrono\\month_weekday_last\\operator_ltlt.html", "desc": "std::chrono::std::chrono::operator<<(std::chrono::month_weekday_last)"}, {"name": "std::chrono::steady_clock::std::chrono::steady_clock::now", "type": "cpp", "path": "cpp\\chrono\\steady_clock\\now.html", "desc": "std::chrono::steady_clock::std::chrono::steady_clock::now"}, {"name": "std::std::formatter<std::chrono::sys_time>", "type": "cpp", "path": "cpp\\chrono\\system_clock\\formatter.html", "desc": "std::std::formatter<std::chrono::sys_time>"}, {"name": "std::chrono:: (std::chrono::sys_time)std::chrono::from_stream (std::chrono::sys_time)", "type": "cpp", "path": "cpp\\chrono\\system_clock\\from_stream.html", "desc": "std::chrono:: (std::chrono::sys_time)std::chrono::from_stream (std::chrono::sys_time)"}, {"name": "std::chrono::system_clock::std::chrono::system_clock::from_time_t", "type": "cpp", "path": "cpp\\chrono\\system_clock\\from_time_t.html", "desc": "std::chrono::system_clock::std::chrono::system_clock::from_time_t"}, {"name": "std::chrono::system_clock::std::chrono::system_clock::now", "type": "cpp", "path": "cpp\\chrono\\system_clock\\now.html", "desc": "std::chrono::system_clock::std::chrono::system_clock::now"}, {"name": "std::chrono::std::chrono::operator<<(std::chrono::sys_time)", "type": "cpp", "path": "cpp\\chrono\\system_clock\\operator_ltlt.html", "desc": "std::chrono::std::chrono::operator<<(std::chrono::sys_time)"}, {"name": "std::chrono::system_clock::std::chrono::system_clock::to_time_t", "type": "cpp", "path": "cpp\\chrono\\system_clock\\to_time_t.html", "desc": "std::chrono::system_clock::std::chrono::system_clock::to_time_t"}, {"name": "std::std::formatter<std::chrono::sys_info>", "type": "cpp", "path": "cpp\\chrono\\sys_info\\formatter.html", "desc": "std::std::formatter<std::chrono::sys_info>"}, {"name": "std::chrono:: (std::chrono::sys_info)std::chrono::operator<< (std::chrono::sys_info)", "type": "cpp", "path": "cpp\\chrono\\sys_info\\operator_ltlt.html", "desc": "std::chrono:: (std::chrono::sys_info)std::chrono::operator<< (std::chrono::sys_info)"}, {"name": "std::std::formatter<std::chrono::tai_time>", "type": "cpp", "path": "cpp\\chrono\\tai_clock\\formatter.html", "desc": "std::std::formatter<std::chrono::tai_time>"}, {"name": "std::chrono:: (std::chrono::tai_time)std::chrono::from_stream (std::chrono::tai_time)", "type": "cpp", "path": "cpp\\chrono\\tai_clock\\from_stream.html", "desc": "std::chrono:: (std::chrono::tai_time)std::chrono::from_stream (std::chrono::tai_time)"}, {"name": "std::chrono::tai_clock::std::chrono::tai_clock::from_utc", "type": "cpp", "path": "cpp\\chrono\\tai_clock\\from_utc.html", "desc": "std::chrono::tai_clock::std::chrono::tai_clock::from_utc"}, {"name": "std::chrono::tai_clock::std::chrono::tai_clock::now", "type": "cpp", "path": "cpp\\chrono\\tai_clock\\now.html", "desc": "std::chrono::tai_clock::std::chrono::tai_clock::now"}, {"name": "std::chrono::std::chrono::operator<<(std::chrono::tai_time)", "type": "cpp", "path": "cpp\\chrono\\tai_clock\\operator_ltlt.html", "desc": "std::chrono::std::chrono::operator<<(std::chrono::tai_time)"}, {"name": "std::chrono::tai_clock::std::chrono::tai_clock::to_utc", "type": "cpp", "path": "cpp\\chrono\\tai_clock\\to_utc.html", "desc": "std::chrono::tai_clock::std::chrono::tai_clock::to_utc"}, {"name": "std::chrono::std::chrono::ceil(std::chrono::time_point)", "type": "cpp", "path": "cpp\\chrono\\time_point\\ceil.html", "desc": "std::chrono::std::chrono::ceil(std::chrono::time_point)"}, {"name": "std::std::common_type(std::chrono::time_point)", "type": "cpp", "path": "cpp\\chrono\\time_point\\common_type.html", "desc": "std::std::common_type(std::chrono::time_point)"}, {"name": "std::chrono::std::chrono::floor(std::chrono::time_point)", "type": "cpp", "path": "cpp\\chrono\\time_point\\floor.html", "desc": "std::chrono::std::chrono::floor(std::chrono::time_point)"}, {"name": "std:: <std::chrono::time_point>std::hash<std::chrono::time_point>", "type": "cpp", "path": "cpp\\chrono\\time_point\\hash.html", "desc": "std:: <std::chrono::time_point>std::hash<std::chrono::time_point>"}, {"name": "std::chrono::time_point<Clock,Duration>::std::chrono::time_point<Clock,Duration>::max", "type": "cpp", "path": "cpp\\chrono\\time_point\\max.html", "desc": "std::chrono::time_point<Clock,Duration>::std::chrono::time_point<Clock,Duration>::max"}, {"name": "std::chrono::time_point<Clock,Duration>::std::chrono::time_point<Clock,Duration>::min", "type": "cpp", "path": "cpp\\chrono\\time_point\\min.html", "desc": "std::chrono::time_point<Clock,Duration>::std::chrono::time_point<Clock,Duration>::min"}, {"name": "std::chrono::time_point<Clock,Duration>::std::chrono::time_point<Clock,Duration>::operator+, operator-", "type": "cpp", "path": "cpp\\chrono\\time_point\\operator_arith.html", "desc": "std::chrono::time_point<Clock,Duration>::std::chrono::time_point<Clock,Duration>::operator+, operator-"}, {"name": "(std::chrono::time_point)operator+, operator-(std::chrono::time_point)", "type": "cpp", "path": "cpp\\chrono\\time_point\\operator_arith2.html", "desc": "(std::chrono::time_point)operator+, operator-(std::chrono::time_point)"}, {"name": "operator==,!=,<,<=,>,>=,<=>(std::chrono::time_point)", "type": "cpp", "path": "cpp\\chrono\\time_point\\operator_cmp.html", "desc": "operator==,!=,<,<=,>,>=,<=>(std::chrono::time_point)"}, {"name": "std::chrono::time_point<Clock,Duration>:: std::chrono::time_point<Clock,Duration>::std::chrono::time_point<Clock,Duration>::operator++, std::chrono::time_point<Clock,Duration>::operator--", "type": "cpp", "path": "cpp\\chrono\\time_point\\operator_inc_dec.html", "desc": "std::chrono::time_point<Clock,Duration>:: std::chrono::time_point<Clock,Duration>::std::chrono::time_point<Clock,Duration>::operator++, std::chrono::time_point<Clock,Duration>::operator--"}, {"name": "std::chrono::std::chrono::round(std::chrono::time_point)", "type": "cpp", "path": "cpp\\chrono\\time_point\\round.html", "desc": "std::chrono::std::chrono::round(std::chrono::time_point)"}, {"name": "std::chrono::time_point<Clock,Duration>::std::chrono::time_point<Clock,Duration>::time_point", "type": "cpp", "path": "cpp\\chrono\\time_point\\time_point.html", "desc": "std::chrono::time_point<Clock,Duration>::std::chrono::time_point<Clock,Duration>::time_point"}, {"name": "std::chrono::std::chrono::time_point_cast", "type": "cpp", "path": "cpp\\chrono\\time_point\\time_point_cast.html", "desc": "std::chrono::std::chrono::time_point_cast"}, {"name": "std::chrono::time_point<Clock,Duration>::std::chrono::time_point<Clock,Duration>::time_since_epoch", "type": "cpp", "path": "cpp\\chrono\\time_point\\time_since_epoch.html", "desc": "std::chrono::time_point<Clock,Duration>::std::chrono::time_point<Clock,Duration>::time_since_epoch"}, {"name": "std::chrono::time_zone::std::chrono::time_zone::get_info", "type": "cpp", "path": "cpp\\chrono\\time_zone\\get_info.html", "desc": "std::chrono::time_zone::std::chrono::time_zone::get_info"}, {"name": "std::chrono::time_zone::std::chrono::time_zone::name", "type": "cpp", "path": "cpp\\chrono\\time_zone\\name.html", "desc": "std::chrono::time_zone::std::chrono::time_zone::name"}, {"name": "std::chrono:: (std::chrono::time_zone)std::chrono::operator==,<=>(std::chrono::time_zone)", "type": "cpp", "path": "cpp\\chrono\\time_zone\\operator_cmp.html", "desc": "std::chrono:: (std::chrono::time_zone)std::chrono::operator==,<=>(std::chrono::time_zone)"}, {"name": "std::chrono::time_zone::std::chrono::time_zone::to_local", "type": "cpp", "path": "cpp\\chrono\\time_zone\\to_local.html", "desc": "std::chrono::time_zone::std::chrono::time_zone::to_local"}, {"name": "std::chrono::time_zone::std::chrono::time_zone::to_sys", "type": "cpp", "path": "cpp\\chrono\\time_zone\\to_sys.html", "desc": "std::chrono::time_zone::std::chrono::time_zone::to_sys"}, {"name": "std::chrono::time_zone_link:: std::chrono::time_zone_link::std::chrono::time_zone_link::name, std::chrono::time_zone_link::target", "type": "cpp", "path": "cpp\\chrono\\time_zone_link\\accessors.html", "desc": "std::chrono::time_zone_link:: std::chrono::time_zone_link::std::chrono::time_zone_link::name, std::chrono::time_zone_link::target"}, {"name": "std::chrono:: (std::chrono::time_zone_link)std::chrono::operator==,<=>(std::chrono::time_zone_link)", "type": "cpp", "path": "cpp\\chrono\\time_zone_link\\operator_cmp.html", "desc": "std::chrono:: (std::chrono::time_zone_link)std::chrono::operator==,<=>(std::chrono::time_zone_link)"}, {"name": "std::chrono::tzdb::std::chrono::tzdb::current_zone", "type": "cpp", "path": "cpp\\chrono\\tzdb\\current_zone.html", "desc": "std::chrono::tzdb::std::chrono::tzdb::current_zone"}, {"name": "std::chrono::tzdb::std::chrono::tzdb::locate_zone", "type": "cpp", "path": "cpp\\chrono\\tzdb\\locate_zone.html", "desc": "std::chrono::tzdb::std::chrono::tzdb::locate_zone"}, {"name": "std::chrono::tzdb_list::std::chrono::tzdb_list::begin", "type": "cpp", "path": "cpp\\chrono\\tzdb_list\\begin.html", "desc": "std::chrono::tzdb_list::std::chrono::tzdb_list::begin"}, {"name": "std::chrono::tzdb_list:: std::chrono::tzdb_list::std::chrono::tzdb_list::end, std::chrono::tzdb_list::cend", "type": "cpp", "path": "cpp\\chrono\\tzdb_list\\end.html", "desc": "std::chrono::tzdb_list:: std::chrono::tzdb_list::std::chrono::tzdb_list::end, std::chrono::tzdb_list::cend"}, {"name": "std::chrono::tzdb_list::std::chrono::tzdb_list::erase_after", "type": "cpp", "path": "cpp\\chrono\\tzdb_list\\erase_after.html", "desc": "std::chrono::tzdb_list::std::chrono::tzdb_list::erase_after"}, {"name": "std::chrono::tzdb_list::std::chrono::tzdb_list::front", "type": "cpp", "path": "cpp\\chrono\\tzdb_list\\front.html", "desc": "std::chrono::tzdb_list::std::chrono::tzdb_list::front"}, {"name": "std::std::formatter<std::chrono::utc_time>", "type": "cpp", "path": "cpp\\chrono\\utc_clock\\formatter.html", "desc": "std::std::formatter<std::chrono::utc_time>"}, {"name": "std::chrono:: (std::chrono::utc_time)std::chrono::from_stream (std::chrono::utc_time)", "type": "cpp", "path": "cpp\\chrono\\utc_clock\\from_stream.html", "desc": "std::chrono:: (std::chrono::utc_time)std::chrono::from_stream (std::chrono::utc_time)"}, {"name": "std::chrono::utc_clock::std::chrono::utc_clock::from_sys", "type": "cpp", "path": "cpp\\chrono\\utc_clock\\from_sys.html", "desc": "std::chrono::utc_clock::std::chrono::utc_clock::from_sys"}, {"name": "std::chrono::std::chrono::get_leap_second_info", "type": "cpp", "path": "cpp\\chrono\\utc_clock\\get_leap_second_info.html", "desc": "std::chrono::std::chrono::get_leap_second_info"}, {"name": "std::chrono::std::chrono::leap_second_info", "type": "cpp", "path": "cpp\\chrono\\utc_clock\\leap_second_info.html", "desc": "std::chrono::std::chrono::leap_second_info"}, {"name": "std::chrono::utc_clock::std::chrono::utc_clock::now", "type": "cpp", "path": "cpp\\chrono\\utc_clock\\now.html", "desc": "std::chrono::utc_clock::std::chrono::utc_clock::now"}, {"name": "std::chrono::std::chrono::operator<<(std::chrono::utc_time)", "type": "cpp", "path": "cpp\\chrono\\utc_clock\\operator_ltlt.html", "desc": "std::chrono::std::chrono::operator<<(std::chrono::utc_time)"}, {"name": "std::chrono::utc_clock::std::chrono::utc_clock::to_sys", "type": "cpp", "path": "cpp\\chrono\\utc_clock\\to_sys.html", "desc": "std::chrono::utc_clock::std::chrono::utc_clock::to_sys"}, {"name": "std::chrono::weekday:: std::chrono::weekday::std::chrono::weekday::c_encoding, std::chrono::weekday::iso_encoding", "type": "cpp", "path": "cpp\\chrono\\weekday\\encoding.html", "desc": "std::chrono::weekday:: std::chrono::weekday::std::chrono::weekday::c_encoding, std::chrono::weekday::iso_encoding"}, {"name": "std::std::formatter<std::chrono::weekday>", "type": "cpp", "path": "cpp\\chrono\\weekday\\formatter.html", "desc": "std::std::formatter<std::chrono::weekday>"}, {"name": "std::chrono:: (std::chrono::weekday)std::chrono::from_stream (std::chrono::weekday)", "type": "cpp", "path": "cpp\\chrono\\weekday\\from_stream.html", "desc": "std::chrono:: (std::chrono::weekday)std::chrono::from_stream (std::chrono::weekday)"}, {"name": "std:: <std::chrono::weekday>std::hash<std::chrono::weekday>", "type": "cpp", "path": "cpp\\chrono\\weekday\\hash.html", "desc": "std:: <std::chrono::weekday>std::hash<std::chrono::weekday>"}, {"name": "std::chrono::weekday::std::chrono::weekday::ok", "type": "cpp", "path": "cpp\\chrono\\weekday\\ok.html", "desc": "std::chrono::weekday::std::chrono::weekday::ok"}, {"name": "std::chrono::weekday:: std::chrono::weekday::std::chrono::weekday::operator+=, std::chrono::weekday::operator-=", "type": "cpp", "path": "cpp\\chrono\\weekday\\operator_arith.html", "desc": "std::chrono::weekday:: std::chrono::weekday::std::chrono::weekday::operator+=, std::chrono::weekday::operator-="}, {"name": "std::chrono:: std::chrono:: (std::chrono::weekday)std::chrono::operator+, std::chrono::operator- (std::chrono::weekday)", "type": "cpp", "path": "cpp\\chrono\\weekday\\operator_arith_2.html", "desc": "std::chrono:: std::chrono:: (std::chrono::weekday)std::chrono::operator+, std::chrono::operator- (std::chrono::weekday)"}, {"name": "std::chrono::weekday::std::chrono::weekday::operator[]", "type": "cpp", "path": "cpp\\chrono\\weekday\\operator_at.html", "desc": "std::chrono::weekday::std::chrono::weekday::operator[]"}, {"name": "std::chrono:: (std::chrono::weekday)std::chrono::operator==(std::chrono::weekday)", "type": "cpp", "path": "cpp\\chrono\\weekday\\operator_cmp.html", "desc": "std::chrono:: (std::chrono::weekday)std::chrono::operator==(std::chrono::weekday)"}, {"name": "std::chrono::weekday:: std::chrono::weekday::std::chrono::weekday::operator++, std::chrono::weekday::operator--", "type": "cpp", "path": "cpp\\chrono\\weekday\\operator_inc_dec.html", "desc": "std::chrono::weekday:: std::chrono::weekday::std::chrono::weekday::operator++, std::chrono::weekday::operator--"}, {"name": "std::chrono::std::chrono::operator<<(std::chrono::weekday)", "type": "cpp", "path": "cpp\\chrono\\weekday\\operator_ltlt.html", "desc": "std::chrono::std::chrono::operator<<(std::chrono::weekday)"}, {"name": "std::chrono::weekday::std::chrono::weekday::weekday", "type": "cpp", "path": "cpp\\chrono\\weekday\\weekday.html", "desc": "std::chrono::weekday::std::chrono::weekday::weekday"}, {"name": "std::std::formatter<std::chrono::weekday_indexed>", "type": "cpp", "path": "cpp\\chrono\\weekday_indexed\\formatter.html", "desc": "std::std::formatter<std::chrono::weekday_indexed>"}, {"name": "std:: <std::chrono::weekday_indexed>std::hash<std::chrono::weekday_indexed>", "type": "cpp", "path": "cpp\\chrono\\weekday_indexed\\hash.html", "desc": "std:: <std::chrono::weekday_indexed>std::hash<std::chrono::weekday_indexed>"}, {"name": "std::chrono::weekday_indexed::std::chrono::weekday_indexed::index", "type": "cpp", "path": "cpp\\chrono\\weekday_indexed\\index.html", "desc": "std::chrono::weekday_indexed::std::chrono::weekday_indexed::index"}, {"name": "std::chrono::weekday_indexed::std::chrono::weekday_indexed::ok", "type": "cpp", "path": "cpp\\chrono\\weekday_indexed\\ok.html", "desc": "std::chrono::weekday_indexed::std::chrono::weekday_indexed::ok"}, {"name": "std::chrono:: (std::chrono::weekday_indexed)std::chrono::operator==(std::chrono::weekday_indexed)", "type": "cpp", "path": "cpp\\chrono\\weekday_indexed\\operator_cmp.html", "desc": "std::chrono:: (std::chrono::weekday_indexed)std::chrono::operator==(std::chrono::weekday_indexed)"}, {"name": "std::chrono::std::chrono::operator<<(std::chrono::weekday_indexed)", "type": "cpp", "path": "cpp\\chrono\\weekday_indexed\\operator_ltlt.html", "desc": "std::chrono::std::chrono::operator<<(std::chrono::weekday_indexed)"}, {"name": "std::chrono::weekday_indexed::std::chrono::weekday_indexed::weekday", "type": "cpp", "path": "cpp\\chrono\\weekday_indexed\\weekday.html", "desc": "std::chrono::weekday_indexed::std::chrono::weekday_indexed::weekday"}, {"name": "std::chrono::weekday_indexed::std::chrono::weekday_indexed::weekday_indexed", "type": "cpp", "path": "cpp\\chrono\\weekday_indexed\\weekday_indexed.html", "desc": "std::chrono::weekday_indexed::std::chrono::weekday_indexed::weekday_indexed"}, {"name": "std::std::formatter<std::chrono::weekday_last>", "type": "cpp", "path": "cpp\\chrono\\weekday_last\\formatter.html", "desc": "std::std::formatter<std::chrono::weekday_last>"}, {"name": "std:: <std::chrono::weekday_last>std::hash<std::chrono::weekday_last>", "type": "cpp", "path": "cpp\\chrono\\weekday_last\\hash.html", "desc": "std:: <std::chrono::weekday_last>std::hash<std::chrono::weekday_last>"}, {"name": "std::chrono::weekday_last::std::chrono::weekday_last::ok", "type": "cpp", "path": "cpp\\chrono\\weekday_last\\ok.html", "desc": "std::chrono::weekday_last::std::chrono::weekday_last::ok"}, {"name": "std::chrono:: (std::chrono::weekday_last)std::chrono::operator==(std::chrono::weekday_last)", "type": "cpp", "path": "cpp\\chrono\\weekday_last\\operator_cmp.html", "desc": "std::chrono:: (std::chrono::weekday_last)std::chrono::operator==(std::chrono::weekday_last)"}, {"name": "std::chrono::std::chrono::operator<<(std::chrono::weekday_last)", "type": "cpp", "path": "cpp\\chrono\\weekday_last\\operator_ltlt.html", "desc": "std::chrono::std::chrono::operator<<(std::chrono::weekday_last)"}, {"name": "std::chrono::weekday_last::std::chrono::weekday_last::weekday", "type": "cpp", "path": "cpp\\chrono\\weekday_last\\weekday.html", "desc": "std::chrono::weekday_last::std::chrono::weekday_last::weekday"}, {"name": "std::chrono::weekday_last::std::chrono::weekday_last::weekday_last", "type": "cpp", "path": "cpp\\chrono\\weekday_last\\weekday_last.html", "desc": "std::chrono::weekday_last::std::chrono::weekday_last::weekday_last"}, {"name": "std:: <std::chrono::year>std::formatter<std::chrono::year>", "type": "cpp", "path": "cpp\\chrono\\year\\formatter.html", "desc": "std:: <std::chrono::year>std::formatter<std::chrono::year>"}, {"name": "std::chrono:: (std::chrono::year)std::chrono::from_stream (std::chrono::year)", "type": "cpp", "path": "cpp\\chrono\\year\\from_stream.html", "desc": "std::chrono:: (std::chrono::year)std::chrono::from_stream (std::chrono::year)"}, {"name": "std:: <std::chrono::year>std::hash<std::chrono::year>", "type": "cpp", "path": "cpp\\chrono\\year\\hash.html", "desc": "std:: <std::chrono::year>std::hash<std::chrono::year>"}, {"name": "std::chrono::year::std::chrono::year::is_leap", "type": "cpp", "path": "cpp\\chrono\\year\\is_leap.html", "desc": "std::chrono::year::std::chrono::year::is_leap"}, {"name": "std::chrono::year::std::chrono::year::max", "type": "cpp", "path": "cpp\\chrono\\year\\max.html", "desc": "std::chrono::year::std::chrono::year::max"}, {"name": "std::chrono::year::std::chrono::year::min", "type": "cpp", "path": "cpp\\chrono\\year\\min.html", "desc": "std::chrono::year::std::chrono::year::min"}, {"name": "std::chrono::year::std::chrono::year::ok", "type": "cpp", "path": "cpp\\chrono\\year\\ok.html", "desc": "std::chrono::year::std::chrono::year::ok"}, {"name": "std::chrono::year:: std::chrono::year::std::chrono::year::operator+=, std::chrono::year::operator-=", "type": "cpp", "path": "cpp\\chrono\\year\\operator_arith.html", "desc": "std::chrono::year:: std::chrono::year::std::chrono::year::operator+=, std::chrono::year::operator-="}, {"name": "std::chrono:: std::chrono:: (std::chrono::year)std::chrono::operator+, std::chrono::operator- (std::chrono::year)", "type": "cpp", "path": "cpp\\chrono\\year\\operator_arith_2.html", "desc": "std::chrono:: std::chrono:: (std::chrono::year)std::chrono::operator+, std::chrono::operator- (std::chrono::year)"}, {"name": "std::chrono:: (std::chrono::year)std::chrono::operator==,<=>(std::chrono::year)", "type": "cpp", "path": "cpp\\chrono\\year\\operator_cmp.html", "desc": "std::chrono:: (std::chrono::year)std::chrono::operator==,<=>(std::chrono::year)"}, {"name": "std::chrono::year:: std::chrono::year::std::chrono::year::operator++, std::chrono::year::operator--", "type": "cpp", "path": "cpp\\chrono\\year\\operator_inc_dec.html", "desc": "std::chrono::year:: std::chrono::year::std::chrono::year::operator++, std::chrono::year::operator--"}, {"name": "std::chrono::year::std::chrono::year::operator int", "type": "cpp", "path": "cpp\\chrono\\year\\operator_int.html", "desc": "std::chrono::year::std::chrono::year::operator int"}, {"name": "std::chrono:: (std::chrono::year)std::chrono::operator<<(std::chrono::year)", "type": "cpp", "path": "cpp\\chrono\\year\\operator_ltlt.html", "desc": "std::chrono:: (std::chrono::year)std::chrono::operator<<(std::chrono::year)"}, {"name": "std::chrono::year:: std::chrono::year::std::chrono::year::operator+, std::chrono::year::operator-", "type": "cpp", "path": "cpp\\chrono\\year\\operator_sign.html", "desc": "std::chrono::year:: std::chrono::year::std::chrono::year::operator+, std::chrono::year::operator-"}, {"name": "std::chrono::year::std::chrono::year::year", "type": "cpp", "path": "cpp\\chrono\\year\\year.html", "desc": "std::chrono::year::std::chrono::year::year"}, {"name": "std::chrono::year_month:: std::chrono::year_month::std::chrono::year_month::year, std::chrono::year_month::month", "type": "cpp", "path": "cpp\\chrono\\year_month\\accessors.html", "desc": "std::chrono::year_month:: std::chrono::year_month::std::chrono::year_month::year, std::chrono::year_month::month"}, {"name": "std::std::formatter<std::chrono::year_month>", "type": "cpp", "path": "cpp\\chrono\\year_month\\formatter.html", "desc": "std::std::formatter<std::chrono::year_month>"}, {"name": "std::chrono:: (std::chrono::year_month)std::chrono::from_stream (std::chrono::year_month)", "type": "cpp", "path": "cpp\\chrono\\year_month\\from_stream.html", "desc": "std::chrono:: (std::chrono::year_month)std::chrono::from_stream (std::chrono::year_month)"}, {"name": "std:: <std::chrono::year_month>std::hash<std::chrono::year_month>", "type": "cpp", "path": "cpp\\chrono\\year_month\\hash.html", "desc": "std:: <std::chrono::year_month>std::hash<std::chrono::year_month>"}, {"name": "std::chrono::year_month::std::chrono::year_month::ok", "type": "cpp", "path": "cpp\\chrono\\year_month\\ok.html", "desc": "std::chrono::year_month::std::chrono::year_month::ok"}, {"name": "std::chrono::year_month:: std::chrono::year_month::std::chrono::year_month::operator+=, std::chrono::year_month::operator-=", "type": "cpp", "path": "cpp\\chrono\\year_month\\operator_arith.html", "desc": "std::chrono::year_month:: std::chrono::year_month::std::chrono::year_month::operator+=, std::chrono::year_month::operator-="}, {"name": "std::chrono:: std::chrono:: (std::chrono::year_month)std::chrono::operator+, std::chrono::operator- (std::chrono::year_month)", "type": "cpp", "path": "cpp\\chrono\\year_month\\operator_arith_2.html", "desc": "std::chrono:: std::chrono:: (std::chrono::year_month)std::chrono::operator+, std::chrono::operator- (std::chrono::year_month)"}, {"name": "std::chrono:: (std::chrono::year_month)std::chrono::operator==,<=>(std::chrono::year_month)", "type": "cpp", "path": "cpp\\chrono\\year_month\\operator_cmp.html", "desc": "std::chrono:: (std::chrono::year_month)std::chrono::operator==,<=>(std::chrono::year_month)"}, {"name": "std::chrono::std::chrono::operator<<(std::chrono::year_month)", "type": "cpp", "path": "cpp\\chrono\\year_month\\operator_ltlt.html", "desc": "std::chrono::std::chrono::operator<<(std::chrono::year_month)"}, {"name": "std::chrono::year_month::std::chrono::year_month::year_month", "type": "cpp", "path": "cpp\\chrono\\year_month\\year_month.html", "desc": "std::chrono::year_month::std::chrono::year_month::year_month"}, {"name": "std::chrono::year_month_day:: std::chrono::year_month_day:: std::chrono::year_month_day::std::chrono::year_month_day::year, std::chrono::year_month_day::month, std::chrono::year_month_day::day", "type": "cpp", "path": "cpp\\chrono\\year_month_day\\accessors.html", "desc": "std::chrono::year_month_day:: std::chrono::year_month_day:: std::chrono::year_month_day::std::chrono::year_month_day::year, std::chrono::year_month_day::month, std::chrono::year_month_day::day"}, {"name": "std::std::formatter<std::chrono::year_month_day>", "type": "cpp", "path": "cpp\\chrono\\year_month_day\\formatter.html", "desc": "std::std::formatter<std::chrono::year_month_day>"}, {"name": "std::chrono:: (std::chrono::year_month_day)std::chrono::from_stream (std::chrono::year_month_day)", "type": "cpp", "path": "cpp\\chrono\\year_month_day\\from_stream.html", "desc": "std::chrono:: (std::chrono::year_month_day)std::chrono::from_stream (std::chrono::year_month_day)"}, {"name": "std:: <std::chrono::year_month_day>std::hash<std::chrono::year_month_day>", "type": "cpp", "path": "cpp\\chrono\\year_month_day\\hash.html", "desc": "std:: <std::chrono::year_month_day>std::hash<std::chrono::year_month_day>"}, {"name": "std::chrono::year_month_day::std::chrono::year_month_day::ok", "type": "cpp", "path": "cpp\\chrono\\year_month_day\\ok.html", "desc": "std::chrono::year_month_day::std::chrono::year_month_day::ok"}, {"name": "std::chrono::year_month_day:: std::chrono::year_month_day::std::chrono::year_month_day::operator+=, std::chrono::year_month_day::operator-=", "type": "cpp", "path": "cpp\\chrono\\year_month_day\\operator_arith.html", "desc": "std::chrono::year_month_day:: std::chrono::year_month_day::std::chrono::year_month_day::operator+=, std::chrono::year_month_day::operator-="}, {"name": "std::chrono:: std::chrono:: (std::chrono::year_month_day)std::chrono::operator+, std::chrono::operator- (std::chrono::year_month_day)", "type": "cpp", "path": "cpp\\chrono\\year_month_day\\operator_arith_2.html", "desc": "std::chrono:: std::chrono:: (std::chrono::year_month_day)std::chrono::operator+, std::chrono::operator- (std::chrono::year_month_day)"}, {"name": "std::chrono:: (std::chrono::year_month_day)std::chrono::operator==,<=>(std::chrono::year_month_day)", "type": "cpp", "path": "cpp\\chrono\\year_month_day\\operator_cmp.html", "desc": "std::chrono:: (std::chrono::year_month_day)std::chrono::operator==,<=>(std::chrono::year_month_day)"}, {"name": "std::chrono::year_month_day:: std::chrono::year_month_day::std::chrono::year_month_day::operator sys_days, std::chrono::year_month_day::operator local_days", "type": "cpp", "path": "cpp\\chrono\\year_month_day\\operator_days.html", "desc": "std::chrono::year_month_day:: std::chrono::year_month_day::std::chrono::year_month_day::operator sys_days, std::chrono::year_month_day::operator local_days"}, {"name": "std::chrono::std::chrono::operator<<(std::chrono::year_month_day)", "type": "cpp", "path": "cpp\\chrono\\year_month_day\\operator_ltlt.html", "desc": "std::chrono::std::chrono::operator<<(std::chrono::year_month_day)"}, {"name": "std::chrono::year_month_day::std::chrono::year_month_day::year_month_day", "type": "cpp", "path": "cpp\\chrono\\year_month_day\\year_month_day.html", "desc": "std::chrono::year_month_day::std::chrono::year_month_day::year_month_day"}, {"name": "std::chrono::year_month_day_last:: std::chrono::year_month_day_last:: std::chrono::year_month_day_last:: std::chrono::year_month_day_last::std::chrono::year_month_day_last::year, std::chrono::year_month_day_last::month, std::chrono::year_month_day_last::day, std::chrono::year_month_day_last::month_day_last", "type": "cpp", "path": "cpp\\chrono\\year_month_day_last\\accessors.html", "desc": "std::chrono::year_month_day_last:: std::chrono::year_month_day_last:: std::chrono::year_month_day_last:: std::chrono::year_month_day_last::std::chrono::year_month_day_last::year, std::chrono::year_month_day_last::month, std::chrono::year_month_day_last::day, std::chrono::year_month_day_last::month_day_last"}, {"name": "std::std::formatter<std::chrono::year_month_day_last>", "type": "cpp", "path": "cpp\\chrono\\year_month_day_last\\formatter.html", "desc": "std::std::formatter<std::chrono::year_month_day_last>"}, {"name": "std:: <std::chrono::year_month_day_last>std::hash<std::chrono::year_month_day_last>", "type": "cpp", "path": "cpp\\chrono\\year_month_day_last\\hash.html", "desc": "std:: <std::chrono::year_month_day_last>std::hash<std::chrono::year_month_day_last>"}, {"name": "std::chrono::year_month_day_last::std::chrono::year_month_day_last::ok", "type": "cpp", "path": "cpp\\chrono\\year_month_day_last\\ok.html", "desc": "std::chrono::year_month_day_last::std::chrono::year_month_day_last::ok"}, {"name": "std::chrono::year_month_day_last:: std::chrono::year_month_day_last::std::chrono::year_month_day_last::operator+=, std::chrono::year_month_day_last::operator-=", "type": "cpp", "path": "cpp\\chrono\\year_month_day_last\\operator_arith.html", "desc": "std::chrono::year_month_day_last:: std::chrono::year_month_day_last::std::chrono::year_month_day_last::operator+=, std::chrono::year_month_day_last::operator-="}, {"name": "std::chrono:: std::chrono:: (std::chrono::year_month_day_last)std::chrono::operator+, std::chrono::operator- (std::chrono::year_month_day_last)", "type": "cpp", "path": "cpp\\chrono\\year_month_day_last\\operator_arith_2.html", "desc": "std::chrono:: std::chrono:: (std::chrono::year_month_day_last)std::chrono::operator+, std::chrono::operator- (std::chrono::year_month_day_last)"}, {"name": "std::chrono:: (std::chrono::year_month_day_last)std::chrono::operator==,<=>(std::chrono::year_month_day_last)", "type": "cpp", "path": "cpp\\chrono\\year_month_day_last\\operator_cmp.html", "desc": "std::chrono:: (std::chrono::year_month_day_last)std::chrono::operator==,<=>(std::chrono::year_month_day_last)"}, {"name": "std::chrono::year_month_day_last:: std::chrono::year_month_day_last::std::chrono::year_month_day_last::operator sys_days, std::chrono::year_month_day_last::operator local_days", "type": "cpp", "path": "cpp\\chrono\\year_month_day_last\\operator_days.html", "desc": "std::chrono::year_month_day_last:: std::chrono::year_month_day_last::std::chrono::year_month_day_last::operator sys_days, std::chrono::year_month_day_last::operator local_days"}, {"name": "std::chrono::std::chrono::operator<<(std::chrono::year_month_day_last)", "type": "cpp", "path": "cpp\\chrono\\year_month_day_last\\operator_ltlt.html", "desc": "std::chrono::std::chrono::operator<<(std::chrono::year_month_day_last)"}, {"name": "std::chrono::year_month_day_last::std::chrono::year_month_day_last::year_month_day_last", "type": "cpp", "path": "cpp\\chrono\\year_month_day_last\\year_month_day_last.html", "desc": "std::chrono::year_month_day_last::std::chrono::year_month_day_last::year_month_day_last"}, {"name": "std::chrono::year_month_weekday:: std::chrono::year_month_weekday:: std::chrono::year_month_weekday:: std::chrono::year_month_weekday:: std::chrono::year_month_weekday::std::chrono::year_month_weekday::year, std::chrono::year_month_weekday::month, std::chrono::year_month_weekday::weekday, std::chrono::year_month_weekday::index, std::chrono::year_month_weekday::weekday_indexed", "type": "cpp", "path": "cpp\\chrono\\year_month_weekday\\accessors.html", "desc": "std::chrono::year_month_weekday:: std::chrono::year_month_weekday:: std::chrono::year_month_weekday:: std::chrono::year_month_weekday:: std::chrono::year_month_weekday::std::chrono::year_month_weekday::year, std::chrono::year_month_weekday::month, std::chrono::year_month_weekday::weekday, std::chrono::year_month_weekday::index, std::chrono::year_month_weekday::weekday_indexed"}, {"name": "std::std::formatter<std::chrono::year_month_weekday>", "type": "cpp", "path": "cpp\\chrono\\year_month_weekday\\formatter.html", "desc": "std::std::formatter<std::chrono::year_month_weekday>"}, {"name": "std:: <std::chrono::year_month_weekday>std::hash<std::chrono::year_month_weekday>", "type": "cpp", "path": "cpp\\chrono\\year_month_weekday\\hash.html", "desc": "std:: <std::chrono::year_month_weekday>std::hash<std::chrono::year_month_weekday>"}, {"name": "std::chrono::year_month_weekday::std::chrono::year_month_weekday::ok", "type": "cpp", "path": "cpp\\chrono\\year_month_weekday\\ok.html", "desc": "std::chrono::year_month_weekday::std::chrono::year_month_weekday::ok"}, {"name": "std::chrono::year_month_weekday:: std::chrono::year_month_weekday::std::chrono::year_month_weekday::operator+=, std::chrono::year_month_weekday::operator-=", "type": "cpp", "path": "cpp\\chrono\\year_month_weekday\\operator_arith.html", "desc": "std::chrono::year_month_weekday:: std::chrono::year_month_weekday::std::chrono::year_month_weekday::operator+=, std::chrono::year_month_weekday::operator-="}, {"name": "std::chrono:: std::chrono:: (std::chrono::year_month_weekday)std::chrono::operator+, std::chrono::operator- (std::chrono::year_month_weekday)", "type": "cpp", "path": "cpp\\chrono\\year_month_weekday\\operator_arith_2.html", "desc": "std::chrono:: std::chrono:: (std::chrono::year_month_weekday)std::chrono::operator+, std::chrono::operator- (std::chrono::year_month_weekday)"}, {"name": "std::chrono:: (std::chrono::year_month_weekday)std::chrono::operator==(std::chrono::year_month_weekday)", "type": "cpp", "path": "cpp\\chrono\\year_month_weekday\\operator_cmp.html", "desc": "std::chrono:: (std::chrono::year_month_weekday)std::chrono::operator==(std::chrono::year_month_weekday)"}, {"name": "std::chrono::year_month_weekday:: std::chrono::year_month_weekday::std::chrono::year_month_weekday::operator sys_days, std::chrono::year_month_weekday::operator local_days", "type": "cpp", "path": "cpp\\chrono\\year_month_weekday\\operator_days.html", "desc": "std::chrono::year_month_weekday:: std::chrono::year_month_weekday::std::chrono::year_month_weekday::operator sys_days, std::chrono::year_month_weekday::operator local_days"}, {"name": "std::chrono::std::chrono::operator<<(std::chrono::year_month_weekday)", "type": "cpp", "path": "cpp\\chrono\\year_month_weekday\\operator_ltlt.html", "desc": "std::chrono::std::chrono::operator<<(std::chrono::year_month_weekday)"}, {"name": "std::chrono::year_month_weekday::std::chrono::year_month_weekday::year_month_weekday", "type": "cpp", "path": "cpp\\chrono\\year_month_weekday\\year_month_weekday.html", "desc": "std::chrono::year_month_weekday::std::chrono::year_month_weekday::year_month_weekday"}, {"name": "std::chrono::year_month_weekday_last:: std::chrono::year_month_weekday_last:: std::chrono::year_month_weekday_last:: std::chrono::year_month_weekday_last::std::chrono::year_month_weekday_last::year, std::chrono::year_month_weekday_last::month, std::chrono::year_month_weekday_last::weekday, std::chrono::year_month_weekday_last::weekday_last", "type": "cpp", "path": "cpp\\chrono\\year_month_weekday_last\\accessors.html", "desc": "std::chrono::year_month_weekday_last:: std::chrono::year_month_weekday_last:: std::chrono::year_month_weekday_last:: std::chrono::year_month_weekday_last::std::chrono::year_month_weekday_last::year, std::chrono::year_month_weekday_last::month, std::chrono::year_month_weekday_last::weekday, std::chrono::year_month_weekday_last::weekday_last"}, {"name": "std::std::formatter<std::chrono::year_month_weekday_last>", "type": "cpp", "path": "cpp\\chrono\\year_month_weekday_last\\formatter.html", "desc": "std::std::formatter<std::chrono::year_month_weekday_last>"}, {"name": "std:: <std::chrono::year_month_weekday_last>std::hash<std::chrono::year_month_weekday_last>", "type": "cpp", "path": "cpp\\chrono\\year_month_weekday_last\\hash.html", "desc": "std:: <std::chrono::year_month_weekday_last>std::hash<std::chrono::year_month_weekday_last>"}, {"name": "std::chrono::year_month_weekday_last::std::chrono::year_month_weekday_last::ok", "type": "cpp", "path": "cpp\\chrono\\year_month_weekday_last\\ok.html", "desc": "std::chrono::year_month_weekday_last::std::chrono::year_month_weekday_last::ok"}, {"name": "std::chrono::year_month_weekday_last:: std::chrono::year_month_weekday_last::std::chrono::year_month_weekday_last::operator+=, std::chrono::year_month_weekday_last::operator-=", "type": "cpp", "path": "cpp\\chrono\\year_month_weekday_last\\operator_arith.html", "desc": "std::chrono::year_month_weekday_last:: std::chrono::year_month_weekday_last::std::chrono::year_month_weekday_last::operator+=, std::chrono::year_month_weekday_last::operator-="}, {"name": "std::chrono:: std::chrono:: (std::chrono::year_month_weekday_last)std::chrono::operator+, std::chrono::operator- (std::chrono::year_month_weekday_last)", "type": "cpp", "path": "cpp\\chrono\\year_month_weekday_last\\operator_arith_2.html", "desc": "std::chrono:: std::chrono:: (std::chrono::year_month_weekday_last)std::chrono::operator+, std::chrono::operator- (std::chrono::year_month_weekday_last)"}, {"name": "std::chrono:: (std::chrono::year_month_weekday_last)std::chrono::operator==(std::chrono::year_month_weekday_last)", "type": "cpp", "path": "cpp\\chrono\\year_month_weekday_last\\operator_cmp.html", "desc": "std::chrono:: (std::chrono::year_month_weekday_last)std::chrono::operator==(std::chrono::year_month_weekday_last)"}, {"name": "std::chrono::year_month_weekday_last:: std::chrono::year_month_weekday_last::std::chrono::year_month_weekday_last::operator sys_days, std::chrono::year_month_weekday_last::operator local_days", "type": "cpp", "path": "cpp\\chrono\\year_month_weekday_last\\operator_days.html", "desc": "std::chrono::year_month_weekday_last:: std::chrono::year_month_weekday_last::std::chrono::year_month_weekday_last::operator sys_days, std::chrono::year_month_weekday_last::operator local_days"}, {"name": "std::chrono::std::chrono::operator<<(std::chrono::year_month_weekday_last)", "type": "cpp", "path": "cpp\\chrono\\year_month_weekday_last\\operator_ltlt.html", "desc": "std::chrono::std::chrono::operator<<(std::chrono::year_month_weekday_last)"}, {"name": "std::chrono::year_month_weekday_last::std::chrono::year_month_weekday_last::year_month_weekday_last", "type": "cpp", "path": "cpp\\chrono\\year_month_weekday_last\\year_month_weekday_last.html", "desc": "std::chrono::year_month_weekday_last::std::chrono::year_month_weekday_last::year_month_weekday_last"}, {"name": "std::chrono::zoned_time \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\chrono\\zoned_time\\deduction_guides.html", "desc": "std::chrono::zoned_time \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::std::formatter<std::chrono::zoned_time>", "type": "cpp", "path": "cpp\\chrono\\zoned_time\\formatter.html", "desc": "std::std::formatter<std::chrono::zoned_time>"}, {"name": "std::chrono::zoned_time<Duration,TimeZonePtr>::std::chrono::zoned_time<Duration,TimeZonePtr>::get_info", "type": "cpp", "path": "cpp\\chrono\\zoned_time\\get_info.html", "desc": "std::chrono::zoned_time<Duration,TimeZonePtr>::std::chrono::zoned_time<Duration,TimeZonePtr>::get_info"}, {"name": "std::chrono::zoned_time<Duration,TimeZonePtr>:: std::chrono::zoned_time<Duration,TimeZonePtr>::std::chrono::zoned_time<Duration,TimeZonePtr>::operator local_time<duration>, std::chrono::zoned_time<Duration,TimeZonePtr>::get_local_time", "type": "cpp", "path": "cpp\\chrono\\zoned_time\\get_local_time.html", "desc": "std::chrono::zoned_time<Duration,TimeZonePtr>:: std::chrono::zoned_time<Duration,TimeZonePtr>::std::chrono::zoned_time<Duration,TimeZonePtr>::operator local_time<duration>, std::chrono::zoned_time<Duration,TimeZonePtr>::get_local_time"}, {"name": "std::chrono::zoned_time<Duration,TimeZonePtr>:: std::chrono::zoned_time<Duration,TimeZonePtr>::std::chrono::zoned_time<Duration,TimeZonePtr>::operator sys_time<duration>, std::chrono::zoned_time<Duration,TimeZonePtr>::get_sys_time", "type": "cpp", "path": "cpp\\chrono\\zoned_time\\get_sys_time.html", "desc": "std::chrono::zoned_time<Duration,TimeZonePtr>:: std::chrono::zoned_time<Duration,TimeZonePtr>::std::chrono::zoned_time<Duration,TimeZonePtr>::operator sys_time<duration>, std::chrono::zoned_time<Duration,TimeZonePtr>::get_sys_time"}, {"name": "std::chrono::zoned_time<Duration,TimeZonePtr>::std::chrono::zoned_time<Duration,TimeZonePtr>::get_time_zone", "type": "cpp", "path": "cpp\\chrono\\zoned_time\\get_time_zone.html", "desc": "std::chrono::zoned_time<Duration,TimeZonePtr>::std::chrono::zoned_time<Duration,TimeZonePtr>::get_time_zone"}, {"name": "std:: <std::chrono::zoned_time>std::hash<std::chrono::zoned_time>", "type": "cpp", "path": "cpp\\chrono\\zoned_time\\hash.html", "desc": "std:: <std::chrono::zoned_time>std::hash<std::chrono::zoned_time>"}, {"name": "std::chrono::zoned_time<Duration,TimeZonePtr>::std::chrono::zoned_time<Duration,TimeZonePtr>::operator=", "type": "cpp", "path": "cpp\\chrono\\zoned_time\\operator=.html", "desc": "std::chrono::zoned_time<Duration,TimeZonePtr>::std::chrono::zoned_time<Duration,TimeZonePtr>::operator="}, {"name": "std::chrono:: (std::chrono::zoned_time)std::chrono::operator==(std::chrono::zoned_time)", "type": "cpp", "path": "cpp\\chrono\\zoned_time\\operator_cmp.html", "desc": "std::chrono:: (std::chrono::zoned_time)std::chrono::operator==(std::chrono::zoned_time)"}, {"name": "std::chrono::std::chrono::operator<<(std::chrono::zoned_time)", "type": "cpp", "path": "cpp\\chrono\\zoned_time\\operator_ltlt.html", "desc": "std::chrono::std::chrono::operator<<(std::chrono::zoned_time)"}, {"name": "std::chrono::zoned_time<Duration,TimeZonePtr>::std::chrono::zoned_time<Duration,TimeZonePtr>::zoned_time", "type": "cpp", "path": "cpp\\chrono\\zoned_time\\zoned_time.html", "desc": "std::chrono::zoned_time<Duration,TimeZonePtr>::std::chrono::zoned_time<Duration,TimeZonePtr>::zoned_time"}, {"name": "C++11 \u7684\u7f16\u8bd1\u5668\u652f\u6301", "type": "cpp", "path": "cpp\\compiler_support\\11.html", "desc": "C++11 \u7684\u7f16\u8bd1\u5668\u652f\u6301"}, {"name": "C++14 \u7684\u7f16\u8bd1\u5668\u652f\u6301", "type": "cpp", "path": "cpp\\compiler_support\\14.html", "desc": "C++14 \u7684\u7f16\u8bd1\u5668\u652f\u6301"}, {"name": "C++17 \u7684\u7f16\u8bd1\u5668\u652f\u6301", "type": "cpp", "path": "cpp\\compiler_support\\17.html", "desc": "C++17 \u7684\u7f16\u8bd1\u5668\u652f\u6301"}, {"name": "C++20 \u7684\u7f16\u8bd1\u5668\u652f\u6301", "type": "cpp", "path": "cpp\\compiler_support\\20.html", "desc": "C++20 \u7684\u7f16\u8bd1\u5668\u652f\u6301"}, {"name": "C++23 \u7684\u7f16\u8bd1\u5668\u652f\u6301", "type": "cpp", "path": "cpp\\compiler_support\\23.html", "desc": "C++23 \u7684\u7f16\u8bd1\u5668\u652f\u6301"}, {"name": "C++26 \u7f16\u8bd1\u5668\u652f\u6301", "type": "cpp", "path": "cpp\\compiler_support\\26.html", "desc": "C++26 \u7f16\u8bd1\u5668\u652f\u6301"}, {"name": "std::std::assignable_from", "type": "cpp", "path": "cpp\\concepts\\assignable_from.html", "desc": "std::std::assignable_from"}, {"name": "boolean-testable", "type": "cpp", "path": "cpp\\concepts\\boolean-testable.html", "desc": "boolean-testable"}, {"name": "std::std::common_reference_with", "type": "cpp", "path": "cpp\\concepts\\common_reference_with.html", "desc": "std::std::common_reference_with"}, {"name": "std::std::common_with", "type": "cpp", "path": "cpp\\concepts\\common_with.html", "desc": "std::std::common_with"}, {"name": "std::std::constructible_from", "type": "cpp", "path": "cpp\\concepts\\constructible_from.html", "desc": "std::std::constructible_from"}, {"name": "std::std::convertible_to", "type": "cpp", "path": "cpp\\concepts\\convertible_to.html", "desc": "std::std::convertible_to"}, {"name": "std::std::copyable", "type": "cpp", "path": "cpp\\concepts\\copyable.html", "desc": "std::std::copyable"}, {"name": "std::std::copy_constructible", "type": "cpp", "path": "cpp\\concepts\\copy_constructible.html", "desc": "std::std::copy_constructible"}, {"name": "std::std::default_initializable", "type": "cpp", "path": "cpp\\concepts\\default_initializable.html", "desc": "std::std::default_initializable"}, {"name": "std::std::derived_from", "type": "cpp", "path": "cpp\\concepts\\derived_from.html", "desc": "std::std::derived_from"}, {"name": "std::std::destructible", "type": "cpp", "path": "cpp\\concepts\\destructible.html", "desc": "std::std::destructible"}, {"name": "std:: std::std::equality_comparable, std::equality_comparable_with", "type": "cpp", "path": "cpp\\concepts\\equality_comparable.html", "desc": "std:: std::std::equality_comparable, std::equality_comparable_with"}, {"name": "std::std::equivalence_relation", "type": "cpp", "path": "cpp\\concepts\\equivalence_relation.html", "desc": "std::std::equivalence_relation"}, {"name": "std::std::floating_point", "type": "cpp", "path": "cpp\\concepts\\floating_point.html", "desc": "std::std::floating_point"}, {"name": "std::std::integral", "type": "cpp", "path": "cpp\\concepts\\integral.html", "desc": "std::std::integral"}, {"name": "std:: std::std::invocable, std::regular_invocable", "type": "cpp", "path": "cpp\\concepts\\invocable.html", "desc": "std:: std::std::invocable, std::regular_invocable"}, {"name": "std::std::movable", "type": "cpp", "path": "cpp\\concepts\\movable.html", "desc": "std::std::movable"}, {"name": "std::std::move_constructible", "type": "cpp", "path": "cpp\\concepts\\move_constructible.html", "desc": "std::std::move_constructible"}, {"name": "std::std::predicate", "type": "cpp", "path": "cpp\\concepts\\predicate.html", "desc": "std::std::predicate"}, {"name": "std::std::regular", "type": "cpp", "path": "cpp\\concepts\\regular.html", "desc": "std::std::regular"}, {"name": "std::std::relation", "type": "cpp", "path": "cpp\\concepts\\relation.html", "desc": "std::std::relation"}, {"name": "std::std::same_as", "type": "cpp", "path": "cpp\\concepts\\same_as.html", "desc": "std::std::same_as"}, {"name": "std::std::semiregular", "type": "cpp", "path": "cpp\\concepts\\semiregular.html", "desc": "std::std::semiregular"}, {"name": "std::std::signed_integral", "type": "cpp", "path": "cpp\\concepts\\signed_integral.html", "desc": "std::std::signed_integral"}, {"name": "std::std::strict_weak_order", "type": "cpp", "path": "cpp\\concepts\\strict_weak_order.html", "desc": "std::std::strict_weak_order"}, {"name": "std:: std::std::swappable, std::swappable_with", "type": "cpp", "path": "cpp\\concepts\\swappable.html", "desc": "std:: std::std::swappable, std::swappable_with"}, {"name": "std:: std::std::totally_ordered, std::totally_ordered_with", "type": "cpp", "path": "cpp\\concepts\\totally_ordered.html", "desc": "std:: std::std::totally_ordered, std::totally_ordered_with"}, {"name": "std::std::unsigned_integral", "type": "cpp", "path": "cpp\\concepts\\unsigned_integral.html", "desc": "std::std::unsigned_integral"}, {"name": "std::std::array", "type": "cpp", "path": "cpp\\container\\array.html", "desc": "std::std::array"}, {"name": "std::std::deque", "type": "cpp", "path": "cpp\\container\\deque.html", "desc": "std::std::deque"}, {"name": "std::std::flat_map", "type": "cpp", "path": "cpp\\container\\flat_map.html", "desc": "std::std::flat_map"}, {"name": "cpp/container/flat multimap", "type": "cpp", "path": "cpp\\container\\flat_multimap.html", "desc": "cpp/container/flat multimap"}, {"name": "std::std::forward_list", "type": "cpp", "path": "cpp\\container\\forward_list.html", "desc": "std::std::forward_list"}, {"name": "std::std::list", "type": "cpp", "path": "cpp\\container\\list.html", "desc": "std::std::list"}, {"name": "std::std::map", "type": "cpp", "path": "cpp\\container\\map.html", "desc": "std::std::map"}, {"name": "std::std::mdspan", "type": "cpp", "path": "cpp\\container\\mdspan.html", "desc": "std::std::mdspan"}, {"name": "std::std::multimap", "type": "cpp", "path": "cpp\\container\\multimap.html", "desc": "std::std::multimap"}, {"name": "std::std::multiset", "type": "cpp", "path": "cpp\\container\\multiset.html", "desc": "std::std::multiset"}, {"name": "(C++17)\u8282\u70b9\u628a\u67c4 (C++17)", "type": "cpp", "path": "cpp\\container\\node_handle.html", "desc": "(C++17)\u8282\u70b9\u628a\u67c4 (C++17)"}, {"name": "std::std::priority_queue", "type": "cpp", "path": "cpp\\container\\priority_queue.html", "desc": "std::std::priority_queue"}, {"name": "std::std::queue", "type": "cpp", "path": "cpp\\container\\queue.html", "desc": "std::std::queue"}, {"name": "std::std::set", "type": "cpp", "path": "cpp\\container\\set.html", "desc": "std::std::set"}, {"name": "std::std::span", "type": "cpp", "path": "cpp\\container\\span.html", "desc": "std::std::span"}, {"name": "std::std::stack", "type": "cpp", "path": "cpp\\container\\stack.html", "desc": "std::std::stack"}, {"name": "std::std::unordered_map", "type": "cpp", "path": "cpp\\container\\unordered_map.html", "desc": "std::std::unordered_map"}, {"name": "std::std::unordered_multimap", "type": "cpp", "path": "cpp\\container\\unordered_multimap.html", "desc": "std::std::unordered_multimap"}, {"name": "std::std::unordered_multiset", "type": "cpp", "path": "cpp\\container\\unordered_multiset.html", "desc": "std::std::unordered_multiset"}, {"name": "std::std::unordered_set", "type": "cpp", "path": "cpp\\container\\unordered_set.html", "desc": "std::std::unordered_set"}, {"name": "std::std::vector", "type": "cpp", "path": "cpp\\container\\vector.html", "desc": "std::std::vector"}, {"name": "std::std::vector<bool>", "type": "cpp", "path": "cpp\\container\\vector_bool.html", "desc": "std::std::vector<bool>"}, {"name": "std::array<T,N>::std::array<T,N>::at", "type": "cpp", "path": "cpp\\container\\array\\at.html", "desc": "std::array<T,N>::std::array<T,N>::at"}, {"name": "std::array<T,N>::std::array<T,N>::back", "type": "cpp", "path": "cpp\\container\\array\\back.html", "desc": "std::array<T,N>::std::array<T,N>::back"}, {"name": "std::array<T,N>:: std::array<T,N>::std::array<T,N>::begin, std::array<T,N>::cbegin", "type": "cpp", "path": "cpp\\container\\array\\begin.html", "desc": "std::array<T,N>:: std::array<T,N>::std::array<T,N>::begin, std::array<T,N>::cbegin"}, {"name": "std::array<T,N>::std::array<T,N>::data", "type": "cpp", "path": "cpp\\container\\array\\data.html", "desc": "std::array<T,N>::std::array<T,N>::data"}, {"name": "std::array \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\container\\array\\deduction_guides.html", "desc": "std::array \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::array<T,N>::std::array<T,N>::empty", "type": "cpp", "path": "cpp\\container\\array\\empty.html", "desc": "std::array<T,N>::std::array<T,N>::empty"}, {"name": "std::array<T,N>:: std::array<T,N>::std::array<T,N>::end, std::array<T,N>::cend", "type": "cpp", "path": "cpp\\container\\array\\end.html", "desc": "std::array<T,N>:: std::array<T,N>::std::array<T,N>::end, std::array<T,N>::cend"}, {"name": "std::array<T,N>::std::array<T,N>::fill", "type": "cpp", "path": "cpp\\container\\array\\fill.html", "desc": "std::array<T,N>::std::array<T,N>::fill"}, {"name": "std::array<T,N>::std::array<T,N>::front", "type": "cpp", "path": "cpp\\container\\array\\front.html", "desc": "std::array<T,N>::std::array<T,N>::front"}, {"name": "std::std::get(std::array)", "type": "cpp", "path": "cpp\\container\\array\\get.html", "desc": "std::std::get(std::array)"}, {"name": "std::array<T,N>::std::array<T,N>::max_size", "type": "cpp", "path": "cpp\\container\\array\\max_size.html", "desc": "std::array<T,N>::std::array<T,N>::max_size"}, {"name": "std::array<T,N>::std::array<T,N>::operator[]", "type": "cpp", "path": "cpp\\container\\array\\operator_at.html", "desc": "std::array<T,N>::std::array<T,N>::operator[]"}, {"name": "(std::array)operator==,!=,<,<=,>,>=,<=>(std::array)", "type": "cpp", "path": "cpp\\container\\array\\operator_cmp.html", "desc": "(std::array)operator==,!=,<,<=,>,>=,<=>(std::array)"}, {"name": "std::array<T,N>:: std::array<T,N>::std::array<T,N>::rbegin, std::array<T,N>::crbegin", "type": "cpp", "path": "cpp\\container\\array\\rbegin.html", "desc": "std::array<T,N>:: std::array<T,N>::std::array<T,N>::rbegin, std::array<T,N>::crbegin"}, {"name": "std::array<T,N>:: std::array<T,N>::std::array<T,N>::rend, std::array<T,N>::crend", "type": "cpp", "path": "cpp\\container\\array\\rend.html", "desc": "std::array<T,N>:: std::array<T,N>::std::array<T,N>::rend, std::array<T,N>::crend"}, {"name": "std::array<T,N>::std::array<T,N>::size", "type": "cpp", "path": "cpp\\container\\array\\size.html", "desc": "std::array<T,N>::std::array<T,N>::size"}, {"name": "std::array<T,N>::std::array<T,N>::swap", "type": "cpp", "path": "cpp\\container\\array\\swap.html", "desc": "std::array<T,N>::std::array<T,N>::swap"}, {"name": "std::std::swap(std::array)", "type": "cpp", "path": "cpp\\container\\array\\swap2.html", "desc": "std::std::swap(std::array)"}, {"name": "std::std::to_array", "type": "cpp", "path": "cpp\\container\\array\\to_array.html", "desc": "std::std::to_array"}, {"name": "std:: <std::array>std::tuple_element<std::array>", "type": "cpp", "path": "cpp\\container\\array\\tuple_element.html", "desc": "std:: <std::array>std::tuple_element<std::array>"}, {"name": "std::std::tuple_size(std::array)", "type": "cpp", "path": "cpp\\container\\array\\tuple_size.html", "desc": "std::std::tuple_size(std::array)"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::assign", "type": "cpp", "path": "cpp\\container\\deque\\assign.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::assign"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::assign_range", "type": "cpp", "path": "cpp\\container\\deque\\assign_range.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::assign_range"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::at", "type": "cpp", "path": "cpp\\container\\deque\\at.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::at"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::back", "type": "cpp", "path": "cpp\\container\\deque\\back.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::back"}, {"name": "std::deque<T,Allocator>:: std::deque<T,Allocator>::std::deque<T,Allocator>::begin, std::deque<T,Allocator>::cbegin", "type": "cpp", "path": "cpp\\container\\deque\\begin.html", "desc": "std::deque<T,Allocator>:: std::deque<T,Allocator>::std::deque<T,Allocator>::begin, std::deque<T,Allocator>::cbegin"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::clear", "type": "cpp", "path": "cpp\\container\\deque\\clear.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::clear"}, {"name": "std::deque \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\container\\deque\\deduction_guides.html", "desc": "std::deque \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::deque", "type": "cpp", "path": "cpp\\container\\deque\\deque.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::deque"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::emplace", "type": "cpp", "path": "cpp\\container\\deque\\emplace.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::emplace"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::emplace_back", "type": "cpp", "path": "cpp\\container\\deque\\emplace_back.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::emplace_back"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::emplace_front", "type": "cpp", "path": "cpp\\container\\deque\\emplace_front.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::emplace_front"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::empty", "type": "cpp", "path": "cpp\\container\\deque\\empty.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::empty"}, {"name": "std::deque<T,Allocator>:: std::deque<T,Allocator>::std::deque<T,Allocator>::end, std::deque<T,Allocator>::cend", "type": "cpp", "path": "cpp\\container\\deque\\end.html", "desc": "std::deque<T,Allocator>:: std::deque<T,Allocator>::std::deque<T,Allocator>::end, std::deque<T,Allocator>::cend"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::erase", "type": "cpp", "path": "cpp\\container\\deque\\erase.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::erase"}, {"name": "std:: std::std::erase, std::erase_if (std::deque)", "type": "cpp", "path": "cpp\\container\\deque\\erase2.html", "desc": "std:: std::std::erase, std::erase_if (std::deque)"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::front", "type": "cpp", "path": "cpp\\container\\deque\\front.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::front"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::get_allocator", "type": "cpp", "path": "cpp\\container\\deque\\get_allocator.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::get_allocator"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::insert", "type": "cpp", "path": "cpp\\container\\deque\\insert.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::insert"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::max_size", "type": "cpp", "path": "cpp\\container\\deque\\max_size.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::max_size"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::operator=", "type": "cpp", "path": "cpp\\container\\deque\\operator=.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::operator="}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::operator[]", "type": "cpp", "path": "cpp\\container\\deque\\operator_at.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::operator[]"}, {"name": "(std::deque)operator==,!=,<,<=,>,>=,<=>(std::deque)", "type": "cpp", "path": "cpp\\container\\deque\\operator_cmp.html", "desc": "(std::deque)operator==,!=,<,<=,>,>=,<=>(std::deque)"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::pop_back", "type": "cpp", "path": "cpp\\container\\deque\\pop_back.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::pop_back"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::pop_front", "type": "cpp", "path": "cpp\\container\\deque\\pop_front.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::pop_front"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::push_back", "type": "cpp", "path": "cpp\\container\\deque\\push_back.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::push_back"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::push_front", "type": "cpp", "path": "cpp\\container\\deque\\push_front.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::push_front"}, {"name": "std::deque<T,Allocator>:: std::deque<T,Allocator>::std::deque<T,Allocator>::rbegin, std::deque<T,Allocator>::crbegin", "type": "cpp", "path": "cpp\\container\\deque\\rbegin.html", "desc": "std::deque<T,Allocator>:: std::deque<T,Allocator>::std::deque<T,Allocator>::rbegin, std::deque<T,Allocator>::crbegin"}, {"name": "std::deque<T,Allocator>:: std::deque<T,Allocator>::std::deque<T,Allocator>::rend, std::deque<T,Allocator>::crend", "type": "cpp", "path": "cpp\\container\\deque\\rend.html", "desc": "std::deque<T,Allocator>:: std::deque<T,Allocator>::std::deque<T,Allocator>::rend, std::deque<T,Allocator>::crend"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::resize", "type": "cpp", "path": "cpp\\container\\deque\\resize.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::resize"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::shrink_to_fit", "type": "cpp", "path": "cpp\\container\\deque\\shrink_to_fit.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::shrink_to_fit"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::size", "type": "cpp", "path": "cpp\\container\\deque\\size.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::size"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::swap", "type": "cpp", "path": "cpp\\container\\deque\\swap.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::swap"}, {"name": "std::std::swap(std::deque)", "type": "cpp", "path": "cpp\\container\\deque\\swap2.html", "desc": "std::std::swap(std::deque)"}, {"name": "std::deque<T,Allocator>::std::deque<T,Allocator>::~deque", "type": "cpp", "path": "cpp\\container\\deque\\~deque.html", "desc": "std::deque<T,Allocator>::std::deque<T,Allocator>::~deque"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::assign", "type": "cpp", "path": "cpp\\container\\forward_list\\assign.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::assign"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::assign_range", "type": "cpp", "path": "cpp\\container\\forward_list\\assign_range.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::assign_range"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::before_begin, cbefore_begin", "type": "cpp", "path": "cpp\\container\\forward_list\\before_begin.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::before_begin, cbefore_begin"}, {"name": "std::forward_list<T,Allocator>:: std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::begin, std::forward_list<T,Allocator>::cbegin", "type": "cpp", "path": "cpp\\container\\forward_list\\begin.html", "desc": "std::forward_list<T,Allocator>:: std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::begin, std::forward_list<T,Allocator>::cbegin"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::clear", "type": "cpp", "path": "cpp\\container\\forward_list\\clear.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::clear"}, {"name": "std::forward_list \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\container\\forward_list\\deduction_guides.html", "desc": "std::forward_list \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::emplace_after", "type": "cpp", "path": "cpp\\container\\forward_list\\emplace_after.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::emplace_after"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::emplace_front", "type": "cpp", "path": "cpp\\container\\forward_list\\emplace_front.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::emplace_front"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::empty", "type": "cpp", "path": "cpp\\container\\forward_list\\empty.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::empty"}, {"name": "std::forward_list<T,Allocator>:: std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::end, std::forward_list<T,Allocator>::cend", "type": "cpp", "path": "cpp\\container\\forward_list\\end.html", "desc": "std::forward_list<T,Allocator>:: std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::end, std::forward_list<T,Allocator>::cend"}, {"name": "std:: std::std::erase, std::erase_if (std::forward_list)", "type": "cpp", "path": "cpp\\container\\forward_list\\erase2.html", "desc": "std:: std::std::erase, std::erase_if (std::forward_list)"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::erase_after", "type": "cpp", "path": "cpp\\container\\forward_list\\erase_after.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::erase_after"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::forward_list", "type": "cpp", "path": "cpp\\container\\forward_list\\forward_list.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::forward_list"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::front", "type": "cpp", "path": "cpp\\container\\forward_list\\front.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::front"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::get_allocator", "type": "cpp", "path": "cpp\\container\\forward_list\\get_allocator.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::get_allocator"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::insert_after", "type": "cpp", "path": "cpp\\container\\forward_list\\insert_after.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::insert_after"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::max_size", "type": "cpp", "path": "cpp\\container\\forward_list\\max_size.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::max_size"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::merge", "type": "cpp", "path": "cpp\\container\\forward_list\\merge.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::merge"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::operator=", "type": "cpp", "path": "cpp\\container\\forward_list\\operator=.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::operator="}, {"name": "(std::forward_list)operator==,!=,<,<=,>,>=,<=>(std::forward_list)", "type": "cpp", "path": "cpp\\container\\forward_list\\operator_cmp.html", "desc": "(std::forward_list)operator==,!=,<,<=,>,>=,<=>(std::forward_list)"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::pop_front", "type": "cpp", "path": "cpp\\container\\forward_list\\pop_front.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::pop_front"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::push_front", "type": "cpp", "path": "cpp\\container\\forward_list\\push_front.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::push_front"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::remove, remove_if", "type": "cpp", "path": "cpp\\container\\forward_list\\remove.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::remove, remove_if"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::resize", "type": "cpp", "path": "cpp\\container\\forward_list\\resize.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::resize"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::reverse", "type": "cpp", "path": "cpp\\container\\forward_list\\reverse.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::reverse"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::sort", "type": "cpp", "path": "cpp\\container\\forward_list\\sort.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::sort"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::splice_after", "type": "cpp", "path": "cpp\\container\\forward_list\\splice_after.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::splice_after"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::swap", "type": "cpp", "path": "cpp\\container\\forward_list\\swap.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::swap"}, {"name": "std::std::swap(std::forward_list)", "type": "cpp", "path": "cpp\\container\\forward_list\\swap2.html", "desc": "std::std::swap(std::forward_list)"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::unique", "type": "cpp", "path": "cpp\\container\\forward_list\\unique.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::unique"}, {"name": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::~forward_list", "type": "cpp", "path": "cpp\\container\\forward_list\\~forward_list.html", "desc": "std::forward_list<T,Allocator>::std::forward_list<T,Allocator>::~forward_list"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::assign", "type": "cpp", "path": "cpp\\container\\list\\assign.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::assign"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::assign_range", "type": "cpp", "path": "cpp\\container\\list\\assign_range.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::assign_range"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::back", "type": "cpp", "path": "cpp\\container\\list\\back.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::back"}, {"name": "std::list<T,Allocator>:: std::list<T,Allocator>::std::list<T,Allocator>::begin, std::list<T,Allocator>::cbegin", "type": "cpp", "path": "cpp\\container\\list\\begin.html", "desc": "std::list<T,Allocator>:: std::list<T,Allocator>::std::list<T,Allocator>::begin, std::list<T,Allocator>::cbegin"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::clear", "type": "cpp", "path": "cpp\\container\\list\\clear.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::clear"}, {"name": "std::list \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\container\\list\\deduction_guides.html", "desc": "std::list \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::emplace", "type": "cpp", "path": "cpp\\container\\list\\emplace.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::emplace"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::emplace_back", "type": "cpp", "path": "cpp\\container\\list\\emplace_back.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::emplace_back"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::emplace_front", "type": "cpp", "path": "cpp\\container\\list\\emplace_front.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::emplace_front"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::empty", "type": "cpp", "path": "cpp\\container\\list\\empty.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::empty"}, {"name": "std::list<T,Allocator>:: std::list<T,Allocator>::std::list<T,Allocator>::end, std::list<T,Allocator>::cend", "type": "cpp", "path": "cpp\\container\\list\\end.html", "desc": "std::list<T,Allocator>:: std::list<T,Allocator>::std::list<T,Allocator>::end, std::list<T,Allocator>::cend"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::erase", "type": "cpp", "path": "cpp\\container\\list\\erase.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::erase"}, {"name": "std:: std::std::erase, std::erase_if (std::list)", "type": "cpp", "path": "cpp\\container\\list\\erase2.html", "desc": "std:: std::std::erase, std::erase_if (std::list)"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::front", "type": "cpp", "path": "cpp\\container\\list\\front.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::front"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::get_allocator", "type": "cpp", "path": "cpp\\container\\list\\get_allocator.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::get_allocator"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::insert", "type": "cpp", "path": "cpp\\container\\list\\insert.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::insert"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::list", "type": "cpp", "path": "cpp\\container\\list\\list.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::list"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::max_size", "type": "cpp", "path": "cpp\\container\\list\\max_size.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::max_size"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::merge", "type": "cpp", "path": "cpp\\container\\list\\merge.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::merge"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::operator=", "type": "cpp", "path": "cpp\\container\\list\\operator=.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::operator="}, {"name": "(std::list)operator==,!=,<,<=,>,>=,<=>(std::list)", "type": "cpp", "path": "cpp\\container\\list\\operator_cmp.html", "desc": "(std::list)operator==,!=,<,<=,>,>=,<=>(std::list)"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::pop_back", "type": "cpp", "path": "cpp\\container\\list\\pop_back.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::pop_back"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::pop_front", "type": "cpp", "path": "cpp\\container\\list\\pop_front.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::pop_front"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::push_back", "type": "cpp", "path": "cpp\\container\\list\\push_back.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::push_back"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::push_front", "type": "cpp", "path": "cpp\\container\\list\\push_front.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::push_front"}, {"name": "std::list<T,Allocator>:: std::list<T,Allocator>::std::list<T,Allocator>::rbegin, std::list<T,Allocator>::crbegin", "type": "cpp", "path": "cpp\\container\\list\\rbegin.html", "desc": "std::list<T,Allocator>:: std::list<T,Allocator>::std::list<T,Allocator>::rbegin, std::list<T,Allocator>::crbegin"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::remove, remove_if", "type": "cpp", "path": "cpp\\container\\list\\remove.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::remove, remove_if"}, {"name": "std::list<T,Allocator>:: std::list<T,Allocator>::std::list<T,Allocator>::rend, std::list<T,Allocator>::crend", "type": "cpp", "path": "cpp\\container\\list\\rend.html", "desc": "std::list<T,Allocator>:: std::list<T,Allocator>::std::list<T,Allocator>::rend, std::list<T,Allocator>::crend"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::resize", "type": "cpp", "path": "cpp\\container\\list\\resize.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::resize"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::reverse", "type": "cpp", "path": "cpp\\container\\list\\reverse.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::reverse"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::size", "type": "cpp", "path": "cpp\\container\\list\\size.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::size"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::sort", "type": "cpp", "path": "cpp\\container\\list\\sort.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::sort"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::splice", "type": "cpp", "path": "cpp\\container\\list\\splice.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::splice"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::swap", "type": "cpp", "path": "cpp\\container\\list\\swap.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::swap"}, {"name": "std::std::swap(std::list)", "type": "cpp", "path": "cpp\\container\\list\\swap2.html", "desc": "std::std::swap(std::list)"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::unique", "type": "cpp", "path": "cpp\\container\\list\\unique.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::unique"}, {"name": "std::list<T,Allocator>::std::list<T,Allocator>::~list", "type": "cpp", "path": "cpp\\container\\list\\~list.html", "desc": "std::list<T,Allocator>::std::list<T,Allocator>::~list"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::at", "type": "cpp", "path": "cpp\\container\\map\\at.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::at"}, {"name": "std::map<Key,T,Compare,Allocator>:: std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::begin, std::map<Key,T,Compare,Allocator>::cbegin", "type": "cpp", "path": "cpp\\container\\map\\begin.html", "desc": "std::map<Key,T,Compare,Allocator>:: std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::begin, std::map<Key,T,Compare,Allocator>::cbegin"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::clear", "type": "cpp", "path": "cpp\\container\\map\\clear.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::clear"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::contains", "type": "cpp", "path": "cpp\\container\\map\\contains.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::contains"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::count", "type": "cpp", "path": "cpp\\container\\map\\count.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::count"}, {"name": "std::map \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\container\\map\\deduction_guides.html", "desc": "std::map \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::emplace", "type": "cpp", "path": "cpp\\container\\map\\emplace.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::emplace"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::emplace_hint", "type": "cpp", "path": "cpp\\container\\map\\emplace_hint.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::emplace_hint"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::empty", "type": "cpp", "path": "cpp\\container\\map\\empty.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::empty"}, {"name": "std::map<Key,T,Compare,Allocator>:: std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::end, std::map<Key,T,Compare,Allocator>::cend", "type": "cpp", "path": "cpp\\container\\map\\end.html", "desc": "std::map<Key,T,Compare,Allocator>:: std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::end, std::map<Key,T,Compare,Allocator>::cend"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::equal_range", "type": "cpp", "path": "cpp\\container\\map\\equal_range.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::equal_range"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::erase", "type": "cpp", "path": "cpp\\container\\map\\erase.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::erase"}, {"name": "std::std::erase_if (std::map)", "type": "cpp", "path": "cpp\\container\\map\\erase_if.html", "desc": "std::std::erase_if (std::map)"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::extract", "type": "cpp", "path": "cpp\\container\\map\\extract.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::extract"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::find", "type": "cpp", "path": "cpp\\container\\map\\find.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::find"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::get_allocator", "type": "cpp", "path": "cpp\\container\\map\\get_allocator.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::get_allocator"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::insert", "type": "cpp", "path": "cpp\\container\\map\\insert.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::insert"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::insert_or_assign", "type": "cpp", "path": "cpp\\container\\map\\insert_or_assign.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::insert_or_assign"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::key_comp", "type": "cpp", "path": "cpp\\container\\map\\key_comp.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::key_comp"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::lower_bound", "type": "cpp", "path": "cpp\\container\\map\\lower_bound.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::lower_bound"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::map", "type": "cpp", "path": "cpp\\container\\map\\map.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::map"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::max_size", "type": "cpp", "path": "cpp\\container\\map\\max_size.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::max_size"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::merge", "type": "cpp", "path": "cpp\\container\\map\\merge.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::merge"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::operator=", "type": "cpp", "path": "cpp\\container\\map\\operator=.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::operator="}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::operator[]", "type": "cpp", "path": "cpp\\container\\map\\operator_at.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::operator[]"}, {"name": "(std::map)operator==,!=,<,<=,>,>=,<=>(std::map)", "type": "cpp", "path": "cpp\\container\\map\\operator_cmp.html", "desc": "(std::map)operator==,!=,<,<=,>,>=,<=>(std::map)"}, {"name": "std::map<Key,T,Compare,Allocator>:: std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::rbegin, std::map<Key,T,Compare,Allocator>::crbegin", "type": "cpp", "path": "cpp\\container\\map\\rbegin.html", "desc": "std::map<Key,T,Compare,Allocator>:: std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::rbegin, std::map<Key,T,Compare,Allocator>::crbegin"}, {"name": "std::map<Key,T,Compare,Allocator>:: std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::rend, std::map<Key,T,Compare,Allocator>::crend", "type": "cpp", "path": "cpp\\container\\map\\rend.html", "desc": "std::map<Key,T,Compare,Allocator>:: std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::rend, std::map<Key,T,Compare,Allocator>::crend"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::size", "type": "cpp", "path": "cpp\\container\\map\\size.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::size"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::swap", "type": "cpp", "path": "cpp\\container\\map\\swap.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::swap"}, {"name": "std::std::swap(std::map)", "type": "cpp", "path": "cpp\\container\\map\\swap2.html", "desc": "std::std::swap(std::map)"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::try_emplace", "type": "cpp", "path": "cpp\\container\\map\\try_emplace.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::try_emplace"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::upper_bound", "type": "cpp", "path": "cpp\\container\\map\\upper_bound.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::upper_bound"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::value_comp", "type": "cpp", "path": "cpp\\container\\map\\value_comp.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::value_comp"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::value_compare", "type": "cpp", "path": "cpp\\container\\map\\value_compare.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::value_compare"}, {"name": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::~map", "type": "cpp", "path": "cpp\\container\\map\\~map.html", "desc": "std::map<Key,T,Compare,Allocator>::std::map<Key,T,Compare,Allocator>::~map"}, {"name": "std::mdspan<T,Extents,LayoutPolicy,AccessorPolicy>::std::mdspan<T,Extents,LayoutPolicy,AccessorPolicy>::data_handle", "type": "cpp", "path": "cpp\\container\\mdspan\\data_handle.html", "desc": "std::mdspan<T,Extents,LayoutPolicy,AccessorPolicy>::std::mdspan<T,Extents,LayoutPolicy,AccessorPolicy>::data_handle"}, {"name": "std::multimap<Key,T,Compare,Allocator>:: std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::begin, std::multimap<Key,T,Compare,Allocator>::cbegin", "type": "cpp", "path": "cpp\\container\\multimap\\begin.html", "desc": "std::multimap<Key,T,Compare,Allocator>:: std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::begin, std::multimap<Key,T,Compare,Allocator>::cbegin"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::clear", "type": "cpp", "path": "cpp\\container\\multimap\\clear.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::clear"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::contains", "type": "cpp", "path": "cpp\\container\\multimap\\contains.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::contains"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::count", "type": "cpp", "path": "cpp\\container\\multimap\\count.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::count"}, {"name": "std::multimap \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\container\\multimap\\deduction_guides.html", "desc": "std::multimap \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::emplace", "type": "cpp", "path": "cpp\\container\\multimap\\emplace.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::emplace"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::emplace_hint", "type": "cpp", "path": "cpp\\container\\multimap\\emplace_hint.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::emplace_hint"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::empty", "type": "cpp", "path": "cpp\\container\\multimap\\empty.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::empty"}, {"name": "std::multimap<Key,T,Compare,Allocator>:: std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::end, std::multimap<Key,T,Compare,Allocator>::cend", "type": "cpp", "path": "cpp\\container\\multimap\\end.html", "desc": "std::multimap<Key,T,Compare,Allocator>:: std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::end, std::multimap<Key,T,Compare,Allocator>::cend"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::equal_range", "type": "cpp", "path": "cpp\\container\\multimap\\equal_range.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::equal_range"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::erase", "type": "cpp", "path": "cpp\\container\\multimap\\erase.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::erase"}, {"name": "std::std::erase_if (std::multimap)", "type": "cpp", "path": "cpp\\container\\multimap\\erase_if.html", "desc": "std::std::erase_if (std::multimap)"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::extract", "type": "cpp", "path": "cpp\\container\\multimap\\extract.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::extract"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::find", "type": "cpp", "path": "cpp\\container\\multimap\\find.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::find"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::get_allocator", "type": "cpp", "path": "cpp\\container\\multimap\\get_allocator.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::get_allocator"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::insert", "type": "cpp", "path": "cpp\\container\\multimap\\insert.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::insert"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::key_comp", "type": "cpp", "path": "cpp\\container\\multimap\\key_comp.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::key_comp"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::lower_bound", "type": "cpp", "path": "cpp\\container\\multimap\\lower_bound.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::lower_bound"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::max_size", "type": "cpp", "path": "cpp\\container\\multimap\\max_size.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::max_size"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::merge", "type": "cpp", "path": "cpp\\container\\multimap\\merge.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::merge"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::multimap", "type": "cpp", "path": "cpp\\container\\multimap\\multimap.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::multimap"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::operator=", "type": "cpp", "path": "cpp\\container\\multimap\\operator=.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::operator="}, {"name": "(std::multimap)operator==,!=,<,<=,>,>=,<=>(std::multimap)", "type": "cpp", "path": "cpp\\container\\multimap\\operator_cmp.html", "desc": "(std::multimap)operator==,!=,<,<=,>,>=,<=>(std::multimap)"}, {"name": "std::multimap<Key,T,Compare,Allocator>:: std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::rbegin, std::multimap<Key,T,Compare,Allocator>::crbegin", "type": "cpp", "path": "cpp\\container\\multimap\\rbegin.html", "desc": "std::multimap<Key,T,Compare,Allocator>:: std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::rbegin, std::multimap<Key,T,Compare,Allocator>::crbegin"}, {"name": "std::multimap<Key,T,Compare,Allocator>:: std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::rend, std::multimap<Key,T,Compare,Allocator>::crend", "type": "cpp", "path": "cpp\\container\\multimap\\rend.html", "desc": "std::multimap<Key,T,Compare,Allocator>:: std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::rend, std::multimap<Key,T,Compare,Allocator>::crend"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::size", "type": "cpp", "path": "cpp\\container\\multimap\\size.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::size"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::swap", "type": "cpp", "path": "cpp\\container\\multimap\\swap.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::swap"}, {"name": "std::std::swap(std::multimap)", "type": "cpp", "path": "cpp\\container\\multimap\\swap2.html", "desc": "std::std::swap(std::multimap)"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::upper_bound", "type": "cpp", "path": "cpp\\container\\multimap\\upper_bound.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::upper_bound"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::value_comp", "type": "cpp", "path": "cpp\\container\\multimap\\value_comp.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::value_comp"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::value_compare", "type": "cpp", "path": "cpp\\container\\multimap\\value_compare.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::value_compare"}, {"name": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::~multimap", "type": "cpp", "path": "cpp\\container\\multimap\\~multimap.html", "desc": "std::multimap<Key,T,Compare,Allocator>::std::multimap<Key,T,Compare,Allocator>::~multimap"}, {"name": "std::multiset<Key,Compare,Allocator>:: std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::begin, std::multiset<Key,Compare,Allocator>::cbegin", "type": "cpp", "path": "cpp\\container\\multiset\\begin.html", "desc": "std::multiset<Key,Compare,Allocator>:: std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::begin, std::multiset<Key,Compare,Allocator>::cbegin"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::clear", "type": "cpp", "path": "cpp\\container\\multiset\\clear.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::clear"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::contains", "type": "cpp", "path": "cpp\\container\\multiset\\contains.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::contains"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::count", "type": "cpp", "path": "cpp\\container\\multiset\\count.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::count"}, {"name": "std::multiset \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\container\\multiset\\deduction_guides.html", "desc": "std::multiset \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::emplace", "type": "cpp", "path": "cpp\\container\\multiset\\emplace.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::emplace"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::emplace_hint", "type": "cpp", "path": "cpp\\container\\multiset\\emplace_hint.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::emplace_hint"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::empty", "type": "cpp", "path": "cpp\\container\\multiset\\empty.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::empty"}, {"name": "std::multiset<Key,Compare,Allocator>:: std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::end, std::multiset<Key,Compare,Allocator>::cend", "type": "cpp", "path": "cpp\\container\\multiset\\end.html", "desc": "std::multiset<Key,Compare,Allocator>:: std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::end, std::multiset<Key,Compare,Allocator>::cend"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::equal_range", "type": "cpp", "path": "cpp\\container\\multiset\\equal_range.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::equal_range"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::erase", "type": "cpp", "path": "cpp\\container\\multiset\\erase.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::erase"}, {"name": "std::std::erase_if (std::multiset)", "type": "cpp", "path": "cpp\\container\\multiset\\erase_if.html", "desc": "std::std::erase_if (std::multiset)"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::extract", "type": "cpp", "path": "cpp\\container\\multiset\\extract.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::extract"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::find", "type": "cpp", "path": "cpp\\container\\multiset\\find.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::find"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::get_allocator", "type": "cpp", "path": "cpp\\container\\multiset\\get_allocator.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::get_allocator"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::insert", "type": "cpp", "path": "cpp\\container\\multiset\\insert.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::insert"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::key_comp", "type": "cpp", "path": "cpp\\container\\multiset\\key_comp.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::key_comp"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::lower_bound", "type": "cpp", "path": "cpp\\container\\multiset\\lower_bound.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::lower_bound"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::max_size", "type": "cpp", "path": "cpp\\container\\multiset\\max_size.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::max_size"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::merge", "type": "cpp", "path": "cpp\\container\\multiset\\merge.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::merge"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::multiset", "type": "cpp", "path": "cpp\\container\\multiset\\multiset.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::multiset"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::operator=", "type": "cpp", "path": "cpp\\container\\multiset\\operator=.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::operator="}, {"name": "(std::multiset)operator==,!=,<,<=,>,>=,<=>(std::multiset)", "type": "cpp", "path": "cpp\\container\\multiset\\operator_cmp.html", "desc": "(std::multiset)operator==,!=,<,<=,>,>=,<=>(std::multiset)"}, {"name": "std::multiset<Key,Compare,Allocator>:: std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::rbegin, std::multiset<Key,Compare,Allocator>::crbegin", "type": "cpp", "path": "cpp\\container\\multiset\\rbegin.html", "desc": "std::multiset<Key,Compare,Allocator>:: std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::rbegin, std::multiset<Key,Compare,Allocator>::crbegin"}, {"name": "std::multiset<Key,Compare,Allocator>:: std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::rend, std::multiset<Key,Compare,Allocator>::crend", "type": "cpp", "path": "cpp\\container\\multiset\\rend.html", "desc": "std::multiset<Key,Compare,Allocator>:: std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::rend, std::multiset<Key,Compare,Allocator>::crend"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::size", "type": "cpp", "path": "cpp\\container\\multiset\\size.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::size"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::swap", "type": "cpp", "path": "cpp\\container\\multiset\\swap.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::swap"}, {"name": "std::std::swap(std::multiset)", "type": "cpp", "path": "cpp\\container\\multiset\\swap2.html", "desc": "std::std::swap(std::multiset)"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::upper_bound", "type": "cpp", "path": "cpp\\container\\multiset\\upper_bound.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::upper_bound"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::value_comp", "type": "cpp", "path": "cpp\\container\\multiset\\value_comp.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::value_comp"}, {"name": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::~multiset", "type": "cpp", "path": "cpp\\container\\multiset\\~multiset.html", "desc": "std::multiset<Key,Compare,Allocator>::std::multiset<Key,Compare,Allocator>::~multiset"}, {"name": "std::priority_queue \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\container\\priority_queue\\deduction_guides.html", "desc": "std::priority_queue \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::priority_queue<T,Container,Compare>::std::priority_queue<T,Container,Compare>::emplace", "type": "cpp", "path": "cpp\\container\\priority_queue\\emplace.html", "desc": "std::priority_queue<T,Container,Compare>::std::priority_queue<T,Container,Compare>::emplace"}, {"name": "std::priority_queue<T,Container,Compare>::std::priority_queue<T,Container,Compare>::empty", "type": "cpp", "path": "cpp\\container\\priority_queue\\empty.html", "desc": "std::priority_queue<T,Container,Compare>::std::priority_queue<T,Container,Compare>::empty"}, {"name": "std::priority_queue<T,Container,Compare>::std::priority_queue<T,Container,Compare>::operator=", "type": "cpp", "path": "cpp\\container\\priority_queue\\operator=.html", "desc": "std::priority_queue<T,Container,Compare>::std::priority_queue<T,Container,Compare>::operator="}, {"name": "std::priority_queue<T,Container,Compare>::std::priority_queue<T,Container,Compare>::pop", "type": "cpp", "path": "cpp\\container\\priority_queue\\pop.html", "desc": "std::priority_queue<T,Container,Compare>::std::priority_queue<T,Container,Compare>::pop"}, {"name": "std::priority_queue<T,Container,Compare>::std::priority_queue<T,Container,Compare>::priority_queue", "type": "cpp", "path": "cpp\\container\\priority_queue\\priority_queue.html", "desc": "std::priority_queue<T,Container,Compare>::std::priority_queue<T,Container,Compare>::priority_queue"}, {"name": "std::priority_queue<T,Container,Compare>::std::priority_queue<T,Container,Compare>::push", "type": "cpp", "path": "cpp\\container\\priority_queue\\push.html", "desc": "std::priority_queue<T,Container,Compare>::std::priority_queue<T,Container,Compare>::push"}, {"name": "std::priority_queue<T,Container,Compare>::std::priority_queue<T,Container,Compare>::size", "type": "cpp", "path": "cpp\\container\\priority_queue\\size.html", "desc": "std::priority_queue<T,Container,Compare>::std::priority_queue<T,Container,Compare>::size"}, {"name": "std::priority_queue<T,Container,Compare>::std::priority_queue<T,Container,Compare>::swap", "type": "cpp", "path": "cpp\\container\\priority_queue\\swap.html", "desc": "std::priority_queue<T,Container,Compare>::std::priority_queue<T,Container,Compare>::swap"}, {"name": "std::std::swap(std::priority_queue)", "type": "cpp", "path": "cpp\\container\\priority_queue\\swap2.html", "desc": "std::std::swap(std::priority_queue)"}, {"name": "std::priority_queue<T,Container,Compare>::std::priority_queue<T,Container,Compare>::top", "type": "cpp", "path": "cpp\\container\\priority_queue\\top.html", "desc": "std::priority_queue<T,Container,Compare>::std::priority_queue<T,Container,Compare>::top"}, {"name": "std::std::uses_allocator<std::priority_queue>", "type": "cpp", "path": "cpp\\container\\priority_queue\\uses_allocator.html", "desc": "std::std::uses_allocator<std::priority_queue>"}, {"name": "std::priority_queue<T,Container,Compare>::std::priority_queue<T,Container,Compare>::~priority_queue", "type": "cpp", "path": "cpp\\container\\priority_queue\\~priority_queue.html", "desc": "std::priority_queue<T,Container,Compare>::std::priority_queue<T,Container,Compare>::~priority_queue"}, {"name": "std::queue<T,Container>::std::queue<T,Container>::back", "type": "cpp", "path": "cpp\\container\\queue\\back.html", "desc": "std::queue<T,Container>::std::queue<T,Container>::back"}, {"name": "std::queue \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\container\\queue\\deduction_guides.html", "desc": "std::queue \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::queue<T,Container>::std::queue<T,Container>::emplace", "type": "cpp", "path": "cpp\\container\\queue\\emplace.html", "desc": "std::queue<T,Container>::std::queue<T,Container>::emplace"}, {"name": "std::queue<T,Container>::std::queue<T,Container>::empty", "type": "cpp", "path": "cpp\\container\\queue\\empty.html", "desc": "std::queue<T,Container>::std::queue<T,Container>::empty"}, {"name": "std::queue<T,Container>::std::queue<T,Container>::front", "type": "cpp", "path": "cpp\\container\\queue\\front.html", "desc": "std::queue<T,Container>::std::queue<T,Container>::front"}, {"name": "std::queue<T,Container>::std::queue<T,Container>::operator=", "type": "cpp", "path": "cpp\\container\\queue\\operator=.html", "desc": "std::queue<T,Container>::std::queue<T,Container>::operator="}, {"name": "operator==,!=,<,<=,>,>=,<=>(std::queue)", "type": "cpp", "path": "cpp\\container\\queue\\operator_cmp.html", "desc": "operator==,!=,<,<=,>,>=,<=>(std::queue)"}, {"name": "std::queue<T,Container>::std::queue<T,Container>::pop", "type": "cpp", "path": "cpp\\container\\queue\\pop.html", "desc": "std::queue<T,Container>::std::queue<T,Container>::pop"}, {"name": "std::queue<T,Container>::std::queue<T,Container>::push", "type": "cpp", "path": "cpp\\container\\queue\\push.html", "desc": "std::queue<T,Container>::std::queue<T,Container>::push"}, {"name": "std::queue<T,Container>::std::queue<T,Container>::queue", "type": "cpp", "path": "cpp\\container\\queue\\queue.html", "desc": "std::queue<T,Container>::std::queue<T,Container>::queue"}, {"name": "std::queue<T,Container>::std::queue<T,Container>::size", "type": "cpp", "path": "cpp\\container\\queue\\size.html", "desc": "std::queue<T,Container>::std::queue<T,Container>::size"}, {"name": "std::queue<T,Container>::std::queue<T,Container>::swap", "type": "cpp", "path": "cpp\\container\\queue\\swap.html", "desc": "std::queue<T,Container>::std::queue<T,Container>::swap"}, {"name": "std::std::swap(std::queue)", "type": "cpp", "path": "cpp\\container\\queue\\swap2.html", "desc": "std::std::swap(std::queue)"}, {"name": "std::std::uses_allocator<std::queue>", "type": "cpp", "path": "cpp\\container\\queue\\uses_allocator.html", "desc": "std::std::uses_allocator<std::queue>"}, {"name": "std::queue<T,Container>::std::queue<T,Container>::~queue", "type": "cpp", "path": "cpp\\container\\queue\\~queue.html", "desc": "std::queue<T,Container>::std::queue<T,Container>::~queue"}, {"name": "std::set<Key,Compare,Allocator>:: std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::begin, std::set<Key,Compare,Allocator>::cbegin", "type": "cpp", "path": "cpp\\container\\set\\begin.html", "desc": "std::set<Key,Compare,Allocator>:: std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::begin, std::set<Key,Compare,Allocator>::cbegin"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::clear", "type": "cpp", "path": "cpp\\container\\set\\clear.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::clear"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::contains", "type": "cpp", "path": "cpp\\container\\set\\contains.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::contains"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::count", "type": "cpp", "path": "cpp\\container\\set\\count.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::count"}, {"name": "std::set \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\container\\set\\deduction_guides.html", "desc": "std::set \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::emplace", "type": "cpp", "path": "cpp\\container\\set\\emplace.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::emplace"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::emplace_hint", "type": "cpp", "path": "cpp\\container\\set\\emplace_hint.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::emplace_hint"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::empty", "type": "cpp", "path": "cpp\\container\\set\\empty.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::empty"}, {"name": "std::set<Key,Compare,Allocator>:: std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::end, std::set<Key,Compare,Allocator>::cend", "type": "cpp", "path": "cpp\\container\\set\\end.html", "desc": "std::set<Key,Compare,Allocator>:: std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::end, std::set<Key,Compare,Allocator>::cend"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::equal_range", "type": "cpp", "path": "cpp\\container\\set\\equal_range.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::equal_range"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::erase", "type": "cpp", "path": "cpp\\container\\set\\erase.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::erase"}, {"name": "std::std::erase_if (std::set)", "type": "cpp", "path": "cpp\\container\\set\\erase_if.html", "desc": "std::std::erase_if (std::set)"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::extract", "type": "cpp", "path": "cpp\\container\\set\\extract.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::extract"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::find", "type": "cpp", "path": "cpp\\container\\set\\find.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::find"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::get_allocator", "type": "cpp", "path": "cpp\\container\\set\\get_allocator.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::get_allocator"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::insert", "type": "cpp", "path": "cpp\\container\\set\\insert.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::insert"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::key_comp", "type": "cpp", "path": "cpp\\container\\set\\key_comp.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::key_comp"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::lower_bound", "type": "cpp", "path": "cpp\\container\\set\\lower_bound.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::lower_bound"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::max_size", "type": "cpp", "path": "cpp\\container\\set\\max_size.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::max_size"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::merge", "type": "cpp", "path": "cpp\\container\\set\\merge.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::merge"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::operator=", "type": "cpp", "path": "cpp\\container\\set\\operator=.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::operator="}, {"name": "(std::set)operator==,!=,<,<=,>,>=,<=>(std::set)", "type": "cpp", "path": "cpp\\container\\set\\operator_cmp.html", "desc": "(std::set)operator==,!=,<,<=,>,>=,<=>(std::set)"}, {"name": "std::set<Key,Compare,Allocator>:: std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::rbegin, std::set<Key,Compare,Allocator>::crbegin", "type": "cpp", "path": "cpp\\container\\set\\rbegin.html", "desc": "std::set<Key,Compare,Allocator>:: std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::rbegin, std::set<Key,Compare,Allocator>::crbegin"}, {"name": "std::set<Key,Compare,Allocator>:: std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::rend, std::set<Key,Compare,Allocator>::crend", "type": "cpp", "path": "cpp\\container\\set\\rend.html", "desc": "std::set<Key,Compare,Allocator>:: std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::rend, std::set<Key,Compare,Allocator>::crend"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::set", "type": "cpp", "path": "cpp\\container\\set\\set.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::set"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::size", "type": "cpp", "path": "cpp\\container\\set\\size.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::size"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::swap", "type": "cpp", "path": "cpp\\container\\set\\swap.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::swap"}, {"name": "std::std::swap(std::set)", "type": "cpp", "path": "cpp\\container\\set\\swap2.html", "desc": "std::std::swap(std::set)"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::upper_bound", "type": "cpp", "path": "cpp\\container\\set\\upper_bound.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::upper_bound"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::value_comp", "type": "cpp", "path": "cpp\\container\\set\\value_comp.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::value_comp"}, {"name": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::~set", "type": "cpp", "path": "cpp\\container\\set\\~set.html", "desc": "std::set<Key,Compare,Allocator>::std::set<Key,Compare,Allocator>::~set"}, {"name": "std:: std::std::as_bytes, std::as_writable_bytes", "type": "cpp", "path": "cpp\\container\\span\\as_bytes.html", "desc": "std:: std::std::as_bytes, std::as_writable_bytes"}, {"name": "std::span<T,Extent>::std::span<T,Extent>::back", "type": "cpp", "path": "cpp\\container\\span\\back.html", "desc": "std::span<T,Extent>::std::span<T,Extent>::back"}, {"name": "std::span<T,Extent>::std::span<T,Extent>::begin", "type": "cpp", "path": "cpp\\container\\span\\begin.html", "desc": "std::span<T,Extent>::std::span<T,Extent>::begin"}, {"name": "std::span<T,Extent>::std::span<T,Extent>::data", "type": "cpp", "path": "cpp\\container\\span\\data.html", "desc": "std::span<T,Extent>::std::span<T,Extent>::data"}, {"name": "std::span \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\container\\span\\deduction_guides.html", "desc": "std::span \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::std::dynamic_extent", "type": "cpp", "path": "cpp\\container\\span\\dynamic_extent.html", "desc": "std::std::dynamic_extent"}, {"name": "std::span<T,Extent>::std::span<T,Extent>::empty", "type": "cpp", "path": "cpp\\container\\span\\empty.html", "desc": "std::span<T,Extent>::std::span<T,Extent>::empty"}, {"name": "std::span<T,Extent>::std::span<T,Extent>::end", "type": "cpp", "path": "cpp\\container\\span\\end.html", "desc": "std::span<T,Extent>::std::span<T,Extent>::end"}, {"name": "std::span<T,Extent>::std::span<T,Extent>::first", "type": "cpp", "path": "cpp\\container\\span\\first.html", "desc": "std::span<T,Extent>::std::span<T,Extent>::first"}, {"name": "std::span<T,Extent>::std::span<T,Extent>::front", "type": "cpp", "path": "cpp\\container\\span\\front.html", "desc": "std::span<T,Extent>::std::span<T,Extent>::front"}, {"name": "std::std::get(std::span)", "type": "cpp", "path": "cpp\\container\\span\\get.html", "desc": "std::std::get(std::span)"}, {"name": "std::span<T,Extent>::std::span<T,Extent>::last", "type": "cpp", "path": "cpp\\container\\span\\last.html", "desc": "std::span<T,Extent>::std::span<T,Extent>::last"}, {"name": "std::span<T,Extent>::std::span<T,Extent>::operator=", "type": "cpp", "path": "cpp\\container\\span\\operator=.html", "desc": "std::span<T,Extent>::std::span<T,Extent>::operator="}, {"name": "std::span<T,Extent>::std::span<T,Extent>::operator[]", "type": "cpp", "path": "cpp\\container\\span\\operator_at.html", "desc": "std::span<T,Extent>::std::span<T,Extent>::operator[]"}, {"name": "std::span<T,Extent>::std::span<T,Extent>::rbegin", "type": "cpp", "path": "cpp\\container\\span\\rbegin.html", "desc": "std::span<T,Extent>::std::span<T,Extent>::rbegin"}, {"name": "std::span<T,Extent>::std::span<T,Extent>::rend", "type": "cpp", "path": "cpp\\container\\span\\rend.html", "desc": "std::span<T,Extent>::std::span<T,Extent>::rend"}, {"name": "std::span<T,Extent>::std::span<T,Extent>::size", "type": "cpp", "path": "cpp\\container\\span\\size.html", "desc": "std::span<T,Extent>::std::span<T,Extent>::size"}, {"name": "std::span<T,Extent>::std::span<T,Extent>::size_bytes", "type": "cpp", "path": "cpp\\container\\span\\size_bytes.html", "desc": "std::span<T,Extent>::std::span<T,Extent>::size_bytes"}, {"name": "std::span<T,Extent>::std::span<T,Extent>::span", "type": "cpp", "path": "cpp\\container\\span\\span.html", "desc": "std::span<T,Extent>::std::span<T,Extent>::span"}, {"name": "std::span<T,Extent>::std::span<T,Extent>::subspan", "type": "cpp", "path": "cpp\\container\\span\\subspan.html", "desc": "std::span<T,Extent>::std::span<T,Extent>::subspan"}, {"name": "std::stack \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\container\\stack\\deduction_guides.html", "desc": "std::stack \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::stack<T,Container>::std::stack<T,Container>::emplace", "type": "cpp", "path": "cpp\\container\\stack\\emplace.html", "desc": "std::stack<T,Container>::std::stack<T,Container>::emplace"}, {"name": "std::stack<T,Container>::std::stack<T,Container>::empty", "type": "cpp", "path": "cpp\\container\\stack\\empty.html", "desc": "std::stack<T,Container>::std::stack<T,Container>::empty"}, {"name": "std::stack<T,Container>::std::stack<T,Container>::operator=", "type": "cpp", "path": "cpp\\container\\stack\\operator=.html", "desc": "std::stack<T,Container>::std::stack<T,Container>::operator="}, {"name": "operator==,!=,<,<=,>,>=,<=>(std::stack)", "type": "cpp", "path": "cpp\\container\\stack\\operator_cmp.html", "desc": "operator==,!=,<,<=,>,>=,<=>(std::stack)"}, {"name": "std::stack<T,Container>::std::stack<T,Container>::pop", "type": "cpp", "path": "cpp\\container\\stack\\pop.html", "desc": "std::stack<T,Container>::std::stack<T,Container>::pop"}, {"name": "std::stack<T,Container>::std::stack<T,Container>::push", "type": "cpp", "path": "cpp\\container\\stack\\push.html", "desc": "std::stack<T,Container>::std::stack<T,Container>::push"}, {"name": "std::stack<T,Container>::std::stack<T,Container>::size", "type": "cpp", "path": "cpp\\container\\stack\\size.html", "desc": "std::stack<T,Container>::std::stack<T,Container>::size"}, {"name": "std::stack<T,Container>::std::stack<T,Container>::stack", "type": "cpp", "path": "cpp\\container\\stack\\stack.html", "desc": "std::stack<T,Container>::std::stack<T,Container>::stack"}, {"name": "std::stack<T,Container>::std::stack<T,Container>::swap", "type": "cpp", "path": "cpp\\container\\stack\\swap.html", "desc": "std::stack<T,Container>::std::stack<T,Container>::swap"}, {"name": "std::std::swap(std::stack)", "type": "cpp", "path": "cpp\\container\\stack\\swap2.html", "desc": "std::std::swap(std::stack)"}, {"name": "std::stack<T,Container>::std::stack<T,Container>::top", "type": "cpp", "path": "cpp\\container\\stack\\top.html", "desc": "std::stack<T,Container>::std::stack<T,Container>::top"}, {"name": "std::std::uses_allocator<std::stack>", "type": "cpp", "path": "cpp\\container\\stack\\uses_allocator.html", "desc": "std::std::uses_allocator<std::stack>"}, {"name": "std::stack<T,Container>::std::stack<T,Container>::~stack", "type": "cpp", "path": "cpp\\container\\stack\\~stack.html", "desc": "std::stack<T,Container>::std::stack<T,Container>::~stack"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::at", "type": "cpp", "path": "cpp\\container\\unordered_map\\at.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::at"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>:: std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::begin, std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::cbegin", "type": "cpp", "path": "cpp\\container\\unordered_map\\begin.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>:: std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::begin, std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::cbegin"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>:: (size_type) std::unordered_map<Key,T,Hash,KeyEqual,Allocator>:: (size_type)std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::begin(size_type), std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::cbegin(size_type)", "type": "cpp", "path": "cpp\\container\\unordered_map\\begin2.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>:: (size_type) std::unordered_map<Key,T,Hash,KeyEqual,Allocator>:: (size_type)std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::begin(size_type), std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::cbegin(size_type)"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::bucket", "type": "cpp", "path": "cpp\\container\\unordered_map\\bucket.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::bucket"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::bucket_count", "type": "cpp", "path": "cpp\\container\\unordered_map\\bucket_count.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::bucket_count"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::bucket_size", "type": "cpp", "path": "cpp\\container\\unordered_map\\bucket_size.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::bucket_size"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::clear", "type": "cpp", "path": "cpp\\container\\unordered_map\\clear.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::clear"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::contains", "type": "cpp", "path": "cpp\\container\\unordered_map\\contains.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::contains"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::count", "type": "cpp", "path": "cpp\\container\\unordered_map\\count.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::count"}, {"name": "std::unordered_map \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\container\\unordered_map\\deduction_guides.html", "desc": "std::unordered_map \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::emplace", "type": "cpp", "path": "cpp\\container\\unordered_map\\emplace.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::emplace"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::emplace_hint", "type": "cpp", "path": "cpp\\container\\unordered_map\\emplace_hint.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::emplace_hint"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::empty", "type": "cpp", "path": "cpp\\container\\unordered_map\\empty.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::empty"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>:: std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::end, std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::cend", "type": "cpp", "path": "cpp\\container\\unordered_map\\end.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>:: std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::end, std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::cend"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>:: (size_type) std::unordered_map<Key,T,Hash,KeyEqual,Allocator>:: (size_type)std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::end(size_type), std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::cend(size_type)", "type": "cpp", "path": "cpp\\container\\unordered_map\\end2.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>:: (size_type) std::unordered_map<Key,T,Hash,KeyEqual,Allocator>:: (size_type)std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::end(size_type), std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::cend(size_type)"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::equal_range", "type": "cpp", "path": "cpp\\container\\unordered_map\\equal_range.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::equal_range"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::erase", "type": "cpp", "path": "cpp\\container\\unordered_map\\erase.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::erase"}, {"name": "std::std::erase_if (std::unordered_map)", "type": "cpp", "path": "cpp\\container\\unordered_map\\erase_if.html", "desc": "std::std::erase_if (std::unordered_map)"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::extract", "type": "cpp", "path": "cpp\\container\\unordered_map\\extract.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::extract"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::find", "type": "cpp", "path": "cpp\\container\\unordered_map\\find.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::find"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::get_allocator", "type": "cpp", "path": "cpp\\container\\unordered_map\\get_allocator.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::get_allocator"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::hash_function", "type": "cpp", "path": "cpp\\container\\unordered_map\\hash_function.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::hash_function"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::insert", "type": "cpp", "path": "cpp\\container\\unordered_map\\insert.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::insert"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::insert_or_assign", "type": "cpp", "path": "cpp\\container\\unordered_map\\insert_or_assign.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::insert_or_assign"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::key_eq", "type": "cpp", "path": "cpp\\container\\unordered_map\\key_eq.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::key_eq"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::load_factor", "type": "cpp", "path": "cpp\\container\\unordered_map\\load_factor.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::load_factor"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::max_bucket_count", "type": "cpp", "path": "cpp\\container\\unordered_map\\max_bucket_count.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::max_bucket_count"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::max_load_factor", "type": "cpp", "path": "cpp\\container\\unordered_map\\max_load_factor.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::max_load_factor"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::max_size", "type": "cpp", "path": "cpp\\container\\unordered_map\\max_size.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::max_size"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::merge", "type": "cpp", "path": "cpp\\container\\unordered_map\\merge.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::merge"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::operator=", "type": "cpp", "path": "cpp\\container\\unordered_map\\operator=.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::operator="}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::operator[]", "type": "cpp", "path": "cpp\\container\\unordered_map\\operator_at.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::operator[]"}, {"name": "operator==,!=(std::unordered_map)", "type": "cpp", "path": "cpp\\container\\unordered_map\\operator_cmp.html", "desc": "operator==,!=(std::unordered_map)"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::rehash", "type": "cpp", "path": "cpp\\container\\unordered_map\\rehash.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::rehash"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::reserve", "type": "cpp", "path": "cpp\\container\\unordered_map\\reserve.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::reserve"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::size", "type": "cpp", "path": "cpp\\container\\unordered_map\\size.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::size"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::swap", "type": "cpp", "path": "cpp\\container\\unordered_map\\swap.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::swap"}, {"name": "std::std::swap(std::unordered_map)", "type": "cpp", "path": "cpp\\container\\unordered_map\\swap2.html", "desc": "std::std::swap(std::unordered_map)"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::try_emplace", "type": "cpp", "path": "cpp\\container\\unordered_map\\try_emplace.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::try_emplace"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::unordered_map", "type": "cpp", "path": "cpp\\container\\unordered_map\\unordered_map.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::unordered_map"}, {"name": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::~unordered_map", "type": "cpp", "path": "cpp\\container\\unordered_map\\~unordered_map.html", "desc": "std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::~unordered_map"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>:: std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::begin, std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::cbegin", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\begin.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>:: std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::begin, std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::cbegin"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>:: (size_type) std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>:: (size_type)std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::begin(size_type), std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::cbegin(size_type)", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\begin2.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>:: (size_type) std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>:: (size_type)std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::begin(size_type), std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::cbegin(size_type)"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::bucket", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\bucket.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::bucket"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::bucket_count", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\bucket_count.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::bucket_count"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::bucket_size", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\bucket_size.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::bucket_size"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::clear", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\clear.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::clear"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::contains", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\contains.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::contains"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::count", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\count.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::count"}, {"name": "std::unordered_multimap \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\deduction_guides.html", "desc": "std::unordered_multimap \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::emplace", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\emplace.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::emplace"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::emplace_hint", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\emplace_hint.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::emplace_hint"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::empty", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\empty.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::empty"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>:: std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::end, std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::cend", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\end.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>:: std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::end, std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::cend"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>:: (size_type) std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>:: (size_type)std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::end(size_type), std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::cend(size_type)", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\end2.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>:: (size_type) std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>:: (size_type)std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::end(size_type), std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::cend(size_type)"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::equal_range", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\equal_range.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::equal_range"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::erase", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\erase.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::erase"}, {"name": "std::std::erase_if (std::unordered_multimap)", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\erase_if.html", "desc": "std::std::erase_if (std::unordered_multimap)"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::extract", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\extract.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::extract"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::find", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\find.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::find"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::get_allocator", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\get_allocator.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::get_allocator"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::hash_function", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\hash_function.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::hash_function"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::insert", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\insert.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::insert"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::key_eq", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\key_eq.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::key_eq"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::load_factor", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\load_factor.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::load_factor"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::max_bucket_count", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\max_bucket_count.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::max_bucket_count"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::max_load_factor", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\max_load_factor.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::max_load_factor"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::max_size", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\max_size.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::max_size"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::merge", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\merge.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::merge"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::operator=", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\operator=.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::operator="}, {"name": "operator==,!=(std::unordered_multimap)", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\operator_cmp.html", "desc": "operator==,!=(std::unordered_multimap)"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::rehash", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\rehash.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::rehash"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::reserve", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\reserve.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::reserve"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::size", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\size.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::size"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::swap", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\swap.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::swap"}, {"name": "std::std::swap(std::unordered_multimap)", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\swap2.html", "desc": "std::std::swap(std::unordered_multimap)"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::unordered_multimap", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\unordered_multimap.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::unordered_multimap"}, {"name": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::~unordered_multimap", "type": "cpp", "path": "cpp\\container\\unordered_multimap\\~unordered_multimap.html", "desc": "std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::~unordered_multimap"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>:: std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::begin, std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::cbegin", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\begin.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>:: std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::begin, std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::cbegin"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>:: (size_type) std::unordered_multiset<Key,Hash,KeyEqual,Allocator>:: (size_type)std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::begin(size_type), std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::cbegin(size_type)", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\begin2.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>:: (size_type) std::unordered_multiset<Key,Hash,KeyEqual,Allocator>:: (size_type)std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::begin(size_type), std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::cbegin(size_type)"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::bucket", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\bucket.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::bucket"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::bucket_count", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\bucket_count.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::bucket_count"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::bucket_size", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\bucket_size.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::bucket_size"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::clear", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\clear.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::clear"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::contains", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\contains.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::contains"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::count", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\count.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::count"}, {"name": "std::unordered_multiset \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\deduction_guides.html", "desc": "std::unordered_multiset \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::emplace", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\emplace.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::emplace"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::emplace_hint", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\emplace_hint.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::emplace_hint"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::empty", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\empty.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::empty"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>:: std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::end, std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::cend", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\end.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>:: std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::end, std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::cend"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>:: (size_type) std::unordered_multiset<Key,Hash,KeyEqual,Allocator>:: (size_type)std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::end(size_type), std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::cend(size_type)", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\end2.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>:: (size_type) std::unordered_multiset<Key,Hash,KeyEqual,Allocator>:: (size_type)std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::end(size_type), std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::cend(size_type)"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::equal_range", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\equal_range.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::equal_range"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::erase", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\erase.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::erase"}, {"name": "std::std::erase_if (std::unordered_multiset)", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\erase_if.html", "desc": "std::std::erase_if (std::unordered_multiset)"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::extract", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\extract.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::extract"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::find", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\find.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::find"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::get_allocator", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\get_allocator.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::get_allocator"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::hash_function", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\hash_function.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::hash_function"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::insert", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\insert.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::insert"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::key_eq", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\key_eq.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::key_eq"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::load_factor", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\load_factor.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::load_factor"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::max_bucket_count", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\max_bucket_count.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::max_bucket_count"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::max_load_factor", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\max_load_factor.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::max_load_factor"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::max_size", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\max_size.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::max_size"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::merge", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\merge.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::merge"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::operator=", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\operator=.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::operator="}, {"name": "operator==,!=(std::unordered_multiset)", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\operator_cmp.html", "desc": "operator==,!=(std::unordered_multiset)"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::rehash", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\rehash.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::rehash"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::reserve", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\reserve.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::reserve"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::size", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\size.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::size"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::swap", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\swap.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::swap"}, {"name": "std::std::swap(std::unordered_multiset)", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\swap2.html", "desc": "std::std::swap(std::unordered_multiset)"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::unordered_multiset", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\unordered_multiset.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::unordered_multiset"}, {"name": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::~unordered_multiset", "type": "cpp", "path": "cpp\\container\\unordered_multiset\\~unordered_multiset.html", "desc": "std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::~unordered_multiset"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>:: std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::begin, std::unordered_set<Key,Hash,KeyEqual,Allocator>::cbegin", "type": "cpp", "path": "cpp\\container\\unordered_set\\begin.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>:: std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::begin, std::unordered_set<Key,Hash,KeyEqual,Allocator>::cbegin"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>:: (size_type) std::unordered_set<Key,Hash,KeyEqual,Allocator>:: (size_type)std::unordered_set<Key,Hash,KeyEqual,Allocator>::begin(size_type), std::unordered_set<Key,Hash,KeyEqual,Allocator>::cbegin(size_type)", "type": "cpp", "path": "cpp\\container\\unordered_set\\begin2.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>:: (size_type) std::unordered_set<Key,Hash,KeyEqual,Allocator>:: (size_type)std::unordered_set<Key,Hash,KeyEqual,Allocator>::begin(size_type), std::unordered_set<Key,Hash,KeyEqual,Allocator>::cbegin(size_type)"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::bucket", "type": "cpp", "path": "cpp\\container\\unordered_set\\bucket.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::bucket"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::bucket_count", "type": "cpp", "path": "cpp\\container\\unordered_set\\bucket_count.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::bucket_count"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::bucket_size", "type": "cpp", "path": "cpp\\container\\unordered_set\\bucket_size.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::bucket_size"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::clear", "type": "cpp", "path": "cpp\\container\\unordered_set\\clear.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::clear"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::contains", "type": "cpp", "path": "cpp\\container\\unordered_set\\contains.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::contains"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::count", "type": "cpp", "path": "cpp\\container\\unordered_set\\count.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::count"}, {"name": "std::unordered_set \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\container\\unordered_set\\deduction_guides.html", "desc": "std::unordered_set \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::emplace", "type": "cpp", "path": "cpp\\container\\unordered_set\\emplace.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::emplace"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::emplace_hint", "type": "cpp", "path": "cpp\\container\\unordered_set\\emplace_hint.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::emplace_hint"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::empty", "type": "cpp", "path": "cpp\\container\\unordered_set\\empty.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::empty"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>:: std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::end, std::unordered_set<Key,Hash,KeyEqual,Allocator>::cend", "type": "cpp", "path": "cpp\\container\\unordered_set\\end.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>:: std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::end, std::unordered_set<Key,Hash,KeyEqual,Allocator>::cend"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>:: (size_type) std::unordered_set<Key,Hash,KeyEqual,Allocator>:: (size_type)std::unordered_set<Key,Hash,KeyEqual,Allocator>::end(size_type), std::unordered_set<Key,Hash,KeyEqual,Allocator>::cend(size_type)", "type": "cpp", "path": "cpp\\container\\unordered_set\\end2.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>:: (size_type) std::unordered_set<Key,Hash,KeyEqual,Allocator>:: (size_type)std::unordered_set<Key,Hash,KeyEqual,Allocator>::end(size_type), std::unordered_set<Key,Hash,KeyEqual,Allocator>::cend(size_type)"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::equal_range", "type": "cpp", "path": "cpp\\container\\unordered_set\\equal_range.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::equal_range"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::erase", "type": "cpp", "path": "cpp\\container\\unordered_set\\erase.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::erase"}, {"name": "std::std::erase_if (std::unordered_set)", "type": "cpp", "path": "cpp\\container\\unordered_set\\erase_if.html", "desc": "std::std::erase_if (std::unordered_set)"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::extract", "type": "cpp", "path": "cpp\\container\\unordered_set\\extract.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::extract"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::find", "type": "cpp", "path": "cpp\\container\\unordered_set\\find.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::find"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::get_allocator", "type": "cpp", "path": "cpp\\container\\unordered_set\\get_allocator.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::get_allocator"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::hash_function", "type": "cpp", "path": "cpp\\container\\unordered_set\\hash_function.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::hash_function"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::insert", "type": "cpp", "path": "cpp\\container\\unordered_set\\insert.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::insert"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::key_eq", "type": "cpp", "path": "cpp\\container\\unordered_set\\key_eq.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::key_eq"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::load_factor", "type": "cpp", "path": "cpp\\container\\unordered_set\\load_factor.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::load_factor"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::max_bucket_count", "type": "cpp", "path": "cpp\\container\\unordered_set\\max_bucket_count.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::max_bucket_count"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::max_load_factor", "type": "cpp", "path": "cpp\\container\\unordered_set\\max_load_factor.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::max_load_factor"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::max_size", "type": "cpp", "path": "cpp\\container\\unordered_set\\max_size.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::max_size"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::merge", "type": "cpp", "path": "cpp\\container\\unordered_set\\merge.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::merge"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::operator=", "type": "cpp", "path": "cpp\\container\\unordered_set\\operator=.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::operator="}, {"name": "operator==,!=(std::unordered_set)", "type": "cpp", "path": "cpp\\container\\unordered_set\\operator_cmp.html", "desc": "operator==,!=(std::unordered_set)"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::rehash", "type": "cpp", "path": "cpp\\container\\unordered_set\\rehash.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::rehash"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::reserve", "type": "cpp", "path": "cpp\\container\\unordered_set\\reserve.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::reserve"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::size", "type": "cpp", "path": "cpp\\container\\unordered_set\\size.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::size"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::swap", "type": "cpp", "path": "cpp\\container\\unordered_set\\swap.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::swap"}, {"name": "std::std::swap(std::unordered_set)", "type": "cpp", "path": "cpp\\container\\unordered_set\\swap2.html", "desc": "std::std::swap(std::unordered_set)"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::unordered_set", "type": "cpp", "path": "cpp\\container\\unordered_set\\unordered_set.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::unordered_set"}, {"name": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::~unordered_set", "type": "cpp", "path": "cpp\\container\\unordered_set\\~unordered_set.html", "desc": "std::unordered_set<Key,Hash,KeyEqual,Allocator>::std::unordered_set<Key,Hash,KeyEqual,Allocator>::~unordered_set"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::assign", "type": "cpp", "path": "cpp\\container\\vector\\assign.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::assign"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::assign_range", "type": "cpp", "path": "cpp\\container\\vector\\assign_range.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::assign_range"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::at", "type": "cpp", "path": "cpp\\container\\vector\\at.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::at"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::back", "type": "cpp", "path": "cpp\\container\\vector\\back.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::back"}, {"name": "std::vector<T,Allocator>:: std::vector<T,Allocator>::std::vector<T,Allocator>::begin, std::vector<T,Allocator>::cbegin", "type": "cpp", "path": "cpp\\container\\vector\\begin.html", "desc": "std::vector<T,Allocator>:: std::vector<T,Allocator>::std::vector<T,Allocator>::begin, std::vector<T,Allocator>::cbegin"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::capacity", "type": "cpp", "path": "cpp\\container\\vector\\capacity.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::capacity"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::clear", "type": "cpp", "path": "cpp\\container\\vector\\clear.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::clear"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::data", "type": "cpp", "path": "cpp\\container\\vector\\data.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::data"}, {"name": "std::vector \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\container\\vector\\deduction_guides.html", "desc": "std::vector \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::emplace", "type": "cpp", "path": "cpp\\container\\vector\\emplace.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::emplace"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::emplace_back", "type": "cpp", "path": "cpp\\container\\vector\\emplace_back.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::emplace_back"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::empty", "type": "cpp", "path": "cpp\\container\\vector\\empty.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::empty"}, {"name": "std::vector<T,Allocator>:: std::vector<T,Allocator>::std::vector<T,Allocator>::end, std::vector<T,Allocator>::cend", "type": "cpp", "path": "cpp\\container\\vector\\end.html", "desc": "std::vector<T,Allocator>:: std::vector<T,Allocator>::std::vector<T,Allocator>::end, std::vector<T,Allocator>::cend"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::erase", "type": "cpp", "path": "cpp\\container\\vector\\erase.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::erase"}, {"name": "std:: std::std::erase, std::erase_if (std::vector)", "type": "cpp", "path": "cpp\\container\\vector\\erase2.html", "desc": "std:: std::std::erase, std::erase_if (std::vector)"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::front", "type": "cpp", "path": "cpp\\container\\vector\\front.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::front"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::get_allocator", "type": "cpp", "path": "cpp\\container\\vector\\get_allocator.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::get_allocator"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::insert", "type": "cpp", "path": "cpp\\container\\vector\\insert.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::insert"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::max_size", "type": "cpp", "path": "cpp\\container\\vector\\max_size.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::max_size"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::operator=", "type": "cpp", "path": "cpp\\container\\vector\\operator=.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::operator="}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::operator[]", "type": "cpp", "path": "cpp\\container\\vector\\operator_at.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::operator[]"}, {"name": "(std::vector)operator==,!=,<,<=,>,>=,<=>(std::vector)", "type": "cpp", "path": "cpp\\container\\vector\\operator_cmp.html", "desc": "(std::vector)operator==,!=,<,<=,>,>=,<=>(std::vector)"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::pop_back", "type": "cpp", "path": "cpp\\container\\vector\\pop_back.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::pop_back"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::push_back", "type": "cpp", "path": "cpp\\container\\vector\\push_back.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::push_back"}, {"name": "std::vector<T,Allocator>:: std::vector<T,Allocator>::std::vector<T,Allocator>::rbegin, std::vector<T,Allocator>::crbegin", "type": "cpp", "path": "cpp\\container\\vector\\rbegin.html", "desc": "std::vector<T,Allocator>:: std::vector<T,Allocator>::std::vector<T,Allocator>::rbegin, std::vector<T,Allocator>::crbegin"}, {"name": "std::vector<T,Allocator>:: std::vector<T,Allocator>::std::vector<T,Allocator>::rend, std::vector<T,Allocator>::crend", "type": "cpp", "path": "cpp\\container\\vector\\rend.html", "desc": "std::vector<T,Allocator>:: std::vector<T,Allocator>::std::vector<T,Allocator>::rend, std::vector<T,Allocator>::crend"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::reserve", "type": "cpp", "path": "cpp\\container\\vector\\reserve.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::reserve"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::resize", "type": "cpp", "path": "cpp\\container\\vector\\resize.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::resize"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::shrink_to_fit", "type": "cpp", "path": "cpp\\container\\vector\\shrink_to_fit.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::shrink_to_fit"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::size", "type": "cpp", "path": "cpp\\container\\vector\\size.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::size"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::swap", "type": "cpp", "path": "cpp\\container\\vector\\swap.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::swap"}, {"name": "std::std::swap(std::vector)", "type": "cpp", "path": "cpp\\container\\vector\\swap2.html", "desc": "std::std::swap(std::vector)"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::vector", "type": "cpp", "path": "cpp\\container\\vector\\vector.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::vector"}, {"name": "std::vector<T,Allocator>::std::vector<T,Allocator>::~vector", "type": "cpp", "path": "cpp\\container\\vector\\~vector.html", "desc": "std::vector<T,Allocator>::std::vector<T,Allocator>::~vector"}, {"name": "std::vector<bool,Allocator>::std::vector<bool,Allocator>::flip", "type": "cpp", "path": "cpp\\container\\vector_bool\\flip.html", "desc": "std::vector<bool,Allocator>::std::vector<bool,Allocator>::flip"}, {"name": "std::std::hash (std::vector<bool>)", "type": "cpp", "path": "cpp\\container\\vector_bool\\hash.html", "desc": "std::std::hash (std::vector<bool>)"}, {"name": "std:: vector<bool>::std::vector<bool>::reference", "type": "cpp", "path": "cpp\\container\\vector_bool\\reference.html", "desc": "std:: vector<bool>::std::vector<bool>::reference"}, {"name": "std::vector<bool,Allocator>::std::vector<bool,Allocator>::swap", "type": "cpp", "path": "cpp\\container\\vector_bool\\swap.html", "desc": "std::vector<bool,Allocator>::std::vector<bool,Allocator>::swap"}, {"name": "std::std::coroutine_handle", "type": "cpp", "path": "cpp\\coroutine\\coroutine_handle.html", "desc": "std::std::coroutine_handle"}, {"name": "std::std::coroutine_traits", "type": "cpp", "path": "cpp\\coroutine\\coroutine_traits.html", "desc": "std::std::coroutine_traits"}, {"name": "std::std::generator", "type": "cpp", "path": "cpp\\coroutine\\generator.html", "desc": "std::std::generator"}, {"name": "std::std::noop_coroutine", "type": "cpp", "path": "cpp\\coroutine\\noop_coroutine.html", "desc": "std::std::noop_coroutine"}, {"name": "std::std::noop_coroutine_promise", "type": "cpp", "path": "cpp\\coroutine\\noop_coroutine_promise.html", "desc": "std::std::noop_coroutine_promise"}, {"name": "std::std::suspend_always", "type": "cpp", "path": "cpp\\coroutine\\suspend_always.html", "desc": "std::std::suspend_always"}, {"name": "std::std::suspend_never", "type": "cpp", "path": "cpp\\coroutine\\suspend_never.html", "desc": "std::std::suspend_never"}, {"name": "std::coroutine_handle<Promise>::std::coroutine_handle<Promise>::address", "type": "cpp", "path": "cpp\\coroutine\\coroutine_handle\\address.html", "desc": "std::coroutine_handle<Promise>::std::coroutine_handle<Promise>::address"}, {"name": "std::coroutine_handle<Promise>::std::coroutine_handle<Promise>::coroutine_handle", "type": "cpp", "path": "cpp\\coroutine\\coroutine_handle\\coroutine_handle.html", "desc": "std::coroutine_handle<Promise>::std::coroutine_handle<Promise>::coroutine_handle"}, {"name": "std::coroutine_handle<Promise>::std::coroutine_handle<Promise>::destroy", "type": "cpp", "path": "cpp\\coroutine\\coroutine_handle\\destroy.html", "desc": "std::coroutine_handle<Promise>::std::coroutine_handle<Promise>::destroy"}, {"name": "std::coroutine_handle<Promise>::std::coroutine_handle<Promise>::done", "type": "cpp", "path": "cpp\\coroutine\\coroutine_handle\\done.html", "desc": "std::coroutine_handle<Promise>::std::coroutine_handle<Promise>::done"}, {"name": "std::coroutine_handle<Promise>::std::coroutine_handle<Promise>::from_address", "type": "cpp", "path": "cpp\\coroutine\\coroutine_handle\\from_address.html", "desc": "std::coroutine_handle<Promise>::std::coroutine_handle<Promise>::from_address"}, {"name": "std::coroutine_handle<Promise>::std::coroutine_handle<Promise>::from_promise", "type": "cpp", "path": "cpp\\coroutine\\coroutine_handle\\from_promise.html", "desc": "std::coroutine_handle<Promise>::std::coroutine_handle<Promise>::from_promise"}, {"name": "std::std::hash(std::coroutine_handle)", "type": "cpp", "path": "cpp\\coroutine\\coroutine_handle\\hash.html", "desc": "std::std::hash(std::coroutine_handle)"}, {"name": "std::coroutine_handle<Promise>::std::coroutine_handle<Promise>::operator=", "type": "cpp", "path": "cpp\\coroutine\\coroutine_handle\\operator=.html", "desc": "std::coroutine_handle<Promise>::std::coroutine_handle<Promise>::operator="}, {"name": "std::coroutine_handle<Promise>::std::coroutine_handle<Promise>::operator bool", "type": "cpp", "path": "cpp\\coroutine\\coroutine_handle\\operator_bool.html", "desc": "std::coroutine_handle<Promise>::std::coroutine_handle<Promise>::operator bool"}, {"name": "std::std::operator==, operator<=>(std::coroutine_handle)", "type": "cpp", "path": "cpp\\coroutine\\coroutine_handle\\operator_cmp.html", "desc": "std::std::operator==, operator<=>(std::coroutine_handle)"}, {"name": "std::coroutine_handle<Promise>::std::coroutine_handle<Promise>::operator coroutine_handle<>", "type": "cpp", "path": "cpp\\coroutine\\coroutine_handle\\operator_coroutine_handle_void.html", "desc": "std::coroutine_handle<Promise>::std::coroutine_handle<Promise>::operator coroutine_handle<>"}, {"name": "std::coroutine_handle<Promise>::std::coroutine_handle<Promise>::promise", "type": "cpp", "path": "cpp\\coroutine\\coroutine_handle\\promise.html", "desc": "std::coroutine_handle<Promise>::std::coroutine_handle<Promise>::promise"}, {"name": "std::coroutine_handle<Promise>:: std::coroutine_handle<Promise>::std::coroutine_handle<Promise>::operator(), std::coroutine_handle<Promise>::resume", "type": "cpp", "path": "cpp\\coroutine\\coroutine_handle\\resume.html", "desc": "std::coroutine_handle<Promise>:: std::coroutine_handle<Promise>::std::coroutine_handle<Promise>::operator(), std::coroutine_handle<Promise>::resume"}, {"name": "std::generator<Ref,V,Allocator>::std::generator<Ref,V,Allocator>::begin", "type": "cpp", "path": "cpp\\coroutine\\generator\\begin.html", "desc": "std::generator<Ref,V,Allocator>::std::generator<Ref,V,Allocator>::begin"}, {"name": "std::generator<Ref,V,Allocator>::std::generator<Ref,V,Allocator>::end", "type": "cpp", "path": "cpp\\coroutine\\generator\\end.html", "desc": "std::generator<Ref,V,Allocator>::std::generator<Ref,V,Allocator>::end"}, {"name": "std::generator<Ref,V,Allocator>::std::generator<Ref,V,Allocator>::generator", "type": "cpp", "path": "cpp\\coroutine\\generator\\generator.html", "desc": "std::generator<Ref,V,Allocator>::std::generator<Ref,V,Allocator>::generator"}, {"name": "std::std::generator<Ref,V,Allocator>::iterator", "type": "cpp", "path": "cpp\\coroutine\\generator\\iterator.html", "desc": "std::std::generator<Ref,V,Allocator>::iterator"}, {"name": "std::generator<Ref,V,Allocator>::std::generator<Ref,V,Allocator>::operator=", "type": "cpp", "path": "cpp\\coroutine\\generator\\operator=.html", "desc": "std::generator<Ref,V,Allocator>::std::generator<Ref,V,Allocator>::operator="}, {"name": "std::generator<Ref,V,Allocator>::std::generator<Ref,V,Allocator>::~generator", "type": "cpp", "path": "cpp\\coroutine\\generator\\~generator.html", "desc": "std::generator<Ref,V,Allocator>::std::generator<Ref,V,Allocator>::~generator"}, {"name": "assert", "type": "cpp", "path": "cpp\\error\\assert.html", "desc": "assert"}, {"name": "std::std::bad_exception", "type": "cpp", "path": "cpp\\error\\bad_exception.html", "desc": "std::std::bad_exception"}, {"name": "std::std::current_exception", "type": "cpp", "path": "cpp\\error\\current_exception.html", "desc": "std::std::current_exception"}, {"name": "std::std::domain_error", "type": "cpp", "path": "cpp\\error\\domain_error.html", "desc": "std::std::domain_error"}, {"name": "std::std::errc", "type": "cpp", "path": "cpp\\error\\errc.html", "desc": "std::std::errc"}, {"name": "errno", "type": "cpp", "path": "cpp\\error\\errno.html", "desc": "errno"}, {"name": "\u9519\u8bef\u53f7", "type": "cpp", "path": "cpp\\error\\errno_macros.html", "desc": "\u9519\u8bef\u53f7"}, {"name": "std::std::error_category", "type": "cpp", "path": "cpp\\error\\error_category.html", "desc": "std::std::error_category"}, {"name": "std::std::error_code", "type": "cpp", "path": "cpp\\error\\error_code.html", "desc": "std::std::error_code"}, {"name": "std::std::error_condition", "type": "cpp", "path": "cpp\\error\\error_condition.html", "desc": "std::std::error_condition"}, {"name": "std::std::exception", "type": "cpp", "path": "cpp\\error\\exception.html", "desc": "std::std::exception"}, {"name": "std::std::exception_ptr", "type": "cpp", "path": "cpp\\error\\exception_ptr.html", "desc": "std::std::exception_ptr"}, {"name": "std::std::generic_category", "type": "cpp", "path": "cpp\\error\\generic_category.html", "desc": "std::std::generic_category"}, {"name": "std::std::get_terminate", "type": "cpp", "path": "cpp\\error\\get_terminate.html", "desc": "std::std::get_terminate"}, {"name": "std::std::get_unexpected", "type": "cpp", "path": "cpp\\error\\get_unexpected.html", "desc": "std::std::get_unexpected"}, {"name": "std::std::invalid_argument", "type": "cpp", "path": "cpp\\error\\invalid_argument.html", "desc": "std::std::invalid_argument"}, {"name": "std::std::length_error", "type": "cpp", "path": "cpp\\error\\length_error.html", "desc": "std::std::length_error"}, {"name": "std::std::logic_error", "type": "cpp", "path": "cpp\\error\\logic_error.html", "desc": "std::std::logic_error"}, {"name": "std::std::make_exception_ptr", "type": "cpp", "path": "cpp\\error\\make_exception_ptr.html", "desc": "std::std::make_exception_ptr"}, {"name": "std::std::nested_exception", "type": "cpp", "path": "cpp\\error\\nested_exception.html", "desc": "std::std::nested_exception"}, {"name": "std::std::out_of_range", "type": "cpp", "path": "cpp\\error\\out_of_range.html", "desc": "std::std::out_of_range"}, {"name": "std::std::overflow_error", "type": "cpp", "path": "cpp\\error\\overflow_error.html", "desc": "std::std::overflow_error"}, {"name": "std::std::range_error", "type": "cpp", "path": "cpp\\error\\range_error.html", "desc": "std::std::range_error"}, {"name": "std::std::rethrow_exception", "type": "cpp", "path": "cpp\\error\\rethrow_exception.html", "desc": "std::std::rethrow_exception"}, {"name": "std::std::rethrow_if_nested", "type": "cpp", "path": "cpp\\error\\rethrow_if_nested.html", "desc": "std::std::rethrow_if_nested"}, {"name": "std::std::runtime_error", "type": "cpp", "path": "cpp\\error\\runtime_error.html", "desc": "std::std::runtime_error"}, {"name": "std::std::set_terminate", "type": "cpp", "path": "cpp\\error\\set_terminate.html", "desc": "std::std::set_terminate"}, {"name": "std::std::set_unexpected", "type": "cpp", "path": "cpp\\error\\set_unexpected.html", "desc": "std::std::set_unexpected"}, {"name": "std::std::system_category", "type": "cpp", "path": "cpp\\error\\system_category.html", "desc": "std::std::system_category"}, {"name": "std::std::system_error", "type": "cpp", "path": "cpp\\error\\system_error.html", "desc": "std::std::system_error"}, {"name": "std::std::terminate", "type": "cpp", "path": "cpp\\error\\terminate.html", "desc": "std::std::terminate"}, {"name": "std::std::terminate_handler", "type": "cpp", "path": "cpp\\error\\terminate_handler.html", "desc": "std::std::terminate_handler"}, {"name": "std::std::throw_with_nested", "type": "cpp", "path": "cpp\\error\\throw_with_nested.html", "desc": "std::std::throw_with_nested"}, {"name": "std::std::tx_exception", "type": "cpp", "path": "cpp\\error\\tx_exception.html", "desc": "std::std::tx_exception"}, {"name": "std:: std::std::uncaught_exception, std::uncaught_exceptions", "type": "cpp", "path": "cpp\\error\\uncaught_exception.html", "desc": "std:: std::std::uncaught_exception, std::uncaught_exceptions"}, {"name": "std::std::underflow_error", "type": "cpp", "path": "cpp\\error\\underflow_error.html", "desc": "std::std::underflow_error"}, {"name": "std::std::unexpected", "type": "cpp", "path": "cpp\\error\\unexpected.html", "desc": "std::std::unexpected"}, {"name": "std::std::unexpected_handler", "type": "cpp", "path": "cpp\\error\\unexpected_handler.html", "desc": "std::std::unexpected_handler"}, {"name": "std::bad_exception::std::bad_exception::bad_exception", "type": "cpp", "path": "cpp\\error\\bad_exception\\bad_exception.html", "desc": "std::bad_exception::std::bad_exception::bad_exception"}, {"name": "std::bad_exception::std::bad_exception::operator=", "type": "cpp", "path": "cpp\\error\\bad_exception\\operator=.html", "desc": "std::bad_exception::std::bad_exception::operator="}, {"name": "std::bad_exception::std::bad_exception::what", "type": "cpp", "path": "cpp\\error\\bad_exception\\what.html", "desc": "std::bad_exception::std::bad_exception::what"}, {"name": "std:: <std::errc>std::is_error_condition_enum<std::errc>", "type": "cpp", "path": "cpp\\error\\errc\\is_error_condition_enum.html", "desc": "std:: <std::errc>std::is_error_condition_enum<std::errc>"}, {"name": "std:: (std::errc)std::make_error_code(std::errc)", "type": "cpp", "path": "cpp\\error\\errc\\make_error_code.html", "desc": "std:: (std::errc)std::make_error_code(std::errc)"}, {"name": "std:: (std::errc)std::make_error_condition(std::errc)", "type": "cpp", "path": "cpp\\error\\errc\\make_error_condition.html", "desc": "std:: (std::errc)std::make_error_condition(std::errc)"}, {"name": "std::error_category::std::error_category::default_error_condition", "type": "cpp", "path": "cpp\\error\\error_category\\default_error_condition.html", "desc": "std::error_category::std::error_category::default_error_condition"}, {"name": "std::error_category::std::error_category::equivalent", "type": "cpp", "path": "cpp\\error\\error_category\\equivalent.html", "desc": "std::error_category::std::error_category::equivalent"}, {"name": "std::error_category::std::error_category::error_category", "type": "cpp", "path": "cpp\\error\\error_category\\error_category.html", "desc": "std::error_category::std::error_category::error_category"}, {"name": "std::error_category::std::error_category::message", "type": "cpp", "path": "cpp\\error\\error_category\\message.html", "desc": "std::error_category::std::error_category::message"}, {"name": "std::error_category::std::error_category::name", "type": "cpp", "path": "cpp\\error\\error_category\\name.html", "desc": "std::error_category::std::error_category::name"}, {"name": "std::error_category::std::error_category::operator==,!=,<,<=>", "type": "cpp", "path": "cpp\\error\\error_category\\operator_cmp.html", "desc": "std::error_category::std::error_category::operator==,!=,<,<=>"}, {"name": "std::error_category::std::error_category::~error_category", "type": "cpp", "path": "cpp\\error\\error_category\\~error_category.html", "desc": "std::error_category::std::error_category::~error_category"}, {"name": "std::error_code::std::error_code::assign", "type": "cpp", "path": "cpp\\error\\error_code\\assign.html", "desc": "std::error_code::std::error_code::assign"}, {"name": "std::error_code::std::error_code::category", "type": "cpp", "path": "cpp\\error\\error_code\\category.html", "desc": "std::error_code::std::error_code::category"}, {"name": "std::error_code::std::error_code::clear", "type": "cpp", "path": "cpp\\error\\error_code\\clear.html", "desc": "std::error_code::std::error_code::clear"}, {"name": "std::error_code::std::error_code::default_error_condition", "type": "cpp", "path": "cpp\\error\\error_code\\default_error_condition.html", "desc": "std::error_code::std::error_code::default_error_condition"}, {"name": "std::error_code::std::error_code::error_code", "type": "cpp", "path": "cpp\\error\\error_code\\error_code.html", "desc": "std::error_code::std::error_code::error_code"}, {"name": "std:: <std::error_code>std::hash<std::error_code>", "type": "cpp", "path": "cpp\\error\\error_code\\hash.html", "desc": "std:: <std::error_code>std::hash<std::error_code>"}, {"name": "std::std::is_error_code_enum", "type": "cpp", "path": "cpp\\error\\error_code\\is_error_code_enum.html", "desc": "std::std::is_error_code_enum"}, {"name": "std::error_code::std::error_code::message", "type": "cpp", "path": "cpp\\error\\error_code\\message.html", "desc": "std::error_code::std::error_code::message"}, {"name": "std::error_code::std::error_code::operator=", "type": "cpp", "path": "cpp\\error\\error_code\\operator=.html", "desc": "std::error_code::std::error_code::operator="}, {"name": "std::error_code::std::error_code::operator bool", "type": "cpp", "path": "cpp\\error\\error_code\\operator_bool.html", "desc": "std::error_code::std::error_code::operator bool"}, {"name": "std:: (std::error_code)std::operator==,!=,<,<=>(std::error_code)", "type": "cpp", "path": "cpp\\error\\error_code\\operator_cmp.html", "desc": "std:: (std::error_code)std::operator==,!=,<,<=>(std::error_code)"}, {"name": "std:: (std::error_code)std::operator<<(std::error_code)", "type": "cpp", "path": "cpp\\error\\error_code\\operator_ltlt.html", "desc": "std:: (std::error_code)std::operator<<(std::error_code)"}, {"name": "std::error_code::std::error_code::value", "type": "cpp", "path": "cpp\\error\\error_code\\value.html", "desc": "std::error_code::std::error_code::value"}, {"name": "std::error_condition::std::error_condition::assign", "type": "cpp", "path": "cpp\\error\\error_condition\\assign.html", "desc": "std::error_condition::std::error_condition::assign"}, {"name": "std::error_condition::std::error_condition::category", "type": "cpp", "path": "cpp\\error\\error_condition\\category.html", "desc": "std::error_condition::std::error_condition::category"}, {"name": "std::error_condition::std::error_condition::clear", "type": "cpp", "path": "cpp\\error\\error_condition\\clear.html", "desc": "std::error_condition::std::error_condition::clear"}, {"name": "std::error_condition::std::error_condition::error_condition", "type": "cpp", "path": "cpp\\error\\error_condition\\error_condition.html", "desc": "std::error_condition::std::error_condition::error_condition"}, {"name": "std:: <std::error_condition>std::hash<std::error_condition>", "type": "cpp", "path": "cpp\\error\\error_condition\\hash.html", "desc": "std:: <std::error_condition>std::hash<std::error_condition>"}, {"name": "std::std::is_error_condition_enum", "type": "cpp", "path": "cpp\\error\\error_condition\\is_error_condition_enum.html", "desc": "std::std::is_error_condition_enum"}, {"name": "std::error_condition::std::error_condition::message", "type": "cpp", "path": "cpp\\error\\error_condition\\message.html", "desc": "std::error_condition::std::error_condition::message"}, {"name": "std::error_condition::std::error_condition::operator=", "type": "cpp", "path": "cpp\\error\\error_condition\\operator=.html", "desc": "std::error_condition::std::error_condition::operator="}, {"name": "std::error_condition::std::error_condition::operator bool", "type": "cpp", "path": "cpp\\error\\error_condition\\operator_bool.html", "desc": "std::error_condition::std::error_condition::operator bool"}, {"name": "(std::error_condition)operator==,!=,<,<=>(std::error_condition)", "type": "cpp", "path": "cpp\\error\\error_condition\\operator_cmp.html", "desc": "(std::error_condition)operator==,!=,<,<=>(std::error_condition)"}, {"name": "std::error_condition::std::error_condition::value", "type": "cpp", "path": "cpp\\error\\error_condition\\value.html", "desc": "std::error_condition::std::error_condition::value"}, {"name": "std::exception::std::exception::exception", "type": "cpp", "path": "cpp\\error\\exception\\exception.html", "desc": "std::exception::std::exception::exception"}, {"name": "std::std::get_unexpected", "type": "cpp", "path": "cpp\\error\\exception\\get_unexpected.html", "desc": "std::std::get_unexpected"}, {"name": "std::exception::std::exception::operator=", "type": "cpp", "path": "cpp\\error\\exception\\operator=.html", "desc": "std::exception::std::exception::operator="}, {"name": "std::std::set_unexpected", "type": "cpp", "path": "cpp\\error\\exception\\set_unexpected.html", "desc": "std::std::set_unexpected"}, {"name": "std:: std::std::uncaught_exception, std::uncaught_exceptions", "type": "cpp", "path": "cpp\\error\\exception\\uncaught_exception.html", "desc": "std:: std::std::uncaught_exception, std::uncaught_exceptions"}, {"name": "std::std::unexpected", "type": "cpp", "path": "cpp\\error\\exception\\unexpected.html", "desc": "std::std::unexpected"}, {"name": "std::std::unexpected_handler", "type": "cpp", "path": "cpp\\error\\exception\\unexpected_handler.html", "desc": "std::std::unexpected_handler"}, {"name": "std::exception::std::exception::what", "type": "cpp", "path": "cpp\\error\\exception\\what.html", "desc": "std::exception::std::exception::what"}, {"name": "std::exception::std::exception::~exception", "type": "cpp", "path": "cpp\\error\\exception\\~exception.html", "desc": "std::exception::std::exception::~exception"}, {"name": "std::nested_exception::std::nested_exception::nested_exception", "type": "cpp", "path": "cpp\\error\\nested_exception\\nested_exception.html", "desc": "std::nested_exception::std::nested_exception::nested_exception"}, {"name": "std::nested_exception::std::nested_exception::nested_ptr", "type": "cpp", "path": "cpp\\error\\nested_exception\\nested_ptr.html", "desc": "std::nested_exception::std::nested_exception::nested_ptr"}, {"name": "std::nested_exception::std::nested_exception::operator=", "type": "cpp", "path": "cpp\\error\\nested_exception\\operator=.html", "desc": "std::nested_exception::std::nested_exception::operator="}, {"name": "std::nested_exception::std::nested_exception::rethrow_nested", "type": "cpp", "path": "cpp\\error\\nested_exception\\rethrow_nested.html", "desc": "std::nested_exception::std::nested_exception::rethrow_nested"}, {"name": "std::nested_exception::std::nested_exception::~nested_exception", "type": "cpp", "path": "cpp\\error\\nested_exception\\~nested_exception.html", "desc": "std::nested_exception::std::nested_exception::~nested_exception"}, {"name": "std::system_error::std::system_error::code", "type": "cpp", "path": "cpp\\error\\system_error\\code.html", "desc": "std::system_error::std::system_error::code"}, {"name": "std::system_error::std::system_error::operator=", "type": "cpp", "path": "cpp\\error\\system_error\\operator=.html", "desc": "std::system_error::std::system_error::operator="}, {"name": "std::system_error::std::system_error::system_error", "type": "cpp", "path": "cpp\\error\\system_error\\system_error.html", "desc": "std::system_error::std::system_error::system_error"}, {"name": "std::system_error::std::system_error::what", "type": "cpp", "path": "cpp\\error\\system_error\\what.html", "desc": "std::system_error::std::system_error::what"}, {"name": "cpp/experimental/atomic shared ptr", "type": "cpp", "path": "cpp\\experimental\\atomic_shared_ptr.html", "desc": "cpp/experimental/atomic shared ptr"}, {"name": "std::experimental::std::experimental::barrier", "type": "cpp", "path": "cpp\\experimental\\barrier.html", "desc": "std::experimental::std::experimental::barrier"}, {"name": "\u5e76\u53d1\u6269\u5c55", "type": "cpp", "path": "cpp\\experimental\\concurrency.html", "desc": "\u5e76\u53d1\u6269\u5c55"}, {"name": "\u5236\u7ea6\u4e0e\u6982\u5ff5", "type": "cpp", "path": "cpp\\experimental\\constraints.html", "desc": "\u5236\u7ea6\u4e0e\u6982\u5ff5"}, {"name": "std::experimental::std::experimental::erased_type", "type": "cpp", "path": "cpp\\experimental\\erased_type.html", "desc": "std::experimental::std::experimental::erased_type"}, {"name": "std::experimental::std::experimental::flex_barrier", "type": "cpp", "path": "cpp\\experimental\\flex_barrier.html", "desc": "std::experimental::std::experimental::flex_barrier"}, {"name": "\u6587\u4ef6\u7cfb\u7edf\u5e93", "type": "cpp", "path": "cpp\\experimental\\fs.html", "desc": "\u6587\u4ef6\u7cfb\u7edf\u5e93"}, {"name": "std::experimental::std::experimental::function", "type": "cpp", "path": "cpp\\experimental\\function.html", "desc": "std::experimental::std::experimental::function"}, {"name": "std::experimental::std::experimental::future", "type": "cpp", "path": "cpp\\experimental\\future.html", "desc": "std::experimental::std::experimental::future"}, {"name": "std::experimental:: std::experimental::std::experimental::invocation_type, std::experimental::raw_invocation_type", "type": "cpp", "path": "cpp\\experimental\\invocation_type.html", "desc": "std::experimental:: std::experimental::std::experimental::invocation_type, std::experimental::raw_invocation_type"}, {"name": "std::experimental:: std::experimental:: std::experimental::std::experimental::is_detected, std::experimental::detected_t, std::experimental::detected_or", "type": "cpp", "path": "cpp\\experimental\\is_detected.html", "desc": "std::experimental:: std::experimental:: std::experimental::std::experimental::is_detected, std::experimental::detected_t, std::experimental::detected_or"}, {"name": "std::experimental::std::experimental::latch", "type": "cpp", "path": "cpp\\experimental\\latch.html", "desc": "std::experimental::std::experimental::latch"}, {"name": "C++ \u6807\u51c6\u5e93\u6269\u5c55", "type": "cpp", "path": "cpp\\experimental\\lib_extensions.html", "desc": "C++ \u6807\u51c6\u5e93\u6269\u5c55"}, {"name": "C++ \u6807\u51c6\u5e93\u6269\u5c55\uff0c\u7248\u672c 2", "type": "cpp", "path": "cpp\\experimental\\lib_extensions_2.html", "desc": "C++ \u6807\u51c6\u5e93\u6269\u5c55\uff0c\u7248\u672c 2"}, {"name": "C++ \u6807\u51c6\u5e93\u6269\u5c55\uff0c\u7248\u672c 3", "type": "cpp", "path": "cpp\\experimental\\lib_extensions_3.html", "desc": "C++ \u6807\u51c6\u5e93\u6269\u5c55\uff0c\u7248\u672c 3"}, {"name": "std::experimental::std::experimental::make_array", "type": "cpp", "path": "cpp\\experimental\\make_array.html", "desc": "std::experimental::std::experimental::make_array"}, {"name": "std::experimental::std::experimental::make_exceptional_future", "type": "cpp", "path": "cpp\\experimental\\make_exceptional_future.html", "desc": "std::experimental::std::experimental::make_exceptional_future"}, {"name": "std::experimental::std::experimental::make_ready_future", "type": "cpp", "path": "cpp\\experimental\\make_ready_future.html", "desc": "std::experimental::std::experimental::make_ready_future"}, {"name": "std::experimental::std::experimental::nonesuch", "type": "cpp", "path": "cpp\\experimental\\nonesuch.html", "desc": "std::experimental::std::experimental::nonesuch"}, {"name": "std::experimental::std::experimental::not_fn", "type": "cpp", "path": "cpp\\experimental\\not_fn.html", "desc": "std::experimental::std::experimental::not_fn"}, {"name": "std::experimental::std::experimental::observer_ptr", "type": "cpp", "path": "cpp\\experimental\\observer_ptr.html", "desc": "std::experimental::std::experimental::observer_ptr"}, {"name": "std::experimental::std::experimental::ostream_joiner", "type": "cpp", "path": "cpp\\experimental\\ostream_joiner.html", "desc": "std::experimental::std::experimental::ostream_joiner"}, {"name": "\u5e76\u884c\u6269\u5c55", "type": "cpp", "path": "cpp\\experimental\\parallelism.html", "desc": "\u5e76\u884c\u6269\u5c55"}, {"name": "\u5e76\u884c\u6269\u5c55\uff0c\u7248\u672c 2", "type": "cpp", "path": "cpp\\experimental\\parallelism_2.html", "desc": "\u5e76\u884c\u6269\u5c55\uff0c\u7248\u672c 2"}, {"name": "std::experimental::std::experimental::propagate_const", "type": "cpp", "path": "cpp\\experimental\\propagate_const.html", "desc": "std::experimental::std::experimental::propagate_const"}, {"name": "std::experimental::std::experimental::randint", "type": "cpp", "path": "cpp\\experimental\\randint.html", "desc": "std::experimental::std::experimental::randint"}, {"name": "\u8303\u56f4\u6269\u5c55", "type": "cpp", "path": "cpp\\experimental\\ranges.html", "desc": "\u8303\u56f4\u6269\u5c55"}, {"name": "\u53cd\u5c04\u6269\u5c55", "type": "cpp", "path": "cpp\\experimental\\reflect.html", "desc": "\u53cd\u5c04\u6269\u5c55"}, {"name": "std::experimental::std::experimental::reseed", "type": "cpp", "path": "cpp\\experimental\\reseed.html", "desc": "std::experimental::std::experimental::reseed"}, {"name": "std::experimental::pmr:: std::pmr::experimental::std::experimental::pmr::resource_adaptor, std::pmr::experimental::resource_adaptor", "type": "cpp", "path": "cpp\\experimental\\resource_adaptor.html", "desc": "std::experimental::pmr:: std::pmr::experimental::std::experimental::pmr::resource_adaptor, std::pmr::experimental::resource_adaptor"}, {"name": "std::experimental::std::experimental::sample", "type": "cpp", "path": "cpp\\experimental\\sample.html", "desc": "std::experimental::std::experimental::sample"}, {"name": "std::experimental::std::experimental::scope_exit", "type": "cpp", "path": "cpp\\experimental\\scope_exit.html", "desc": "std::experimental::std::experimental::scope_exit"}, {"name": "std::experimental::std::experimental::scope_fail", "type": "cpp", "path": "cpp\\experimental\\scope_fail.html", "desc": "std::experimental::std::experimental::scope_fail"}, {"name": "std::experimental::std::experimental::scope_success", "type": "cpp", "path": "cpp\\experimental\\scope_success.html", "desc": "std::experimental::std::experimental::scope_success"}, {"name": "std::experimental::std::experimental::shared_future", "type": "cpp", "path": "cpp\\experimental\\shared_future.html", "desc": "std::experimental::std::experimental::shared_future"}, {"name": "std::experimental::std::experimental::shuffle", "type": "cpp", "path": "cpp\\experimental\\shuffle.html", "desc": "std::experimental::std::experimental::shuffle"}, {"name": "\u6570\u636e\u5e76\u884c\u5411\u91cf\u5e93", "type": "cpp", "path": "cpp\\experimental\\simd.html", "desc": "\u6570\u636e\u5e76\u884c\u5411\u91cf\u5e93"}, {"name": "std::experimental::std::experimental::source_location", "type": "cpp", "path": "cpp\\experimental\\source_location.html", "desc": "std::experimental::std::experimental::source_location"}, {"name": "\u6570\u5b66\u7279\u6b8a\u51fd\u6570", "type": "cpp", "path": "cpp\\experimental\\special_functions.html", "desc": "\u6570\u5b66\u7279\u6b8a\u51fd\u6570"}, {"name": "std::experimental::std::experimental::to_array", "type": "cpp", "path": "cpp\\experimental\\to_array.html", "desc": "std::experimental::std::experimental::to_array"}, {"name": "std::experimental::std::experimental::unique_resource", "type": "cpp", "path": "cpp\\experimental\\unique_resource.html", "desc": "std::experimental::std::experimental::unique_resource"}, {"name": "std::experimental::std::experimental::void_t", "type": "cpp", "path": "cpp\\experimental\\void_t.html", "desc": "std::experimental::std::experimental::void_t"}, {"name": "std::experimental::std::experimental::when_all", "type": "cpp", "path": "cpp\\experimental\\when_all.html", "desc": "std::experimental::std::experimental::when_all"}, {"name": "std::experimental::std::experimental::when_any", "type": "cpp", "path": "cpp\\experimental\\when_any.html", "desc": "std::experimental::std::experimental::when_any"}, {"name": "std::experimental::barrier::std::experimental::barrier::arrive_and_drop", "type": "cpp", "path": "cpp\\experimental\\barrier\\arrive_and_drop.html", "desc": "std::experimental::barrier::std::experimental::barrier::arrive_and_drop"}, {"name": "std::experimental::barrier::std::experimental::barrier::arrive_and_wait", "type": "cpp", "path": "cpp\\experimental\\barrier\\arrive_and_wait.html", "desc": "std::experimental::barrier::std::experimental::barrier::arrive_and_wait"}, {"name": "std::experimental::barrier::std::experimental::barrier::barrier", "type": "cpp", "path": "cpp\\experimental\\barrier\\barrier.html", "desc": "std::experimental::barrier::std::experimental::barrier::barrier"}, {"name": "std::experimental::barrier::std::experimental::barrier::~barrier", "type": "cpp", "path": "cpp\\experimental\\barrier\\~barrier.html", "desc": "std::experimental::barrier::std::experimental::barrier::~barrier"}, {"name": "std::experimental::std::experimental::erase (std::basic_string)", "type": "cpp", "path": "cpp\\experimental\\basic_string\\erase.html", "desc": "std::experimental::std::experimental::erase (std::basic_string)"}, {"name": "std::experimental::std::experimental::erase_if (std::basic_string)", "type": "cpp", "path": "cpp\\experimental\\basic_string\\erase_if.html", "desc": "std::experimental::std::experimental::erase_if (std::basic_string)"}, {"name": "std::experimental:: (\u5e76\u53d1 TS)std::experimental::packaged_task (\u5e76\u53d1 TS)", "type": "cpp", "path": "cpp\\experimental\\concurrency\\packaged_task.html", "desc": "std::experimental:: (\u5e76\u53d1 TS)std::experimental::packaged_task (\u5e76\u53d1 TS)"}, {"name": "std::experimental:: (\u5e76\u53d1 TS)std::experimental::promise (\u5e76\u53d1 TS)", "type": "cpp", "path": "cpp\\experimental\\concurrency\\promise.html", "desc": "std::experimental:: (\u5e76\u53d1 TS)std::experimental::promise (\u5e76\u53d1 TS)"}, {"name": "std::experimental::std::experimental::erase (std::deque)", "type": "cpp", "path": "cpp\\experimental\\deque\\erase.html", "desc": "std::experimental::std::experimental::erase (std::deque)"}, {"name": "std::experimental::std::experimental::erase_if (std::deque)", "type": "cpp", "path": "cpp\\experimental\\deque\\erase_if.html", "desc": "std::experimental::std::experimental::erase_if (std::deque)"}, {"name": "std::experimental::flex_barrier::std::experimental::flex_barrier::arrive_and_drop", "type": "cpp", "path": "cpp\\experimental\\flex_barrier\\arrive_and_drop.html", "desc": "std::experimental::flex_barrier::std::experimental::flex_barrier::arrive_and_drop"}, {"name": "std::experimental::flex_barrier::std::experimental::flex_barrier::arrive_and_wait", "type": "cpp", "path": "cpp\\experimental\\flex_barrier\\arrive_and_wait.html", "desc": "std::experimental::flex_barrier::std::experimental::flex_barrier::arrive_and_wait"}, {"name": "std::experimental::flex_barrier::std::experimental::flex_barrier::flex_barrier", "type": "cpp", "path": "cpp\\experimental\\flex_barrier\\flex_barrier.html", "desc": "std::experimental::flex_barrier::std::experimental::flex_barrier::flex_barrier"}, {"name": "std::experimental::flex_barrier::std::experimental::flex_barrier::~flex_barrier", "type": "cpp", "path": "cpp\\experimental\\flex_barrier\\~flex_barrier.html", "desc": "std::experimental::flex_barrier::std::experimental::flex_barrier::~flex_barrier"}, {"name": "std::experimental::std::experimental::erase (std::forward_list)", "type": "cpp", "path": "cpp\\experimental\\forward_list\\erase.html", "desc": "std::experimental::std::experimental::erase (std::forward_list)"}, {"name": "std::experimental::std::experimental::erase_if (std::forward_list)", "type": "cpp", "path": "cpp\\experimental\\forward_list\\erase_if.html", "desc": "std::experimental::std::experimental::erase_if (std::forward_list)"}, {"name": "std::experimental::function<R(Args...)>::std::experimental::function<R(Args...)>::function", "type": "cpp", "path": "cpp\\experimental\\function\\function.html", "desc": "std::experimental::function<R(Args...)>::std::experimental::function<R(Args...)>::function"}, {"name": "std::experimental::function<R(Args...)>::std::experimental::function<R(Args...)>::get_allocator", "type": "cpp", "path": "cpp\\experimental\\function\\get_allocator.html", "desc": "std::experimental::function<R(Args...)>::std::experimental::function<R(Args...)>::get_allocator"}, {"name": "std::experimental::function<R(Args...)>::std::experimental::function<R(Args...)>::get_memory_resource", "type": "cpp", "path": "cpp\\experimental\\function\\get_memory_resource.html", "desc": "std::experimental::function<R(Args...)>::std::experimental::function<R(Args...)>::get_memory_resource"}, {"name": "std::experimental::function<R(Args...)>::std::experimental::function<R(Args...)>::operator=", "type": "cpp", "path": "cpp\\experimental\\function\\operator=.html", "desc": "std::experimental::function<R(Args...)>::std::experimental::function<R(Args...)>::operator="}, {"name": "operator==,!=(std::experimental::function)", "type": "cpp", "path": "cpp\\experimental\\function\\operator_cmp.html", "desc": "operator==,!=(std::experimental::function)"}, {"name": "std::experimental::function<R(Args...)>::std::experimental::function<R(Args...)>::swap", "type": "cpp", "path": "cpp\\experimental\\function\\swap.html", "desc": "std::experimental::function<R(Args...)>::std::experimental::function<R(Args...)>::swap"}, {"name": "std::experimental::std::experimental::swap(std::experimental::function)", "type": "cpp", "path": "cpp\\experimental\\function\\swap2.html", "desc": "std::experimental::std::experimental::swap(std::experimental::function)"}, {"name": "std::std::uses_allocator<std::experimental::function>", "type": "cpp", "path": "cpp\\experimental\\function\\uses_allocator.html", "desc": "std::std::uses_allocator<std::experimental::function>"}, {"name": "std::experimental::future<T>::std::experimental::future<T>::future", "type": "cpp", "path": "cpp\\experimental\\future\\future.html", "desc": "std::experimental::future<T>::std::experimental::future<T>::future"}, {"name": "std::experimental::future<T>::std::experimental::future<T>::is_ready", "type": "cpp", "path": "cpp\\experimental\\future\\is_ready.html", "desc": "std::experimental::future<T>::std::experimental::future<T>::is_ready"}, {"name": "std::experimental::future<T>::std::experimental::future<T>::operator=", "type": "cpp", "path": "cpp\\experimental\\future\\operator=.html", "desc": "std::experimental::future<T>::std::experimental::future<T>::operator="}, {"name": "std::experimental::future<T>::std::experimental::future<T>::then", "type": "cpp", "path": "cpp\\experimental\\future\\then.html", "desc": "std::experimental::future<T>::std::experimental::future<T>::then"}, {"name": "std::experimental::latch::std::experimental::latch::count_down", "type": "cpp", "path": "cpp\\experimental\\latch\\count_down.html", "desc": "std::experimental::latch::std::experimental::latch::count_down"}, {"name": "std::experimental::latch::std::experimental::latch::count_down_and_wait", "type": "cpp", "path": "cpp\\experimental\\latch\\count_down_and_wait.html", "desc": "std::experimental::latch::std::experimental::latch::count_down_and_wait"}, {"name": "std::experimental::latch::std::experimental::latch::is_ready", "type": "cpp", "path": "cpp\\experimental\\latch\\is_ready.html", "desc": "std::experimental::latch::std::experimental::latch::is_ready"}, {"name": "std::experimental::latch::std::experimental::latch::latch", "type": "cpp", "path": "cpp\\experimental\\latch\\latch.html", "desc": "std::experimental::latch::std::experimental::latch::latch"}, {"name": "std::experimental::latch::std::experimental::latch::wait", "type": "cpp", "path": "cpp\\experimental\\latch\\wait.html", "desc": "std::experimental::latch::std::experimental::latch::wait"}, {"name": "std::experimental::latch::std::experimental::latch::~latch", "type": "cpp", "path": "cpp\\experimental\\latch\\~latch.html", "desc": "std::experimental::latch::std::experimental::latch::~latch"}, {"name": "std::experimental:: (\u5e93\u57fa\u7840 TS)std::experimental::packaged_task (\u5e93\u57fa\u7840 TS)", "type": "cpp", "path": "cpp\\experimental\\lib_extensions\\packaged_task.html", "desc": "std::experimental:: (\u5e93\u57fa\u7840 TS)std::experimental::packaged_task (\u5e93\u57fa\u7840 TS)"}, {"name": "std::experimental:: (\u5e93\u57fa\u7840 TS)std::experimental::promise (\u5e93\u57fa\u7840 TS)", "type": "cpp", "path": "cpp\\experimental\\lib_extensions\\promise.html", "desc": "std::experimental:: (\u5e93\u57fa\u7840 TS)std::experimental::promise (\u5e93\u57fa\u7840 TS)"}, {"name": "std::experimental::packaged_task<R(Args...)>::std::experimental::packaged_task<R(Args...)>::get_memory_resource", "type": "cpp", "path": "cpp\\experimental\\lib_extensions\\packaged_task\\get_memory_resource.html", "desc": "std::experimental::packaged_task<R(Args...)>::std::experimental::packaged_task<R(Args...)>::get_memory_resource"}, {"name": "std::experimental::packaged_task<R(Args...)>:: (\u5e93\u57fa\u7840 TS)std::experimental::packaged_task<R(Args...)>::packaged_task (\u5e93\u57fa\u7840 TS)", "type": "cpp", "path": "cpp\\experimental\\lib_extensions\\packaged_task\\packaged_task.html", "desc": "std::experimental::packaged_task<R(Args...)>:: (\u5e93\u57fa\u7840 TS)std::experimental::packaged_task<R(Args...)>::packaged_task (\u5e93\u57fa\u7840 TS)"}, {"name": "std::experimental::std::experimental::swap(std::experimental::packaged_task)", "type": "cpp", "path": "cpp\\experimental\\lib_extensions\\packaged_task\\swap2.html", "desc": "std::experimental::std::experimental::swap(std::experimental::packaged_task)"}, {"name": "std::std::uses_allocator<std::experimental::packaged_task>", "type": "cpp", "path": "cpp\\experimental\\lib_extensions\\packaged_task\\uses_allocator.html", "desc": "std::std::uses_allocator<std::experimental::packaged_task>"}, {"name": "std::experimental::promise<R>::std::experimental::promise<R>::get_memory_resource", "type": "cpp", "path": "cpp\\experimental\\lib_extensions\\promise\\get_memory_resource.html", "desc": "std::experimental::promise<R>::std::experimental::promise<R>::get_memory_resource"}, {"name": "std::experimental::promise<R>:: (\u5e93\u57fa\u7840 TS)std::experimental::promise<R>::promise (\u5e93\u57fa\u7840 TS)", "type": "cpp", "path": "cpp\\experimental\\lib_extensions\\promise\\promise.html", "desc": "std::experimental::promise<R>:: (\u5e93\u57fa\u7840 TS)std::experimental::promise<R>::promise (\u5e93\u57fa\u7840 TS)"}, {"name": "std::experimental::std::experimental::swap(std::experimental::promise)", "type": "cpp", "path": "cpp\\experimental\\lib_extensions\\promise\\swap2.html", "desc": "std::experimental::std::experimental::swap(std::experimental::promise)"}, {"name": "std::std::uses_allocator<std::experimental::promise>", "type": "cpp", "path": "cpp\\experimental\\lib_extensions\\promise\\uses_allocator.html", "desc": "std::std::uses_allocator<std::experimental::promise>"}, {"name": "std::experimental::std::experimental::erase (std::list)", "type": "cpp", "path": "cpp\\experimental\\list\\erase.html", "desc": "std::experimental::std::experimental::erase (std::list)"}, {"name": "std::experimental::std::experimental::erase_if (std::list)", "type": "cpp", "path": "cpp\\experimental\\list\\erase_if.html", "desc": "std::experimental::std::experimental::erase_if (std::list)"}, {"name": "std::experimental::std::experimental::erase_if (std::map)", "type": "cpp", "path": "cpp\\experimental\\map\\erase_if.html", "desc": "std::experimental::std::experimental::erase_if (std::map)"}, {"name": "std::experimental::std::experimental::erase_if (std::multimap)", "type": "cpp", "path": "cpp\\experimental\\multimap\\erase_if.html", "desc": "std::experimental::std::experimental::erase_if (std::multimap)"}, {"name": "std::experimental::std::experimental::erase_if (std::multiset)", "type": "cpp", "path": "cpp\\experimental\\multiset\\erase_if.html", "desc": "std::experimental::std::experimental::erase_if (std::multiset)"}, {"name": "std::experimental::observer_ptr<W>::std::experimental::observer_ptr<W>::get", "type": "cpp", "path": "cpp\\experimental\\observer_ptr\\get.html", "desc": "std::experimental::observer_ptr<W>::std::experimental::observer_ptr<W>::get"}, {"name": "std::std::hash(std::experimental::observer_ptr)", "type": "cpp", "path": "cpp\\experimental\\observer_ptr\\hash.html", "desc": "std::std::hash(std::experimental::observer_ptr)"}, {"name": "std::experimental::std::experimental::make_observer", "type": "cpp", "path": "cpp\\experimental\\observer_ptr\\make_observer.html", "desc": "std::experimental::std::experimental::make_observer"}, {"name": "std::experimental::observer_ptr<W>::std::experimental::observer_ptr<W>::observer_ptr", "type": "cpp", "path": "cpp\\experimental\\observer_ptr\\observer_ptr.html", "desc": "std::experimental::observer_ptr<W>::std::experimental::observer_ptr<W>::observer_ptr"}, {"name": "std::experimental::observer_ptr<W>:: std::experimental::observer_ptr<W>::std::experimental::observer_ptr<W>::operator*, std::experimental::observer_ptr<W>::operator->", "type": "cpp", "path": "cpp\\experimental\\observer_ptr\\operator%2A.html", "desc": "std::experimental::observer_ptr<W>:: std::experimental::observer_ptr<W>::std::experimental::observer_ptr<W>::operator*, std::experimental::observer_ptr<W>::operator->"}, {"name": "std::experimental::observer_ptr<W>::std::experimental::observer_ptr<W>::operator bool", "type": "cpp", "path": "cpp\\experimental\\observer_ptr\\operator_bool.html", "desc": "std::experimental::observer_ptr<W>::std::experimental::observer_ptr<W>::operator bool"}, {"name": "operator==,!=,<,<=,>,>=(std::experimental::observer_ptr)", "type": "cpp", "path": "cpp\\experimental\\observer_ptr\\operator_cmp.html", "desc": "operator==,!=,<,<=,>,>=(std::experimental::observer_ptr)"}, {"name": "std::experimental::observer_ptr<W>::std::experimental::observer_ptr<W>::operator element_type*", "type": "cpp", "path": "cpp\\experimental\\observer_ptr\\operator_pointer.html", "desc": "std::experimental::observer_ptr<W>::std::experimental::observer_ptr<W>::operator element_type*"}, {"name": "std::experimental::observer_ptr<W>::std::experimental::observer_ptr<W>::release", "type": "cpp", "path": "cpp\\experimental\\observer_ptr\\release.html", "desc": "std::experimental::observer_ptr<W>::std::experimental::observer_ptr<W>::release"}, {"name": "std::experimental::observer_ptr<W>::std::experimental::observer_ptr<W>::reset", "type": "cpp", "path": "cpp\\experimental\\observer_ptr\\reset.html", "desc": "std::experimental::observer_ptr<W>::std::experimental::observer_ptr<W>::reset"}, {"name": "std::experimental::observer_ptr<W>::std::experimental::observer_ptr<W>::swap", "type": "cpp", "path": "cpp\\experimental\\observer_ptr\\swap.html", "desc": "std::experimental::observer_ptr<W>::std::experimental::observer_ptr<W>::swap"}, {"name": "std::experimental::std::experimental::swap(std::experimental::observer_ptr)", "type": "cpp", "path": "cpp\\experimental\\observer_ptr\\swap2.html", "desc": "std::experimental::std::experimental::swap(std::experimental::observer_ptr)"}, {"name": "std::experimental::std::experimental::make_ostream_joiner", "type": "cpp", "path": "cpp\\experimental\\ostream_joiner\\make_ostream_joiner.html", "desc": "std::experimental::std::experimental::make_ostream_joiner"}, {"name": "std::experimental::ostream_joiner<DelimT,CharT,Traits>::std::experimental::ostream_joiner<DelimT,CharT,Traits>::operator*", "type": "cpp", "path": "cpp\\experimental\\ostream_joiner\\operator%2A.html", "desc": "std::experimental::ostream_joiner<DelimT,CharT,Traits>::std::experimental::ostream_joiner<DelimT,CharT,Traits>::operator*"}, {"name": "std::experimental::ostream_joiner<DelimT,CharT,Traits>::std::experimental::ostream_joiner<DelimT,CharT,Traits>::operator=", "type": "cpp", "path": "cpp\\experimental\\ostream_joiner\\operator=.html", "desc": "std::experimental::ostream_joiner<DelimT,CharT,Traits>::std::experimental::ostream_joiner<DelimT,CharT,Traits>::operator="}, {"name": "std::experimental::ostream_joiner<DelimT,CharT,Traits>::std::experimental::ostream_joiner<DelimT,CharT,Traits>::operator++", "type": "cpp", "path": "cpp\\experimental\\ostream_joiner\\operator_arith.html", "desc": "std::experimental::ostream_joiner<DelimT,CharT,Traits>::std::experimental::ostream_joiner<DelimT,CharT,Traits>::operator++"}, {"name": "std::experimental::ostream_joiner<DelimT,CharT,Traits>::std::experimental::ostream_joiner<DelimT,CharT,Traits>::ostream_joiner", "type": "cpp", "path": "cpp\\experimental\\ostream_joiner\\ostream_joiner.html", "desc": "std::experimental::ostream_joiner<DelimT,CharT,Traits>::std::experimental::ostream_joiner<DelimT,CharT,Traits>::ostream_joiner"}, {"name": "std::std::equal_to, not_equal_to, less, greater, less_equal, greater_equal(std::experimental::propagate_const)", "type": "cpp", "path": "cpp\\experimental\\propagate_const\\cmp_func.html", "desc": "std::std::equal_to, not_equal_to, less, greater, less_equal, greater_equal(std::experimental::propagate_const)"}, {"name": "std::experimental::propagate_const<T>::std::experimental::propagate_const<T>::get", "type": "cpp", "path": "cpp\\experimental\\propagate_const\\get.html", "desc": "std::experimental::propagate_const<T>::std::experimental::propagate_const<T>::get"}, {"name": "std::experimental::std::experimental::get_underlying", "type": "cpp", "path": "cpp\\experimental\\propagate_const\\get_underlying.html", "desc": "std::experimental::std::experimental::get_underlying"}, {"name": "std::std::hash(std::experimental::propagate_const)", "type": "cpp", "path": "cpp\\experimental\\propagate_const\\hash.html", "desc": "std::std::hash(std::experimental::propagate_const)"}, {"name": "std::experimental::propagate_const<T>:: std::experimental::propagate_const<T>::std::experimental::propagate_const<T>::operator*, std::experimental::propagate_const<T>::operator->", "type": "cpp", "path": "cpp\\experimental\\propagate_const\\operator%2A.html", "desc": "std::experimental::propagate_const<T>:: std::experimental::propagate_const<T>::std::experimental::propagate_const<T>::operator*, std::experimental::propagate_const<T>::operator->"}, {"name": "std::experimental::propagate_const<T>::std::experimental::propagate_const<T>::operator=", "type": "cpp", "path": "cpp\\experimental\\propagate_const\\operator=.html", "desc": "std::experimental::propagate_const<T>::std::experimental::propagate_const<T>::operator="}, {"name": "std::experimental::propagate_const<T>::std::experimental::propagate_const<T>::operator bool", "type": "cpp", "path": "cpp\\experimental\\propagate_const\\operator_bool.html", "desc": "std::experimental::propagate_const<T>::std::experimental::propagate_const<T>::operator bool"}, {"name": "operator==,!=,<,<=,>,>=(std::experimental::propagate_const)", "type": "cpp", "path": "cpp\\experimental\\propagate_const\\operator_cmp.html", "desc": "operator==,!=,<,<=,>,>=(std::experimental::propagate_const)"}, {"name": "std::experimental::propagate_const<T>:: std::experimental::propagate_const<T>::std::experimental::propagate_const<T>::operator element_type*, std::experimental::propagate_const<T>::operator const element_type*", "type": "cpp", "path": "cpp\\experimental\\propagate_const\\operator_element_type%2A.html", "desc": "std::experimental::propagate_const<T>:: std::experimental::propagate_const<T>::std::experimental::propagate_const<T>::operator element_type*, std::experimental::propagate_const<T>::operator const element_type*"}, {"name": "std::experimental::propagate_const<T>::std::experimental::propagate_const<T>::propagate_const", "type": "cpp", "path": "cpp\\experimental\\propagate_const\\propagate_const.html", "desc": "std::experimental::propagate_const<T>::std::experimental::propagate_const<T>::propagate_const"}, {"name": "std::experimental::propagate_const<T>::std::experimental::propagate_const<T>::swap", "type": "cpp", "path": "cpp\\experimental\\propagate_const\\swap.html", "desc": "std::experimental::propagate_const<T>::std::experimental::propagate_const<T>::swap"}, {"name": "std::experimental::std::experimental::swap(std::experimental::propagate_const)", "type": "cpp", "path": "cpp\\experimental\\propagate_const\\swap2.html", "desc": "std::experimental::std::experimental::swap(std::experimental::propagate_const)"}, {"name": "std::experimental::ranges:: std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::all_of, std::experimental::ranges::any_of, std::experimental::ranges::none_of", "type": "cpp", "path": "cpp\\experimental\\ranges\\algorithm\\all_any_none_of.html", "desc": "std::experimental::ranges:: std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::all_of, std::experimental::ranges::any_of, std::experimental::ranges::none_of"}, {"name": "std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::copy, std::experimental::ranges::copy_if", "type": "cpp", "path": "cpp\\experimental\\ranges\\algorithm\\copy.html", "desc": "std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::copy, std::experimental::ranges::copy_if"}, {"name": "std::experimental::ranges::std::experimental::ranges::equal", "type": "cpp", "path": "cpp\\experimental\\ranges\\algorithm\\equal.html", "desc": "std::experimental::ranges::std::experimental::ranges::equal"}, {"name": "std::experimental::ranges::std::experimental::ranges::for_each", "type": "cpp", "path": "cpp\\experimental\\ranges\\algorithm\\for_each.html", "desc": "std::experimental::ranges::std::experimental::ranges::for_each"}, {"name": "std::experimental::ranges::std::experimental::ranges::sort", "type": "cpp", "path": "cpp\\experimental\\ranges\\algorithm\\sort.html", "desc": "std::experimental::ranges::std::experimental::ranges::sort"}, {"name": "std::experimental::ranges::tag::std::experimental::ranges::tag::in, in1, in2, out, out1, out2, fun, min, max, begin, end", "type": "cpp", "path": "cpp\\experimental\\ranges\\algorithm\\tags.html", "desc": "std::experimental::ranges::tag::std::experimental::ranges::tag::in, in1, in2, out, out1, out2, fun, min, max, begin, end"}, {"name": "std::experimental::ranges::std::experimental::ranges::Assignable", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\Assignable.html", "desc": "std::experimental::ranges::std::experimental::ranges::Assignable"}, {"name": "std::experimental::ranges::std::experimental::ranges::Boolean", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\Boolean.html", "desc": "std::experimental::ranges::std::experimental::ranges::Boolean"}, {"name": "std::experimental::ranges::std::experimental::ranges::Common", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\Common.html", "desc": "std::experimental::ranges::std::experimental::ranges::Common"}, {"name": "std::experimental::ranges::std::experimental::ranges::CommonReference", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\CommonReference.html", "desc": "std::experimental::ranges::std::experimental::ranges::CommonReference"}, {"name": "std::experimental::ranges::std::experimental::ranges::Constructible", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\Constructible.html", "desc": "std::experimental::ranges::std::experimental::ranges::Constructible"}, {"name": "std::experimental::ranges::std::experimental::ranges::ConvertibleTo", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\ConvertibleTo.html", "desc": "std::experimental::ranges::std::experimental::ranges::ConvertibleTo"}, {"name": "std::experimental::ranges::std::experimental::ranges::Copyable", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\Copyable.html", "desc": "std::experimental::ranges::std::experimental::ranges::Copyable"}, {"name": "std::experimental::ranges::std::experimental::ranges::CopyConstructible", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\CopyConstructible.html", "desc": "std::experimental::ranges::std::experimental::ranges::CopyConstructible"}, {"name": "std::experimental::ranges::std::experimental::ranges::DefaultConstructible", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\DefaultConstructible.html", "desc": "std::experimental::ranges::std::experimental::ranges::DefaultConstructible"}, {"name": "std::experimental::ranges::std::experimental::ranges::DerivedFrom", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\DerivedFrom.html", "desc": "std::experimental::ranges::std::experimental::ranges::DerivedFrom"}, {"name": "std::experimental::ranges::std::experimental::ranges::Destructible", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\Destructible.html", "desc": "std::experimental::ranges::std::experimental::ranges::Destructible"}, {"name": "std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::EqualityComparable, std::experimental::ranges::EqualityComparableWith", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\EqualityComparable.html", "desc": "std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::EqualityComparable, std::experimental::ranges::EqualityComparableWith"}, {"name": "std::experimental::ranges::std::experimental::ranges::Integral", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\Integral.html", "desc": "std::experimental::ranges::std::experimental::ranges::Integral"}, {"name": "std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::Invocable, std::experimental::ranges::RegularInvocable", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\Invocable.html", "desc": "std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::Invocable, std::experimental::ranges::RegularInvocable"}, {"name": "std::experimental::ranges::std::experimental::ranges::Movable", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\Movable.html", "desc": "std::experimental::ranges::std::experimental::ranges::Movable"}, {"name": "std::experimental::ranges::std::experimental::ranges::MoveConstructible", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\MoveConstructible.html", "desc": "std::experimental::ranges::std::experimental::ranges::MoveConstructible"}, {"name": "std::experimental::ranges::std::experimental::ranges::Predicate", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\Predicate.html", "desc": "std::experimental::ranges::std::experimental::ranges::Predicate"}, {"name": "std::experimental::ranges::std::experimental::ranges::Regular", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\Regular.html", "desc": "std::experimental::ranges::std::experimental::ranges::Regular"}, {"name": "std::experimental::ranges::std::experimental::ranges::Relation", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\Relation.html", "desc": "std::experimental::ranges::std::experimental::ranges::Relation"}, {"name": "std::experimental::ranges::std::experimental::ranges::Same", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\Same.html", "desc": "std::experimental::ranges::std::experimental::ranges::Same"}, {"name": "std::experimental::ranges::std::experimental::ranges::Semiregular", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\Semiregular.html", "desc": "std::experimental::ranges::std::experimental::ranges::Semiregular"}, {"name": "std::experimental::ranges::std::experimental::ranges::SignedIntegral", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\SignedIntegral.html", "desc": "std::experimental::ranges::std::experimental::ranges::SignedIntegral"}, {"name": "std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::StrictTotallyOrdered, std::experimental::ranges::StrictTotallyOrderedWith", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\StrictTotallyOrdered.html", "desc": "std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::StrictTotallyOrdered, std::experimental::ranges::StrictTotallyOrderedWith"}, {"name": "std::experimental::ranges::std::experimental::ranges::StrictWeakOrder", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\StrictWeakOrder.html", "desc": "std::experimental::ranges::std::experimental::ranges::StrictWeakOrder"}, {"name": "std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::Swappable, std::experimental::ranges::SwappableWith", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\Swappable.html", "desc": "std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::Swappable, std::experimental::ranges::SwappableWith"}, {"name": "std::experimental::ranges::std::experimental::ranges::UniformRandomNumberGenerator", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\UniformRandomNumberGenerator.html", "desc": "std::experimental::ranges::std::experimental::ranges::UniformRandomNumberGenerator"}, {"name": "std::experimental::ranges::std::experimental::ranges::UnsignedIntegral", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\UnsignedIntegral.html", "desc": "std::experimental::ranges::std::experimental::ranges::UnsignedIntegral"}, {"name": "std::experimental::ranges::std::experimental::ranges::WeaklyEqualityComparableWith", "type": "cpp", "path": "cpp\\experimental\\ranges\\concepts\\WeaklyEqualityComparableWith.html", "desc": "std::experimental::ranges::std::experimental::ranges::WeaklyEqualityComparableWith"}, {"name": "std::experimental::ranges::std::experimental::ranges::equal_to", "type": "cpp", "path": "cpp\\experimental\\ranges\\functional\\equal_to.html", "desc": "std::experimental::ranges::std::experimental::ranges::equal_to"}, {"name": "std::experimental::ranges::std::experimental::ranges::greater", "type": "cpp", "path": "cpp\\experimental\\ranges\\functional\\greater.html", "desc": "std::experimental::ranges::std::experimental::ranges::greater"}, {"name": "std::experimental::ranges::std::experimental::ranges::greater_equal", "type": "cpp", "path": "cpp\\experimental\\ranges\\functional\\greater_equal.html", "desc": "std::experimental::ranges::std::experimental::ranges::greater_equal"}, {"name": "std::experimental::ranges::std::experimental::ranges::identity", "type": "cpp", "path": "cpp\\experimental\\ranges\\functional\\identity.html", "desc": "std::experimental::ranges::std::experimental::ranges::identity"}, {"name": "std::experimental::ranges::std::experimental::ranges::invoke", "type": "cpp", "path": "cpp\\experimental\\ranges\\functional\\invoke.html", "desc": "std::experimental::ranges::std::experimental::ranges::invoke"}, {"name": "std::experimental::ranges::std::experimental::ranges::less", "type": "cpp", "path": "cpp\\experimental\\ranges\\functional\\less.html", "desc": "std::experimental::ranges::std::experimental::ranges::less"}, {"name": "std::experimental::ranges::std::experimental::ranges::less_equal", "type": "cpp", "path": "cpp\\experimental\\ranges\\functional\\less_equal.html", "desc": "std::experimental::ranges::std::experimental::ranges::less_equal"}, {"name": "std::experimental::ranges::std::experimental::ranges::not_equal_to", "type": "cpp", "path": "cpp\\experimental\\ranges\\functional\\not_equal_to.html", "desc": "std::experimental::ranges::std::experimental::ranges::not_equal_to"}, {"name": "std::experimental::ranges::std::experimental::ranges::advance", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\advance.html", "desc": "std::experimental::ranges::std::experimental::ranges::advance"}, {"name": "std::experimental::ranges::std::experimental::ranges::BidirectionalIterator", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\BidirectionalIterator.html", "desc": "std::experimental::ranges::std::experimental::ranges::BidirectionalIterator"}, {"name": "std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::dangling, std::experimental::ranges::safe_iterator_t", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\dangling.html", "desc": "std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::dangling, std::experimental::ranges::safe_iterator_t"}, {"name": "std::experimental::ranges::std::experimental::ranges::difference_type", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\difference_type.html", "desc": "std::experimental::ranges::std::experimental::ranges::difference_type"}, {"name": "std::experimental::ranges::std::experimental::ranges::distance", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\distance.html", "desc": "std::experimental::ranges::std::experimental::ranges::distance"}, {"name": "std::experimental::ranges::std::experimental::ranges::ForwardIterator", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\ForwardIterator.html", "desc": "std::experimental::ranges::std::experimental::ranges::ForwardIterator"}, {"name": "std::experimental::ranges::std::experimental::ranges::Incrementable", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\Incrementable.html", "desc": "std::experimental::ranges::std::experimental::ranges::Incrementable"}, {"name": "std::experimental::ranges::std::experimental::ranges::IndirectlyComparable", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\IndirectlyComparable.html", "desc": "std::experimental::ranges::std::experimental::ranges::IndirectlyComparable"}, {"name": "std::experimental::ranges::std::experimental::ranges::IndirectlyCopyable", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\IndirectlyCopyable.html", "desc": "std::experimental::ranges::std::experimental::ranges::IndirectlyCopyable"}, {"name": "std::experimental::ranges::std::experimental::ranges::IndirectlyCopyableStorable", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\IndirectlyCopyableStorable.html", "desc": "std::experimental::ranges::std::experimental::ranges::IndirectlyCopyableStorable"}, {"name": "std::experimental::ranges::std::experimental::ranges::IndirectlyMovable", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\IndirectlyMovable.html", "desc": "std::experimental::ranges::std::experimental::ranges::IndirectlyMovable"}, {"name": "std::experimental::ranges::std::experimental::ranges::IndirectlyMovableStorable", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\IndirectlyMovableStorable.html", "desc": "std::experimental::ranges::std::experimental::ranges::IndirectlyMovableStorable"}, {"name": "std::experimental::ranges::std::experimental::ranges::IndirectlySwappable", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\IndirectlySwappable.html", "desc": "std::experimental::ranges::std::experimental::ranges::IndirectlySwappable"}, {"name": "std::experimental::ranges::std::experimental::ranges::IndirectRelation", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\IndirectRelation.html", "desc": "std::experimental::ranges::std::experimental::ranges::IndirectRelation"}, {"name": "std::experimental::ranges::std::experimental::ranges::IndirectStrictWeakOrder", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\IndirectStrictWeakOrder.html", "desc": "std::experimental::ranges::std::experimental::ranges::IndirectStrictWeakOrder"}, {"name": "std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::IndirectUnaryInvocable, std::experimental::ranges::IndirectRegularUnaryInvocable", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\IndirectUnaryInvocable.html", "desc": "std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::IndirectUnaryInvocable, std::experimental::ranges::IndirectRegularUnaryInvocable"}, {"name": "std::experimental::ranges::std::experimental::ranges::IndirectUnaryPredicate", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\IndirectUnaryPredicate.html", "desc": "std::experimental::ranges::std::experimental::ranges::IndirectUnaryPredicate"}, {"name": "std::experimental::ranges::std::experimental::ranges::indirect_result_of", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\indirect_result_of.html", "desc": "std::experimental::ranges::std::experimental::ranges::indirect_result_of"}, {"name": "std::experimental::ranges::std::experimental::ranges::InputIterator", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\InputIterator.html", "desc": "std::experimental::ranges::std::experimental::ranges::InputIterator"}, {"name": "std::experimental::ranges::std::experimental::ranges::Iterator", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\Iterator.html", "desc": "std::experimental::ranges::std::experimental::ranges::Iterator"}, {"name": "std::experimental::ranges::std::experimental::ranges::iterator_category", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\iterator_category.html", "desc": "std::experimental::ranges::std::experimental::ranges::iterator_category"}, {"name": "std::experimental::ranges:: std::experimental::ranges:: std::experimental::ranges:: std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::input_iterator_tag, std::experimental::ranges::output_iterator_tag, std::experimental::ranges::forward_iterator_tag, std::experimental::ranges::bidirectional_iterator_tag, std::experimental::ranges::random_access_iterator_tag", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\iterator_tags.html", "desc": "std::experimental::ranges:: std::experimental::ranges:: std::experimental::ranges:: std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::input_iterator_tag, std::experimental::ranges::output_iterator_tag, std::experimental::ranges::forward_iterator_tag, std::experimental::ranges::bidirectional_iterator_tag, std::experimental::ranges::random_access_iterator_tag"}, {"name": "std::experimental::ranges::std::experimental::ranges::Mergeable", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\Mergeable.html", "desc": "std::experimental::ranges::std::experimental::ranges::Mergeable"}, {"name": "std::experimental::ranges::std::experimental::ranges::next", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\next.html", "desc": "std::experimental::ranges::std::experimental::ranges::next"}, {"name": "std::experimental::ranges::std::experimental::ranges::OutputIterator", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\OutputIterator.html", "desc": "std::experimental::ranges::std::experimental::ranges::OutputIterator"}, {"name": "std::experimental::ranges::std::experimental::ranges::Permutable", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\Permutable.html", "desc": "std::experimental::ranges::std::experimental::ranges::Permutable"}, {"name": "std::experimental::ranges::std::experimental::ranges::prev", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\prev.html", "desc": "std::experimental::ranges::std::experimental::ranges::prev"}, {"name": "std::experimental::ranges::std::experimental::ranges::projected", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\projected.html", "desc": "std::experimental::ranges::std::experimental::ranges::projected"}, {"name": "std::experimental::ranges::std::experimental::ranges::RandomAccessIterator", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\RandomAccessIterator.html", "desc": "std::experimental::ranges::std::experimental::ranges::RandomAccessIterator"}, {"name": "std::experimental::ranges::std::experimental::ranges::Readable", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\Readable.html", "desc": "std::experimental::ranges::std::experimental::ranges::Readable"}, {"name": "std::experimental::ranges:: std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::reference_t, std::experimental::ranges::rvalue_reference_t, std::experimental::ranges::iter_common_reference_t", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\reference_t.html", "desc": "std::experimental::ranges:: std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::reference_t, std::experimental::ranges::rvalue_reference_t, std::experimental::ranges::iter_common_reference_t"}, {"name": "std::experimental::ranges::std::experimental::ranges::Sentinel", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\Sentinel.html", "desc": "std::experimental::ranges::std::experimental::ranges::Sentinel"}, {"name": "std::experimental::ranges::std::experimental::ranges::SizedSentinel", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\SizedSentinel.html", "desc": "std::experimental::ranges::std::experimental::ranges::SizedSentinel"}, {"name": "std::experimental::ranges::std::experimental::ranges::Sortable", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\Sortable.html", "desc": "std::experimental::ranges::std::experimental::ranges::Sortable"}, {"name": "std::experimental::ranges::std::experimental::ranges::value_type", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\value_type.html", "desc": "std::experimental::ranges::std::experimental::ranges::value_type"}, {"name": "std::experimental::ranges::std::experimental::ranges::WeaklyIncrementable", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\WeaklyIncrementable.html", "desc": "std::experimental::ranges::std::experimental::ranges::WeaklyIncrementable"}, {"name": "std::experimental::ranges::std::experimental::ranges::Writable", "type": "cpp", "path": "cpp\\experimental\\ranges\\iterator\\Writable.html", "desc": "std::experimental::ranges::std::experimental::ranges::Writable"}, {"name": "std::experimental::ranges::std::experimental::ranges::BidirectionalRange", "type": "cpp", "path": "cpp\\experimental\\ranges\\range\\BidirectionalRange.html", "desc": "std::experimental::ranges::std::experimental::ranges::BidirectionalRange"}, {"name": "std::experimental::ranges::std::experimental::ranges::BoundedRange", "type": "cpp", "path": "cpp\\experimental\\ranges\\range\\BoundedRange.html", "desc": "std::experimental::ranges::std::experimental::ranges::BoundedRange"}, {"name": "std::experimental::ranges::std::experimental::ranges::ForwardRange", "type": "cpp", "path": "cpp\\experimental\\ranges\\range\\ForwardRange.html", "desc": "std::experimental::ranges::std::experimental::ranges::ForwardRange"}, {"name": "std::experimental::ranges::std::experimental::ranges::InputRange", "type": "cpp", "path": "cpp\\experimental\\ranges\\range\\InputRange.html", "desc": "std::experimental::ranges::std::experimental::ranges::InputRange"}, {"name": "std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::iterator_t, std::experimental::ranges::sentinel_t", "type": "cpp", "path": "cpp\\experimental\\ranges\\range\\iterator_t.html", "desc": "std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::iterator_t, std::experimental::ranges::sentinel_t"}, {"name": "std::experimental::ranges::std::experimental::ranges::OutputRange", "type": "cpp", "path": "cpp\\experimental\\ranges\\range\\OutputRange.html", "desc": "std::experimental::ranges::std::experimental::ranges::OutputRange"}, {"name": "std::experimental::ranges::std::experimental::ranges::RandomAccessRange", "type": "cpp", "path": "cpp\\experimental\\ranges\\range\\RandomAccessRange.html", "desc": "std::experimental::ranges::std::experimental::ranges::RandomAccessRange"}, {"name": "std::experimental::ranges::std::experimental::ranges::Range", "type": "cpp", "path": "cpp\\experimental\\ranges\\range\\Range.html", "desc": "std::experimental::ranges::std::experimental::ranges::Range"}, {"name": "std::experimental::ranges::std::experimental::ranges::SizedRange", "type": "cpp", "path": "cpp\\experimental\\ranges\\range\\SizedRange.html", "desc": "std::experimental::ranges::std::experimental::ranges::SizedRange"}, {"name": "std::experimental::ranges::std::experimental::ranges::View", "type": "cpp", "path": "cpp\\experimental\\ranges\\range\\View.html", "desc": "std::experimental::ranges::std::experimental::ranges::View"}, {"name": "std::experimental::ranges::std::experimental::ranges::common_reference", "type": "cpp", "path": "cpp\\experimental\\ranges\\type_traits\\common_reference.html", "desc": "std::experimental::ranges::std::experimental::ranges::common_reference"}, {"name": "std::experimental::ranges::std::experimental::ranges::common_type", "type": "cpp", "path": "cpp\\experimental\\ranges\\type_traits\\common_type.html", "desc": "std::experimental::ranges::std::experimental::ranges::common_type"}, {"name": "std::experimental::ranges:: std::experimental::ranges:: std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::is_swappable_with, std::experimental::ranges::is_swappable, std::experimental::ranges::is_nothrow_swappable_with, std::experimental::ranges::is_nothrow_swappable", "type": "cpp", "path": "cpp\\experimental\\ranges\\type_traits\\is_swappable.html", "desc": "std::experimental::ranges:: std::experimental::ranges:: std::experimental::ranges:: std::experimental::ranges::std::experimental::ranges::is_swappable_with, std::experimental::ranges::is_swappable, std::experimental::ranges::is_nothrow_swappable_with, std::experimental::ranges::is_nothrow_swappable"}, {"name": "std::experimental::ranges::std::experimental::ranges::exchange", "type": "cpp", "path": "cpp\\experimental\\ranges\\utility\\exchange.html", "desc": "std::experimental::ranges::std::experimental::ranges::exchange"}, {"name": "std::experimental::ranges::std::experimental::ranges::make_tagged_pair", "type": "cpp", "path": "cpp\\experimental\\ranges\\utility\\make_tagged_pair.html", "desc": "std::experimental::ranges::std::experimental::ranges::make_tagged_pair"}, {"name": "std::experimental::ranges::std::experimental::ranges::make_tagged_tuple", "type": "cpp", "path": "cpp\\experimental\\ranges\\utility\\make_tagged_tuple.html", "desc": "std::experimental::ranges::std::experimental::ranges::make_tagged_tuple"}, {"name": "std::experimental::ranges::std::experimental::ranges::swap", "type": "cpp", "path": "cpp\\experimental\\ranges\\utility\\swap.html", "desc": "std::experimental::ranges::std::experimental::ranges::swap"}, {"name": "std::experimental::ranges::std::experimental::ranges::tagged", "type": "cpp", "path": "cpp\\experimental\\ranges\\utility\\tagged.html", "desc": "std::experimental::ranges::std::experimental::ranges::tagged"}, {"name": "std::experimental::ranges::std::experimental::ranges::TaggedType", "type": "cpp", "path": "cpp\\experimental\\ranges\\utility\\TaggedType.html", "desc": "std::experimental::ranges::std::experimental::ranges::TaggedType"}, {"name": "std::experimental::ranges::std::experimental::ranges::tagged_pair", "type": "cpp", "path": "cpp\\experimental\\ranges\\utility\\tagged_pair.html", "desc": "std::experimental::ranges::std::experimental::ranges::tagged_pair"}, {"name": "std::experimental::ranges::std::experimental::ranges::tagged_tuple", "type": "cpp", "path": "cpp\\experimental\\ranges\\utility\\tagged_tuple.html", "desc": "std::experimental::ranges::std::experimental::ranges::tagged_tuple"}, {"name": "std::experimental::ranges::std::experimental::ranges::TagSpecifier", "type": "cpp", "path": "cpp\\experimental\\ranges\\utility\\TagSpecifier.html", "desc": "std::experimental::ranges::std::experimental::ranges::TagSpecifier"}, {"name": "std::experimental::ranges::tagged<Base,Tags...>::std::experimental::ranges::tagged<Base,Tags...>::operator=", "type": "cpp", "path": "cpp\\experimental\\ranges\\utility\\tagged\\operator=.html", "desc": "std::experimental::ranges::tagged<Base,Tags...>::std::experimental::ranges::tagged<Base,Tags...>::operator="}, {"name": "std::experimental::ranges::tagged<Base,Tags...>::std::experimental::ranges::tagged<Base,Tags...>::swap", "type": "cpp", "path": "cpp\\experimental\\ranges\\utility\\tagged\\swap.html", "desc": "std::experimental::ranges::tagged<Base,Tags...>::std::experimental::ranges::tagged<Base,Tags...>::swap"}, {"name": "std::experimental::ranges:: (ranges::tagged)std::experimental::ranges::swap (ranges::tagged)", "type": "cpp", "path": "cpp\\experimental\\ranges\\utility\\tagged\\swap2.html", "desc": "std::experimental::ranges:: (ranges::tagged)std::experimental::ranges::swap (ranges::tagged)"}, {"name": "std::experimental::ranges::tagged<Base,Tags...>::std::experimental::ranges::tagged<Base,Tags...>::tagged", "type": "cpp", "path": "cpp\\experimental\\ranges\\utility\\tagged\\tagged.html", "desc": "std::experimental::ranges::tagged<Base,Tags...>::std::experimental::ranges::tagged<Base,Tags...>::tagged"}, {"name": "std::std::tuple_element<std::experimental::ranges::tagged>", "type": "cpp", "path": "cpp\\experimental\\ranges\\utility\\tagged\\tuple_element.html", "desc": "std::std::tuple_element<std::experimental::ranges::tagged>"}, {"name": "std::std::tuple_size<std::experimental::ranges::tagged>", "type": "cpp", "path": "cpp\\experimental\\ranges\\utility\\tagged\\tuple_size.html", "desc": "std::std::tuple_size<std::experimental::ranges::tagged>"}, {"name": "std::experimental::reflect::std::experimental::reflect::get_source_line", "type": "cpp", "path": "cpp\\experimental\\reflect\\get_source_line.html", "desc": "std::experimental::reflect::std::experimental::reflect::get_source_line"}, {"name": "std::experimental::reflect::std::experimental::reflect::Object", "type": "cpp", "path": "cpp\\experimental\\reflect\\Object.html", "desc": "std::experimental::reflect::std::experimental::reflect::Object"}, {"name": "std::experimental::reflect::std::experimental::reflect::ObjectSequence", "type": "cpp", "path": "cpp\\experimental\\reflect\\ObjectSequence.html", "desc": "std::experimental::reflect::std::experimental::reflect::ObjectSequence"}, {"name": "std::experimental::scope_exit \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\experimental\\scope_exit\\deduction_guides.html", "desc": "std::experimental::scope_exit \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::experimental::scope_exit<EF>::std::experimental::scope_exit<EF>::release", "type": "cpp", "path": "cpp\\experimental\\scope_exit\\release.html", "desc": "std::experimental::scope_exit<EF>::std::experimental::scope_exit<EF>::release"}, {"name": "std::experimental::scope_exit<EF>::std::experimental::scope_exit<EF>::scope_exit", "type": "cpp", "path": "cpp\\experimental\\scope_exit\\scope_exit.html", "desc": "std::experimental::scope_exit<EF>::std::experimental::scope_exit<EF>::scope_exit"}, {"name": "std::experimental::scope_exit<EF>::std::experimental::scope_exit<EF>::~scope_exit", "type": "cpp", "path": "cpp\\experimental\\scope_exit\\~scope_exit.html", "desc": "std::experimental::scope_exit<EF>::std::experimental::scope_exit<EF>::~scope_exit"}, {"name": "std::experimental::scope_fail \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\experimental\\scope_fail\\deduction_guides.html", "desc": "std::experimental::scope_fail \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::experimental::scope_fail<EF>::std::experimental::scope_fail<EF>::release", "type": "cpp", "path": "cpp\\experimental\\scope_fail\\release.html", "desc": "std::experimental::scope_fail<EF>::std::experimental::scope_fail<EF>::release"}, {"name": "std::experimental::scope_fail<EF>::std::experimental::scope_fail<EF>::scope_fail", "type": "cpp", "path": "cpp\\experimental\\scope_fail\\scope_fail.html", "desc": "std::experimental::scope_fail<EF>::std::experimental::scope_fail<EF>::scope_fail"}, {"name": "std::experimental::scope_fail<EF>::std::experimental::scope_fail<EF>::~scope_fail", "type": "cpp", "path": "cpp\\experimental\\scope_fail\\~scope_fail.html", "desc": "std::experimental::scope_fail<EF>::std::experimental::scope_fail<EF>::~scope_fail"}, {"name": "std::experimental::scope_success \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\experimental\\scope_success\\deduction_guides.html", "desc": "std::experimental::scope_success \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::experimental::scope_success<EF>::std::experimental::scope_success<EF>::release", "type": "cpp", "path": "cpp\\experimental\\scope_success\\release.html", "desc": "std::experimental::scope_success<EF>::std::experimental::scope_success<EF>::release"}, {"name": "std::experimental::scope_success<EF>::std::experimental::scope_success<EF>::scope_success", "type": "cpp", "path": "cpp\\experimental\\scope_success\\scope_success.html", "desc": "std::experimental::scope_success<EF>::std::experimental::scope_success<EF>::scope_success"}, {"name": "std::experimental::scope_success<EF>::std::experimental::scope_success<EF>::~scope_success", "type": "cpp", "path": "cpp\\experimental\\scope_success\\~scope_success.html", "desc": "std::experimental::scope_success<EF>::std::experimental::scope_success<EF>::~scope_success"}, {"name": "std::experimental::std::experimental::erase_if (std::set)", "type": "cpp", "path": "cpp\\experimental\\set\\erase_if.html", "desc": "std::experimental::std::experimental::erase_if (std::set)"}, {"name": "std::experimental::shared_future<T>::std::experimental::shared_future<T>::is_ready", "type": "cpp", "path": "cpp\\experimental\\shared_future\\is_ready.html", "desc": "std::experimental::shared_future<T>::std::experimental::shared_future<T>::is_ready"}, {"name": "std::experimental::shared_future<T>::std::experimental::shared_future<T>::operator=", "type": "cpp", "path": "cpp\\experimental\\shared_future\\operator=.html", "desc": "std::experimental::shared_future<T>::std::experimental::shared_future<T>::operator="}, {"name": "std::experimental::shared_future<T>::std::experimental::shared_future<T>::shared_future", "type": "cpp", "path": "cpp\\experimental\\shared_future\\shared_future.html", "desc": "std::experimental::shared_future<T>::std::experimental::shared_future<T>::shared_future"}, {"name": "std::experimental::shared_future<T>::std::experimental::shared_future<T>::then", "type": "cpp", "path": "cpp\\experimental\\shared_future\\then.html", "desc": "std::experimental::shared_future<T>::std::experimental::shared_future<T>::then"}, {"name": "std::experimental:: std::experimental::std::experimental::simd_cast, std::experimental::static_simd_cast", "type": "cpp", "path": "cpp\\experimental\\simd\\abi_cast.html", "desc": "std::experimental:: std::experimental::std::experimental::simd_cast, std::experimental::static_simd_cast"}, {"name": "std::experimental::std::experimental::clamp", "type": "cpp", "path": "cpp\\experimental\\simd\\clamp.html", "desc": "std::experimental::std::experimental::clamp"}, {"name": "std::experimental::simd_abi::std::experimental::simd_abi::compatible", "type": "cpp", "path": "cpp\\experimental\\simd\\compatible.html", "desc": "std::experimental::simd_abi::std::experimental::simd_abi::compatible"}, {"name": "std::experimental::std::experimental::concat", "type": "cpp", "path": "cpp\\experimental\\simd\\concat.html", "desc": "std::experimental::std::experimental::concat"}, {"name": "std::experimental::std::experimental::const_where_expression", "type": "cpp", "path": "cpp\\experimental\\simd\\const_where_expression.html", "desc": "std::experimental::std::experimental::const_where_expression"}, {"name": "std::experimental::simd_abi::std::experimental::simd_abi::deduce", "type": "cpp", "path": "cpp\\experimental\\simd\\deduce.html", "desc": "std::experimental::simd_abi::std::experimental::simd_abi::deduce"}, {"name": "std::experimental:: std::experimental::std::experimental::element_aligned_tag, std::experimental::element_aligned", "type": "cpp", "path": "cpp\\experimental\\simd\\element_aligned.html", "desc": "std::experimental:: std::experimental::std::experimental::element_aligned_tag, std::experimental::element_aligned"}, {"name": "std::experimental::simd_abi::std::experimental::simd_abi::fixed_size", "type": "cpp", "path": "cpp\\experimental\\simd\\fixed_size.html", "desc": "std::experimental::simd_abi::std::experimental::simd_abi::fixed_size"}, {"name": "std::experimental::std::experimental::is_abi_tag", "type": "cpp", "path": "cpp\\experimental\\simd\\is_abi_tag.html", "desc": "std::experimental::std::experimental::is_abi_tag"}, {"name": "std::experimental:: std::experimental::std::experimental::is_simd, std::experimental::is_simd_mask", "type": "cpp", "path": "cpp\\experimental\\simd\\is_simd.html", "desc": "std::experimental:: std::experimental::std::experimental::is_simd, std::experimental::is_simd_mask"}, {"name": "std::experimental::std::experimental::is_simd_flag_type", "type": "cpp", "path": "cpp\\experimental\\simd\\is_simd_flag_type.html", "desc": "std::experimental::std::experimental::is_simd_flag_type"}, {"name": "std::experimental:: std::experimental::std::experimental::is_simd, std::experimental::is_simd_mask", "type": "cpp", "path": "cpp\\experimental\\simd\\is_simd_mask.html", "desc": "std::experimental:: std::experimental::std::experimental::is_simd, std::experimental::is_simd_mask"}, {"name": "std::experimental::std::experimental::max", "type": "cpp", "path": "cpp\\experimental\\simd\\max.html", "desc": "std::experimental::std::experimental::max"}, {"name": "std::experimental::simd_abi::std::experimental::simd_abi::max_fixed_size", "type": "cpp", "path": "cpp\\experimental\\simd\\max_fixed_size.html", "desc": "std::experimental::simd_abi::std::experimental::simd_abi::max_fixed_size"}, {"name": "std::experimental::std::experimental::memory_alignment", "type": "cpp", "path": "cpp\\experimental\\simd\\memory_alignment.html", "desc": "std::experimental::std::experimental::memory_alignment"}, {"name": "std::experimental::std::experimental::min", "type": "cpp", "path": "cpp\\experimental\\simd\\min.html", "desc": "std::experimental::std::experimental::min"}, {"name": "std::experimental::std::experimental::minmax", "type": "cpp", "path": "cpp\\experimental\\simd\\minmax.html", "desc": "std::experimental::std::experimental::minmax"}, {"name": "std::experimental::simd_abi::std::experimental::simd_abi::native", "type": "cpp", "path": "cpp\\experimental\\simd\\native.html", "desc": "std::experimental::simd_abi::std::experimental::simd_abi::native"}, {"name": "std::experimental:: std::experimental::std::experimental::overaligned_tag, std::experimental::overaligned", "type": "cpp", "path": "cpp\\experimental\\simd\\overaligned.html", "desc": "std::experimental:: std::experimental::std::experimental::overaligned_tag, std::experimental::overaligned"}, {"name": "std::experimental:: std::experimental::std::experimental::rebind_simd, std::experimental::resize_simd", "type": "cpp", "path": "cpp\\experimental\\simd\\rebind_simd.html", "desc": "std::experimental:: std::experimental::std::experimental::rebind_simd, std::experimental::resize_simd"}, {"name": "std::experimental::simd_abi::std::experimental::simd_abi::scalar", "type": "cpp", "path": "cpp\\experimental\\simd\\scalar.html", "desc": "std::experimental::simd_abi::std::experimental::simd_abi::scalar"}, {"name": "std::experimental::std::experimental::simd", "type": "cpp", "path": "cpp\\experimental\\simd\\simd.html", "desc": "std::experimental::std::experimental::simd"}, {"name": "std::experimental:: std::experimental::std::experimental::simd_cast, std::experimental::static_simd_cast", "type": "cpp", "path": "cpp\\experimental\\simd\\simd_cast.html", "desc": "std::experimental:: std::experimental::std::experimental::simd_cast, std::experimental::static_simd_cast"}, {"name": "std::experimental::std::experimental::simd_mask", "type": "cpp", "path": "cpp\\experimental\\simd\\simd_mask.html", "desc": "std::experimental::std::experimental::simd_mask"}, {"name": "std::experimental::std::experimental::simd_size", "type": "cpp", "path": "cpp\\experimental\\simd\\simd_size.html", "desc": "std::experimental::std::experimental::simd_size"}, {"name": "std::experimental::std::experimental::split", "type": "cpp", "path": "cpp\\experimental\\simd\\split.html", "desc": "std::experimental::std::experimental::split"}, {"name": "std::experimental:: std::experimental::std::experimental::vector_aligned_tag, std::experimental::vector_aligned", "type": "cpp", "path": "cpp\\experimental\\simd\\vector_aligned.html", "desc": "std::experimental:: std::experimental::std::experimental::vector_aligned_tag, std::experimental::vector_aligned"}, {"name": "std::experimental::std::experimental::where", "type": "cpp", "path": "cpp\\experimental\\simd\\where.html", "desc": "std::experimental::std::experimental::where"}, {"name": "std::experimental::std::experimental::where_expression", "type": "cpp", "path": "cpp\\experimental\\simd\\where_expression.html", "desc": "std::experimental::std::experimental::where_expression"}, {"name": "std::experimental::source_location::std::experimental::source_location::column", "type": "cpp", "path": "cpp\\experimental\\source_location\\column.html", "desc": "std::experimental::source_location::std::experimental::source_location::column"}, {"name": "std::experimental::source_location::std::experimental::source_location::current", "type": "cpp", "path": "cpp\\experimental\\source_location\\current.html", "desc": "std::experimental::source_location::std::experimental::source_location::current"}, {"name": "std::experimental::source_location::std::experimental::source_location::file_name", "type": "cpp", "path": "cpp\\experimental\\source_location\\file_name.html", "desc": "std::experimental::source_location::std::experimental::source_location::file_name"}, {"name": "std::experimental::source_location::std::experimental::source_location::function_name", "type": "cpp", "path": "cpp\\experimental\\source_location\\function_name.html", "desc": "std::experimental::source_location::std::experimental::source_location::function_name"}, {"name": "std::experimental::source_location::std::experimental::source_location::line", "type": "cpp", "path": "cpp\\experimental\\source_location\\line.html", "desc": "std::experimental::source_location::std::experimental::source_location::line"}, {"name": "std::experimental::source_location::std::experimental::source_location::source_location", "type": "cpp", "path": "cpp\\experimental\\source_location\\source_location.html", "desc": "std::experimental::source_location::std::experimental::source_location::source_location"}, {"name": "std::experimental::unique_resource \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\experimental\\unique_resource\\deduction_guides.html", "desc": "std::experimental::unique_resource \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::experimental::unique_resource<R, D>::std::experimental::unique_resource<R, D>::get", "type": "cpp", "path": "cpp\\experimental\\unique_resource\\get.html", "desc": "std::experimental::unique_resource<R, D>::std::experimental::unique_resource<R, D>::get"}, {"name": "std::experimental::unique_resource<R, D>::std::experimental::unique_resource<R, D>::get_deleter", "type": "cpp", "path": "cpp\\experimental\\unique_resource\\get_deleter.html", "desc": "std::experimental::unique_resource<R, D>::std::experimental::unique_resource<R, D>::get_deleter"}, {"name": "std::experimental::std::experimental::make_unique_resource_checked", "type": "cpp", "path": "cpp\\experimental\\unique_resource\\make_unique_resource_checked.html", "desc": "std::experimental::std::experimental::make_unique_resource_checked"}, {"name": "std::experimental::unique_resource<R, D>:: std::experimental::unique_resource<R, D>::std::experimental::unique_resource<R, D>::operator*, std::experimental::unique_resource<R, D>::operator->", "type": "cpp", "path": "cpp\\experimental\\unique_resource\\operator%2A.html", "desc": "std::experimental::unique_resource<R, D>:: std::experimental::unique_resource<R, D>::std::experimental::unique_resource<R, D>::operator*, std::experimental::unique_resource<R, D>::operator->"}, {"name": "std::experimental::unique_resource<R, D>::std::experimental::unique_resource<R, D>::operator=", "type": "cpp", "path": "cpp\\experimental\\unique_resource\\operator=.html", "desc": "std::experimental::unique_resource<R, D>::std::experimental::unique_resource<R, D>::operator="}, {"name": "std::experimental::unique_resource<R, D>::std::experimental::unique_resource<R, D>::release", "type": "cpp", "path": "cpp\\experimental\\unique_resource\\release.html", "desc": "std::experimental::unique_resource<R, D>::std::experimental::unique_resource<R, D>::release"}, {"name": "std::experimental::unique_resource<R, D>::std::experimental::unique_resource<R, D>::reset", "type": "cpp", "path": "cpp\\experimental\\unique_resource\\reset.html", "desc": "std::experimental::unique_resource<R, D>::std::experimental::unique_resource<R, D>::reset"}, {"name": "std::experimental::unique_resource<R, D>::std::experimental::unique_resource<R, D>::unique_resource", "type": "cpp", "path": "cpp\\experimental\\unique_resource\\unique_resource.html", "desc": "std::experimental::unique_resource<R, D>::std::experimental::unique_resource<R, D>::unique_resource"}, {"name": "std::experimental::unique_resource<R, D>::std::experimental::unique_resource<R, D>::~unique_resource", "type": "cpp", "path": "cpp\\experimental\\unique_resource\\~unique_resource.html", "desc": "std::experimental::unique_resource<R, D>::std::experimental::unique_resource<R, D>::~unique_resource"}, {"name": "std::experimental::std::experimental::erase_if (std::unordered_map)", "type": "cpp", "path": "cpp\\experimental\\unordered_map\\erase_if.html", "desc": "std::experimental::std::experimental::erase_if (std::unordered_map)"}, {"name": "std::experimental::std::experimental::erase_if (std::unordered_multimap)", "type": "cpp", "path": "cpp\\experimental\\unordered_multimap\\erase_if.html", "desc": "std::experimental::std::experimental::erase_if (std::unordered_multimap)"}, {"name": "std::experimental::std::experimental::erase_if (std::unordered_multiset)", "type": "cpp", "path": "cpp\\experimental\\unordered_multiset\\erase_if.html", "desc": "std::experimental::std::experimental::erase_if (std::unordered_multiset)"}, {"name": "std::experimental::std::experimental::erase_if (std::unordered_set)", "type": "cpp", "path": "cpp\\experimental\\unordered_set\\erase_if.html", "desc": "std::experimental::std::experimental::erase_if (std::unordered_set)"}, {"name": "std::experimental::std::experimental::erase (std::vector)", "type": "cpp", "path": "cpp\\experimental\\vector\\erase.html", "desc": "std::experimental::std::experimental::erase (std::vector)"}, {"name": "std::experimental::std::experimental::erase_if (std::vector)", "type": "cpp", "path": "cpp\\experimental\\vector\\erase_if.html", "desc": "std::experimental::std::experimental::erase_if (std::vector)"}, {"name": "std::filesystem::std::filesystem::absolute", "type": "cpp", "path": "cpp\\filesystem\\absolute.html", "desc": "std::filesystem::std::filesystem::absolute"}, {"name": "std::filesystem:: std::filesystem::std::filesystem::canonical, std::filesystem::weakly_canonical", "type": "cpp", "path": "cpp\\filesystem\\canonical.html", "desc": "std::filesystem:: std::filesystem::std::filesystem::canonical, std::filesystem::weakly_canonical"}, {"name": "std::filesystem::std::filesystem::copy", "type": "cpp", "path": "cpp\\filesystem\\copy.html", "desc": "std::filesystem::std::filesystem::copy"}, {"name": "std::filesystem::std::filesystem::copy_file", "type": "cpp", "path": "cpp\\filesystem\\copy_file.html", "desc": "std::filesystem::std::filesystem::copy_file"}, {"name": "std::filesystem::std::filesystem::copy_options", "type": "cpp", "path": "cpp\\filesystem\\copy_options.html", "desc": "std::filesystem::std::filesystem::copy_options"}, {"name": "std::filesystem::std::filesystem::copy_symlink", "type": "cpp", "path": "cpp\\filesystem\\copy_symlink.html", "desc": "std::filesystem::std::filesystem::copy_symlink"}, {"name": "std::filesystem:: std::filesystem::std::filesystem::create_directory, std::filesystem::create_directories", "type": "cpp", "path": "cpp\\filesystem\\create_directory.html", "desc": "std::filesystem:: std::filesystem::std::filesystem::create_directory, std::filesystem::create_directories"}, {"name": "std::filesystem::std::filesystem::create_hard_link", "type": "cpp", "path": "cpp\\filesystem\\create_hard_link.html", "desc": "std::filesystem::std::filesystem::create_hard_link"}, {"name": "std::filesystem:: std::filesystem::std::filesystem::create_symlink, std::filesystem::create_directory_symlink", "type": "cpp", "path": "cpp\\filesystem\\create_symlink.html", "desc": "std::filesystem:: std::filesystem::std::filesystem::create_symlink, std::filesystem::create_directory_symlink"}, {"name": "std::filesystem::std::filesystem::current_path", "type": "cpp", "path": "cpp\\filesystem\\current_path.html", "desc": "std::filesystem::std::filesystem::current_path"}, {"name": "std::filesystem::std::filesystem::directory_entry", "type": "cpp", "path": "cpp\\filesystem\\directory_entry.html", "desc": "std::filesystem::std::filesystem::directory_entry"}, {"name": "std::filesystem::std::filesystem::directory_iterator", "type": "cpp", "path": "cpp\\filesystem\\directory_iterator.html", "desc": "std::filesystem::std::filesystem::directory_iterator"}, {"name": "std::filesystem::std::filesystem::directory_options", "type": "cpp", "path": "cpp\\filesystem\\directory_options.html", "desc": "std::filesystem::std::filesystem::directory_options"}, {"name": "std::filesystem::std::filesystem::equivalent", "type": "cpp", "path": "cpp\\filesystem\\equivalent.html", "desc": "std::filesystem::std::filesystem::equivalent"}, {"name": "std::filesystem::std::filesystem::exists", "type": "cpp", "path": "cpp\\filesystem\\exists.html", "desc": "std::filesystem::std::filesystem::exists"}, {"name": "std::filesystem::std::filesystem::filesystem_error", "type": "cpp", "path": "cpp\\filesystem\\filesystem_error.html", "desc": "std::filesystem::std::filesystem::filesystem_error"}, {"name": "std::filesystem::std::filesystem::file_size", "type": "cpp", "path": "cpp\\filesystem\\file_size.html", "desc": "std::filesystem::std::filesystem::file_size"}, {"name": "std::filesystem::std::filesystem::file_status", "type": "cpp", "path": "cpp\\filesystem\\file_status.html", "desc": "std::filesystem::std::filesystem::file_status"}, {"name": "std::filesystem::std::filesystem::file_time_type", "type": "cpp", "path": "cpp\\filesystem\\file_time_type.html", "desc": "std::filesystem::std::filesystem::file_time_type"}, {"name": "std::filesystem::std::filesystem::file_type", "type": "cpp", "path": "cpp\\filesystem\\file_type.html", "desc": "std::filesystem::std::filesystem::file_type"}, {"name": "std::filesystem::std::filesystem::hard_link_count", "type": "cpp", "path": "cpp\\filesystem\\hard_link_count.html", "desc": "std::filesystem::std::filesystem::hard_link_count"}, {"name": "std::filesystem::std::filesystem::is_block_file", "type": "cpp", "path": "cpp\\filesystem\\is_block_file.html", "desc": "std::filesystem::std::filesystem::is_block_file"}, {"name": "std::filesystem::std::filesystem::is_character_file", "type": "cpp", "path": "cpp\\filesystem\\is_character_file.html", "desc": "std::filesystem::std::filesystem::is_character_file"}, {"name": "std::filesystem::std::filesystem::is_directory", "type": "cpp", "path": "cpp\\filesystem\\is_directory.html", "desc": "std::filesystem::std::filesystem::is_directory"}, {"name": "std::filesystem::std::filesystem::is_empty", "type": "cpp", "path": "cpp\\filesystem\\is_empty.html", "desc": "std::filesystem::std::filesystem::is_empty"}, {"name": "std::filesystem::std::filesystem::is_fifo", "type": "cpp", "path": "cpp\\filesystem\\is_fifo.html", "desc": "std::filesystem::std::filesystem::is_fifo"}, {"name": "std::filesystem::std::filesystem::is_other", "type": "cpp", "path": "cpp\\filesystem\\is_other.html", "desc": "std::filesystem::std::filesystem::is_other"}, {"name": "std::filesystem::std::filesystem::is_regular_file", "type": "cpp", "path": "cpp\\filesystem\\is_regular_file.html", "desc": "std::filesystem::std::filesystem::is_regular_file"}, {"name": "std::filesystem::std::filesystem::is_socket", "type": "cpp", "path": "cpp\\filesystem\\is_socket.html", "desc": "std::filesystem::std::filesystem::is_socket"}, {"name": "std::filesystem::std::filesystem::is_symlink", "type": "cpp", "path": "cpp\\filesystem\\is_symlink.html", "desc": "std::filesystem::std::filesystem::is_symlink"}, {"name": "std::filesystem::std::filesystem::last_write_time", "type": "cpp", "path": "cpp\\filesystem\\last_write_time.html", "desc": "std::filesystem::std::filesystem::last_write_time"}, {"name": "std::filesystem::std::filesystem::path", "type": "cpp", "path": "cpp\\filesystem\\path.html", "desc": "std::filesystem::std::filesystem::path"}, {"name": "std::filesystem::std::filesystem::permissions", "type": "cpp", "path": "cpp\\filesystem\\permissions.html", "desc": "std::filesystem::std::filesystem::permissions"}, {"name": "std::filesystem::std::filesystem::perms", "type": "cpp", "path": "cpp\\filesystem\\perms.html", "desc": "std::filesystem::std::filesystem::perms"}, {"name": "std::filesystem::std::filesystem::perm_options", "type": "cpp", "path": "cpp\\filesystem\\perm_options.html", "desc": "std::filesystem::std::filesystem::perm_options"}, {"name": "std::filesystem::std::filesystem::read_symlink", "type": "cpp", "path": "cpp\\filesystem\\read_symlink.html", "desc": "std::filesystem::std::filesystem::read_symlink"}, {"name": "std::filesystem::std::filesystem::recursive_directory_iterator", "type": "cpp", "path": "cpp\\filesystem\\recursive_directory_iterator.html", "desc": "std::filesystem::std::filesystem::recursive_directory_iterator"}, {"name": "std::filesystem:: std::filesystem::std::filesystem::relative, std::filesystem::proximate", "type": "cpp", "path": "cpp\\filesystem\\relative.html", "desc": "std::filesystem:: std::filesystem::std::filesystem::relative, std::filesystem::proximate"}, {"name": "std::filesystem:: std::filesystem::std::filesystem::remove, std::filesystem::remove_all", "type": "cpp", "path": "cpp\\filesystem\\remove.html", "desc": "std::filesystem:: std::filesystem::std::filesystem::remove, std::filesystem::remove_all"}, {"name": "std::filesystem::std::filesystem::rename", "type": "cpp", "path": "cpp\\filesystem\\rename.html", "desc": "std::filesystem::std::filesystem::rename"}, {"name": "std::filesystem::std::filesystem::resize_file", "type": "cpp", "path": "cpp\\filesystem\\resize_file.html", "desc": "std::filesystem::std::filesystem::resize_file"}, {"name": "std::filesystem::std::filesystem::space", "type": "cpp", "path": "cpp\\filesystem\\space.html", "desc": "std::filesystem::std::filesystem::space"}, {"name": "std::filesystem::std::filesystem::space_info", "type": "cpp", "path": "cpp\\filesystem\\space_info.html", "desc": "std::filesystem::std::filesystem::space_info"}, {"name": "std::filesystem:: std::filesystem::std::filesystem::status, std::filesystem::symlink_status", "type": "cpp", "path": "cpp\\filesystem\\status.html", "desc": "std::filesystem:: std::filesystem::std::filesystem::status, std::filesystem::symlink_status"}, {"name": "std::filesystem::std::filesystem::status_known", "type": "cpp", "path": "cpp\\filesystem\\status_known.html", "desc": "std::filesystem::std::filesystem::status_known"}, {"name": "std::filesystem::std::filesystem::temp_directory_path", "type": "cpp", "path": "cpp\\filesystem\\temp_directory_path.html", "desc": "std::filesystem::std::filesystem::temp_directory_path"}, {"name": "std::filesystem::directory_entry::std::filesystem::directory_entry::assign", "type": "cpp", "path": "cpp\\filesystem\\directory_entry\\assign.html", "desc": "std::filesystem::directory_entry::std::filesystem::directory_entry::assign"}, {"name": "std::filesystem::directory_entry::std::filesystem::directory_entry::directory_entry", "type": "cpp", "path": "cpp\\filesystem\\directory_entry\\directory_entry.html", "desc": "std::filesystem::directory_entry::std::filesystem::directory_entry::directory_entry"}, {"name": "std::filesystem::directory_entry::std::filesystem::directory_entry::exists", "type": "cpp", "path": "cpp\\filesystem\\directory_entry\\exists.html", "desc": "std::filesystem::directory_entry::std::filesystem::directory_entry::exists"}, {"name": "std::filesystem::directory_entry::std::filesystem::directory_entry::file_size", "type": "cpp", "path": "cpp\\filesystem\\directory_entry\\file_size.html", "desc": "std::filesystem::directory_entry::std::filesystem::directory_entry::file_size"}, {"name": "std::filesystem::directory_entry::std::filesystem::directory_entry::hard_link_count", "type": "cpp", "path": "cpp\\filesystem\\directory_entry\\hard_link_count.html", "desc": "std::filesystem::directory_entry::std::filesystem::directory_entry::hard_link_count"}, {"name": "std::filesystem::directory_entry::std::filesystem::directory_entry::is_block_file", "type": "cpp", "path": "cpp\\filesystem\\directory_entry\\is_block_file.html", "desc": "std::filesystem::directory_entry::std::filesystem::directory_entry::is_block_file"}, {"name": "std::filesystem::directory_entry::std::filesystem::directory_entry::is_character_file", "type": "cpp", "path": "cpp\\filesystem\\directory_entry\\is_character_file.html", "desc": "std::filesystem::directory_entry::std::filesystem::directory_entry::is_character_file"}, {"name": "std::filesystem::directory_entry::std::filesystem::directory_entry::is_directory", "type": "cpp", "path": "cpp\\filesystem\\directory_entry\\is_directory.html", "desc": "std::filesystem::directory_entry::std::filesystem::directory_entry::is_directory"}, {"name": "std::filesystem::directory_entry::std::filesystem::directory_entry::is_fifo", "type": "cpp", "path": "cpp\\filesystem\\directory_entry\\is_fifo.html", "desc": "std::filesystem::directory_entry::std::filesystem::directory_entry::is_fifo"}, {"name": "std::filesystem::directory_entry::std::filesystem::directory_entry::is_other", "type": "cpp", "path": "cpp\\filesystem\\directory_entry\\is_other.html", "desc": "std::filesystem::directory_entry::std::filesystem::directory_entry::is_other"}, {"name": "std::filesystem::directory_entry::std::filesystem::directory_entry::is_regular_file", "type": "cpp", "path": "cpp\\filesystem\\directory_entry\\is_regular_file.html", "desc": "std::filesystem::directory_entry::std::filesystem::directory_entry::is_regular_file"}, {"name": "std::filesystem::directory_entry::std::filesystem::directory_entry::is_socket", "type": "cpp", "path": "cpp\\filesystem\\directory_entry\\is_socket.html", "desc": "std::filesystem::directory_entry::std::filesystem::directory_entry::is_socket"}, {"name": "std::filesystem::directory_entry::std::filesystem::directory_entry::is_symlink", "type": "cpp", "path": "cpp\\filesystem\\directory_entry\\is_symlink.html", "desc": "std::filesystem::directory_entry::std::filesystem::directory_entry::is_symlink"}, {"name": "std::filesystem::directory_entry::std::filesystem::directory_entry::last_write_time", "type": "cpp", "path": "cpp\\filesystem\\directory_entry\\last_write_time.html", "desc": "std::filesystem::directory_entry::std::filesystem::directory_entry::last_write_time"}, {"name": "std::filesystem::directory_entry::std::filesystem::directory_entry::operator=", "type": "cpp", "path": "cpp\\filesystem\\directory_entry\\operator=.html", "desc": "std::filesystem::directory_entry::std::filesystem::directory_entry::operator="}, {"name": "std::filesystem::directory_entry::std::filesystem::directory_entry::operator==,!=,<,<=,>,>=,<=>", "type": "cpp", "path": "cpp\\filesystem\\directory_entry\\operator_cmp.html", "desc": "std::filesystem::directory_entry::std::filesystem::directory_entry::operator==,!=,<,<=,>,>=,<=>"}, {"name": "(std::filesystem::directory_entry)operator<<(std::filesystem::directory_entry)", "type": "cpp", "path": "cpp\\filesystem\\directory_entry\\operator_ltlt.html", "desc": "(std::filesystem::directory_entry)operator<<(std::filesystem::directory_entry)"}, {"name": "std::filesystem::directory_entry::std::filesystem::directory_entry::path", "type": "cpp", "path": "cpp\\filesystem\\directory_entry\\path.html", "desc": "std::filesystem::directory_entry::std::filesystem::directory_entry::path"}, {"name": "std::filesystem::directory_entry::std::filesystem::directory_entry::refresh", "type": "cpp", "path": "cpp\\filesystem\\directory_entry\\refresh.html", "desc": "std::filesystem::directory_entry::std::filesystem::directory_entry::refresh"}, {"name": "std::filesystem::directory_entry::std::filesystem::directory_entry::replace_filename", "type": "cpp", "path": "cpp\\filesystem\\directory_entry\\replace_filename.html", "desc": "std::filesystem::directory_entry::std::filesystem::directory_entry::replace_filename"}, {"name": "std::filesystem::directory_entry:: std::filesystem::directory_entry::std::filesystem::directory_entry::status, std::filesystem::directory_entry::symlink_status", "type": "cpp", "path": "cpp\\filesystem\\directory_entry\\status.html", "desc": "std::filesystem::directory_entry:: std::filesystem::directory_entry::std::filesystem::directory_entry::status, std::filesystem::directory_entry::symlink_status"}, {"name": "std::filesystem:: (directory_iterator) std::filesystem:: (directory_iterator)std::filesystem::begin(directory_iterator), std::filesystem::end(directory_iterator)", "type": "cpp", "path": "cpp\\filesystem\\directory_iterator\\begin.html", "desc": "std::filesystem:: (directory_iterator) std::filesystem:: (directory_iterator)std::filesystem::begin(directory_iterator), std::filesystem::end(directory_iterator)"}, {"name": "std::filesystem::directory_iterator::std::filesystem::directory_iterator::directory_iterator", "type": "cpp", "path": "cpp\\filesystem\\directory_iterator\\directory_iterator.html", "desc": "std::filesystem::directory_iterator::std::filesystem::directory_iterator::directory_iterator"}, {"name": "std::filesystem::directory_iterator:: std::filesystem::directory_iterator::std::filesystem::directory_iterator::operator++, std::filesystem::directory_iterator::increment", "type": "cpp", "path": "cpp\\filesystem\\directory_iterator\\increment.html", "desc": "std::filesystem::directory_iterator:: std::filesystem::directory_iterator::std::filesystem::directory_iterator::operator++, std::filesystem::directory_iterator::increment"}, {"name": "std::filesystem::directory_iterator:: std::filesystem::directory_iterator::std::filesystem::directory_iterator::operator*, std::filesystem::directory_iterator::operator->", "type": "cpp", "path": "cpp\\filesystem\\directory_iterator\\operator%2A.html", "desc": "std::filesystem::directory_iterator:: std::filesystem::directory_iterator::std::filesystem::directory_iterator::operator*, std::filesystem::directory_iterator::operator->"}, {"name": "std::filesystem::directory_iterator::std::filesystem::directory_iterator::operator=", "type": "cpp", "path": "cpp\\filesystem\\directory_iterator\\operator=.html", "desc": "std::filesystem::directory_iterator::std::filesystem::directory_iterator::operator="}, {"name": "std::filesystem::filesystem_error::std::filesystem::filesystem_error::filesystem_error", "type": "cpp", "path": "cpp\\filesystem\\filesystem_error\\filesystem_error.html", "desc": "std::filesystem::filesystem_error::std::filesystem::filesystem_error::filesystem_error"}, {"name": "std::filesystem::filesystem_error::std::filesystem::filesystem_error::operator=", "type": "cpp", "path": "cpp\\filesystem\\filesystem_error\\operator=.html", "desc": "std::filesystem::filesystem_error::std::filesystem::filesystem_error::operator="}, {"name": "std::filesystem::filesystem_error:: std::filesystem::filesystem_error::std::filesystem::filesystem_error::path1, std::filesystem::filesystem_error::path2", "type": "cpp", "path": "cpp\\filesystem\\filesystem_error\\path.html", "desc": "std::filesystem::filesystem_error:: std::filesystem::filesystem_error::std::filesystem::filesystem_error::path1, std::filesystem::filesystem_error::path2"}, {"name": "std::filesystem::filesystem_error::std::filesystem::filesystem_error::what", "type": "cpp", "path": "cpp\\filesystem\\filesystem_error\\what.html", "desc": "std::filesystem::filesystem_error::std::filesystem::filesystem_error::what"}, {"name": "std::filesystem::file_status::std::filesystem::file_status::file_status", "type": "cpp", "path": "cpp\\filesystem\\file_status\\file_status.html", "desc": "std::filesystem::file_status::std::filesystem::file_status::file_status"}, {"name": "std::filesystem::file_status::std::filesystem::file_status::operator=", "type": "cpp", "path": "cpp\\filesystem\\file_status\\operator=.html", "desc": "std::filesystem::file_status::std::filesystem::file_status::operator="}, {"name": "operator==(std::filesystem::file_status)", "type": "cpp", "path": "cpp\\filesystem\\file_status\\operator==.html", "desc": "operator==(std::filesystem::file_status)"}, {"name": "std::filesystem::file_status::std::filesystem::file_status::permissions", "type": "cpp", "path": "cpp\\filesystem\\file_status\\permissions.html", "desc": "std::filesystem::file_status::std::filesystem::file_status::permissions"}, {"name": "std::filesystem::file_status::std::filesystem::file_status::type", "type": "cpp", "path": "cpp\\filesystem\\file_status\\type.html", "desc": "std::filesystem::file_status::std::filesystem::file_status::type"}, {"name": "std::filesystem::path:: std::filesystem::path::std::filesystem::path::append, std::filesystem::path::operator/=", "type": "cpp", "path": "cpp\\filesystem\\path\\append.html", "desc": "std::filesystem::path:: std::filesystem::path::std::filesystem::path::append, std::filesystem::path::operator/="}, {"name": "std::filesystem::path::std::filesystem::path::assign", "type": "cpp", "path": "cpp\\filesystem\\path\\assign.html", "desc": "std::filesystem::path::std::filesystem::path::assign"}, {"name": "std::filesystem::path:: std::filesystem::path::std::filesystem::path::begin, std::filesystem::path::end", "type": "cpp", "path": "cpp\\filesystem\\path\\begin.html", "desc": "std::filesystem::path:: std::filesystem::path::std::filesystem::path::begin, std::filesystem::path::end"}, {"name": "std::filesystem::path::std::filesystem::path::clear", "type": "cpp", "path": "cpp\\filesystem\\path\\clear.html", "desc": "std::filesystem::path::std::filesystem::path::clear"}, {"name": "std::filesystem::path::std::filesystem::path::compare", "type": "cpp", "path": "cpp\\filesystem\\path\\compare.html", "desc": "std::filesystem::path::std::filesystem::path::compare"}, {"name": "std::filesystem::path:: std::filesystem::path::std::filesystem::path::concat, std::filesystem::path::operator+=", "type": "cpp", "path": "cpp\\filesystem\\path\\concat.html", "desc": "std::filesystem::path:: std::filesystem::path::std::filesystem::path::concat, std::filesystem::path::operator+="}, {"name": "std::filesystem::path::std::filesystem::path::empty", "type": "cpp", "path": "cpp\\filesystem\\path\\empty.html", "desc": "std::filesystem::path::std::filesystem::path::empty"}, {"name": "std::filesystem::path::std::filesystem::path::extension", "type": "cpp", "path": "cpp\\filesystem\\path\\extension.html", "desc": "std::filesystem::path::std::filesystem::path::extension"}, {"name": "std::filesystem::path::std::filesystem::path::filename", "type": "cpp", "path": "cpp\\filesystem\\path\\filename.html", "desc": "std::filesystem::path::std::filesystem::path::filename"}, {"name": "std::filesystem::path::std::filesystem::path::format", "type": "cpp", "path": "cpp\\filesystem\\path\\format.html", "desc": "std::filesystem::path::std::filesystem::path::format"}, {"name": "std::filesystem::path:: std::filesystem::path:: std::filesystem::path:: std::filesystem::path:: std::filesystem::path::std::filesystem::path::generic_string, std::filesystem::path::generic_wstring, std::filesystem::path::generic_u8string, std::filesystem::path::generic_u16string, std::filesystem::path::generic_u32string", "type": "cpp", "path": "cpp\\filesystem\\path\\generic_string.html", "desc": "std::filesystem::path:: std::filesystem::path:: std::filesystem::path:: std::filesystem::path:: std::filesystem::path::std::filesystem::path::generic_string, std::filesystem::path::generic_wstring, std::filesystem::path::generic_u8string, std::filesystem::path::generic_u16string, std::filesystem::path::generic_u32string"}, {"name": "std::std::hash<std::filesystem::path>", "type": "cpp", "path": "cpp\\filesystem\\path\\hash.html", "desc": "std::std::hash<std::filesystem::path>"}, {"name": "std::filesystem::std::filesystem::hash_value", "type": "cpp", "path": "cpp\\filesystem\\path\\hash_value.html", "desc": "std::filesystem::std::filesystem::hash_value"}, {"name": "std::filesystem::path:: std::filesystem::path:: std::filesystem::path:: std::filesystem::path:: std::filesystem::path:: std::filesystem::path:: std::filesystem::path:: std::filesystem::path::std::filesystem::path::has_root_path, std::filesystem::path::has_root_name, std::filesystem::path::has_root_directory, std::filesystem::path::has_relative_path, std::filesystem::path::has_parent_path, std::filesystem::path::has_filename, std::filesystem::path::has_stem, std::filesystem::path::has_extension", "type": "cpp", "path": "cpp\\filesystem\\path\\has_path.html", "desc": "std::filesystem::path:: std::filesystem::path:: std::filesystem::path:: std::filesystem::path:: std::filesystem::path:: std::filesystem::path:: std::filesystem::path:: std::filesystem::path::std::filesystem::path::has_root_path, std::filesystem::path::has_root_name, std::filesystem::path::has_root_directory, std::filesystem::path::has_relative_path, std::filesystem::path::has_parent_path, std::filesystem::path::has_filename, std::filesystem::path::has_stem, std::filesystem::path::has_extension"}, {"name": "std::filesystem::path::std::filesystem::path::is_absolute,is_relative", "type": "cpp", "path": "cpp\\filesystem\\path\\is_absrel.html", "desc": "std::filesystem::path::std::filesystem::path::is_absolute,is_relative"}, {"name": "std::filesystem::path:: std::filesystem::path:: std::filesystem::path::std::filesystem::path::lexically_normal, std::filesystem::path::lexically_relative, std::filesystem::path::lexically_proximate", "type": "cpp", "path": "cpp\\filesystem\\path\\lexically_normal.html", "desc": "std::filesystem::path:: std::filesystem::path:: std::filesystem::path::std::filesystem::path::lexically_normal, std::filesystem::path::lexically_relative, std::filesystem::path::lexically_proximate"}, {"name": "std::filesystem::path::std::filesystem::path::make_preferred", "type": "cpp", "path": "cpp\\filesystem\\path\\make_preferred.html", "desc": "std::filesystem::path::std::filesystem::path::make_preferred"}, {"name": "std::filesystem::path:: std::filesystem::path:: std::filesystem::path::std::filesystem::path::c_str, std::filesystem::path::native, std::filesystem::path::operator string_type()", "type": "cpp", "path": "cpp\\filesystem\\path\\native.html", "desc": "std::filesystem::path:: std::filesystem::path:: std::filesystem::path::std::filesystem::path::c_str, std::filesystem::path::native, std::filesystem::path::operator string_type()"}, {"name": "std::filesystem::path::std::filesystem::path::operator=", "type": "cpp", "path": "cpp\\filesystem\\path\\operator=.html", "desc": "std::filesystem::path::std::filesystem::path::operator="}, {"name": "(std::filesystem::path)operator==,!=,<,<=,>,>=,<=>(std::filesystem::path)", "type": "cpp", "path": "cpp\\filesystem\\path\\operator_cmp.html", "desc": "(std::filesystem::path)operator==,!=,<,<=,>,>=,<=>(std::filesystem::path)"}, {"name": "(std::filesystem::path)operator<<,>>(std::filesystem::path)", "type": "cpp", "path": "cpp\\filesystem\\path\\operator_ltltgtgt.html", "desc": "(std::filesystem::path)operator<<,>>(std::filesystem::path)"}, {"name": "std::filesystem:: (std::filesystem::path)std::filesystem::operator/(std::filesystem::path)", "type": "cpp", "path": "cpp\\filesystem\\path\\operator_slash.html", "desc": "std::filesystem:: (std::filesystem::path)std::filesystem::operator/(std::filesystem::path)"}, {"name": "std::filesystem::path::std::filesystem::path::parent_path", "type": "cpp", "path": "cpp\\filesystem\\path\\parent_path.html", "desc": "std::filesystem::path::std::filesystem::path::parent_path"}, {"name": "std::filesystem::path::std::filesystem::path::path", "type": "cpp", "path": "cpp\\filesystem\\path\\path.html", "desc": "std::filesystem::path::std::filesystem::path::path"}, {"name": "std::filesystem::path::std::filesystem::path::relative_path", "type": "cpp", "path": "cpp\\filesystem\\path\\relative_path.html", "desc": "std::filesystem::path::std::filesystem::path::relative_path"}, {"name": "std::filesystem::path::std::filesystem::path::remove_filename", "type": "cpp", "path": "cpp\\filesystem\\path\\remove_filename.html", "desc": "std::filesystem::path::std::filesystem::path::remove_filename"}, {"name": "std::filesystem::path::std::filesystem::path::replace_extension", "type": "cpp", "path": "cpp\\filesystem\\path\\replace_extension.html", "desc": "std::filesystem::path::std::filesystem::path::replace_extension"}, {"name": "std::filesystem::path::std::filesystem::path::replace_filename", "type": "cpp", "path": "cpp\\filesystem\\path\\replace_filename.html", "desc": "std::filesystem::path::std::filesystem::path::replace_filename"}, {"name": "std::filesystem::path::std::filesystem::path::root_directory", "type": "cpp", "path": "cpp\\filesystem\\path\\root_directory.html", "desc": "std::filesystem::path::std::filesystem::path::root_directory"}, {"name": "std::filesystem::path::std::filesystem::path::root_name", "type": "cpp", "path": "cpp\\filesystem\\path\\root_name.html", "desc": "std::filesystem::path::std::filesystem::path::root_name"}, {"name": "std::filesystem::path::std::filesystem::path::root_path", "type": "cpp", "path": "cpp\\filesystem\\path\\root_path.html", "desc": "std::filesystem::path::std::filesystem::path::root_path"}, {"name": "std::filesystem::path::std::filesystem::path::stem", "type": "cpp", "path": "cpp\\filesystem\\path\\stem.html", "desc": "std::filesystem::path::std::filesystem::path::stem"}, {"name": "std::filesystem::path:: std::filesystem::path:: std::filesystem::path:: std::filesystem::path:: std::filesystem::path::std::filesystem::path::string, std::filesystem::path::wstring, std::filesystem::path::u8string, std::filesystem::path::u16string, std::filesystem::path::u32string", "type": "cpp", "path": "cpp\\filesystem\\path\\string.html", "desc": "std::filesystem::path:: std::filesystem::path:: std::filesystem::path:: std::filesystem::path:: std::filesystem::path::std::filesystem::path::string, std::filesystem::path::wstring, std::filesystem::path::u8string, std::filesystem::path::u16string, std::filesystem::path::u32string"}, {"name": "std::filesystem::path::std::filesystem::path::swap", "type": "cpp", "path": "cpp\\filesystem\\path\\swap.html", "desc": "std::filesystem::path::std::filesystem::path::swap"}, {"name": "std::filesystem:: (std::filesystem::path)std::filesystem::swap(std::filesystem::path)", "type": "cpp", "path": "cpp\\filesystem\\path\\swap2.html", "desc": "std::filesystem:: (std::filesystem::path)std::filesystem::swap(std::filesystem::path)"}, {"name": "std::filesystem::std::filesystem::u8path", "type": "cpp", "path": "cpp\\filesystem\\path\\u8path.html", "desc": "std::filesystem::std::filesystem::u8path"}, {"name": "std::filesystem::path::std::filesystem::path::~path", "type": "cpp", "path": "cpp\\filesystem\\path\\~path.html", "desc": "std::filesystem::path::std::filesystem::path::~path"}, {"name": "std::filesystem:: (recursive_directory_iterator) std::filesystem:: (recursive_directory_iterator)std::filesystem::begin(recursive_directory_iterator), std::filesystem::end(recursive_directory_iterator)", "type": "cpp", "path": "cpp\\filesystem\\recursive_directory_iterator\\begin.html", "desc": "std::filesystem:: (recursive_directory_iterator) std::filesystem:: (recursive_directory_iterator)std::filesystem::begin(recursive_directory_iterator), std::filesystem::end(recursive_directory_iterator)"}, {"name": "std::filesystem::recursive_directory_iterator::std::filesystem::recursive_directory_iterator::depth", "type": "cpp", "path": "cpp\\filesystem\\recursive_directory_iterator\\depth.html", "desc": "std::filesystem::recursive_directory_iterator::std::filesystem::recursive_directory_iterator::depth"}, {"name": "std::filesystem::recursive_directory_iterator::std::filesystem::recursive_directory_iterator::disable_recursion_pending", "type": "cpp", "path": "cpp\\filesystem\\recursive_directory_iterator\\disable_recursion_pending.html", "desc": "std::filesystem::recursive_directory_iterator::std::filesystem::recursive_directory_iterator::disable_recursion_pending"}, {"name": "std::filesystem::recursive_directory_iterator:: std::filesystem::recursive_directory_iterator::std::filesystem::recursive_directory_iterator::operator++, std::filesystem::recursive_directory_iterator::increment", "type": "cpp", "path": "cpp\\filesystem\\recursive_directory_iterator\\increment.html", "desc": "std::filesystem::recursive_directory_iterator:: std::filesystem::recursive_directory_iterator::std::filesystem::recursive_directory_iterator::operator++, std::filesystem::recursive_directory_iterator::increment"}, {"name": "std::filesystem::recursive_directory_iterator:: std::filesystem::recursive_directory_iterator::std::filesystem::recursive_directory_iterator::operator*, std::filesystem::recursive_directory_iterator::operator->", "type": "cpp", "path": "cpp\\filesystem\\recursive_directory_iterator\\operator%2A.html", "desc": "std::filesystem::recursive_directory_iterator:: std::filesystem::recursive_directory_iterator::std::filesystem::recursive_directory_iterator::operator*, std::filesystem::recursive_directory_iterator::operator->"}, {"name": "std::filesystem::recursive_directory_iterator::std::filesystem::recursive_directory_iterator::operator=", "type": "cpp", "path": "cpp\\filesystem\\recursive_directory_iterator\\operator=.html", "desc": "std::filesystem::recursive_directory_iterator::std::filesystem::recursive_directory_iterator::operator="}, {"name": "std::filesystem::recursive_directory_iterator::std::filesystem::recursive_directory_iterator::options", "type": "cpp", "path": "cpp\\filesystem\\recursive_directory_iterator\\options.html", "desc": "std::filesystem::recursive_directory_iterator::std::filesystem::recursive_directory_iterator::options"}, {"name": "std::filesystem::recursive_directory_iterator::std::filesystem::recursive_directory_iterator::pop", "type": "cpp", "path": "cpp\\filesystem\\recursive_directory_iterator\\pop.html", "desc": "std::filesystem::recursive_directory_iterator::std::filesystem::recursive_directory_iterator::pop"}, {"name": "std::filesystem::recursive_directory_iterator::std::filesystem::recursive_directory_iterator::recursion_pending", "type": "cpp", "path": "cpp\\filesystem\\recursive_directory_iterator\\recursion_pending.html", "desc": "std::filesystem::recursive_directory_iterator::std::filesystem::recursive_directory_iterator::recursion_pending"}, {"name": "std::filesystem::recursive_directory_iterator::std::filesystem::recursive_directory_iterator::recursive_directory_iterator", "type": "cpp", "path": "cpp\\filesystem\\recursive_directory_iterator\\recursive_directory_iterator.html", "desc": "std::filesystem::recursive_directory_iterator::std::filesystem::recursive_directory_iterator::recursive_directory_iterator"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <algorithm>", "type": "cpp", "path": "cpp\\header\\algorithm.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <algorithm>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <any>", "type": "cpp", "path": "cpp\\header\\any.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <any>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934 (C++11 \u8d77)\u6807\u51c6\u5e93\u6807\u5934 <array>, <(C++11 \u8d77)>", "type": "cpp", "path": "cpp\\header\\array.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934 (C++11 \u8d77)\u6807\u51c6\u5e93\u6807\u5934 <array>, <(C++11 \u8d77)>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <atomic>", "type": "cpp", "path": "cpp\\header\\atomic.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <atomic>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <barrier>", "type": "cpp", "path": "cpp\\header\\barrier.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <barrier>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <bit>", "type": "cpp", "path": "cpp\\header\\bit.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <bit>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <bitset>", "type": "cpp", "path": "cpp\\header\\bitset.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <bitset>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cassert>", "type": "cpp", "path": "cpp\\header\\cassert.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cassert>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <ccomplex>, <complex.h>", "type": "cpp", "path": "cpp\\header\\ccomplex.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <ccomplex>, <complex.h>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cctype>", "type": "cpp", "path": "cpp\\header\\cctype.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cctype>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cerrno>", "type": "cpp", "path": "cpp\\header\\cerrno.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cerrno>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cfenv>", "type": "cpp", "path": "cpp\\header\\cfenv.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cfenv>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cfloat>", "type": "cpp", "path": "cpp\\header\\cfloat.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cfloat>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <charconv>", "type": "cpp", "path": "cpp\\header\\charconv.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <charconv>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <chrono>", "type": "cpp", "path": "cpp\\header\\chrono.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <chrono>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cinttypes>", "type": "cpp", "path": "cpp\\header\\cinttypes.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cinttypes>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <ciso646>, <iso646.h>", "type": "cpp", "path": "cpp\\header\\ciso646.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <ciso646>, <iso646.h>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <climits>", "type": "cpp", "path": "cpp\\header\\climits.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <climits>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <clocale>", "type": "cpp", "path": "cpp\\header\\clocale.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <clocale>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cmath>", "type": "cpp", "path": "cpp\\header\\cmath.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cmath>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <codecvt>", "type": "cpp", "path": "cpp\\header\\codecvt.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <codecvt>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <compare>", "type": "cpp", "path": "cpp\\header\\compare.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <compare>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <complex>", "type": "cpp", "path": "cpp\\header\\complex.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <complex>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <concepts>", "type": "cpp", "path": "cpp\\header\\concepts.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <concepts>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <condition_variable>", "type": "cpp", "path": "cpp\\header\\condition_variable.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <condition_variable>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <coroutine>", "type": "cpp", "path": "cpp\\header\\coroutine.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <coroutine>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <csetjmp>", "type": "cpp", "path": "cpp\\header\\csetjmp.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <csetjmp>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <csignal>", "type": "cpp", "path": "cpp\\header\\csignal.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <csignal>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cstdalign>, <stdalign.h>", "type": "cpp", "path": "cpp\\header\\cstdalign.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cstdalign>, <stdalign.h>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cstdarg>", "type": "cpp", "path": "cpp\\header\\cstdarg.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cstdarg>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cstdbool>, <stdbool.h>", "type": "cpp", "path": "cpp\\header\\cstdbool.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cstdbool>, <stdbool.h>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cstddef>", "type": "cpp", "path": "cpp\\header\\cstddef.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cstddef>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cstdint>", "type": "cpp", "path": "cpp\\header\\cstdint.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cstdint>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cstdio>", "type": "cpp", "path": "cpp\\header\\cstdio.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cstdio>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cstdlib>", "type": "cpp", "path": "cpp\\header\\cstdlib.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cstdlib>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cstring>", "type": "cpp", "path": "cpp\\header\\cstring.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cstring>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <ctgmath>, <tgmath.h>", "type": "cpp", "path": "cpp\\header\\ctgmath.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <ctgmath>, <tgmath.h>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <ctime>", "type": "cpp", "path": "cpp\\header\\ctime.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <ctime>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cuchar>", "type": "cpp", "path": "cpp\\header\\cuchar.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cuchar>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cwchar>", "type": "cpp", "path": "cpp\\header\\cwchar.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cwchar>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cwctype>", "type": "cpp", "path": "cpp\\header\\cwctype.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <cwctype>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <deque>", "type": "cpp", "path": "cpp\\header\\deque.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <deque>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <exception>", "type": "cpp", "path": "cpp\\header\\exception.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <exception>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <execution>", "type": "cpp", "path": "cpp\\header\\execution.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <execution>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934 (C++23)\u6807\u51c6\u5e93\u6807\u5934 <expected>\u00a0(C++23)", "type": "cpp", "path": "cpp\\header\\expected.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934 (C++23)\u6807\u51c6\u5e93\u6807\u5934 <expected>\u00a0(C++23)"}, {"name": "\u5b9e\u9a8c\u6027 C++ \u6807\u51c6\u5e93\u5934\u6587\u4ef6", "type": "cpp", "path": "cpp\\header\\experimental.html", "desc": "\u5b9e\u9a8c\u6027 C++ \u6807\u51c6\u5e93\u5934\u6587\u4ef6"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <filesystem>", "type": "cpp", "path": "cpp\\header\\filesystem.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <filesystem>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934 (C++23)\u6807\u51c6\u5e93\u6807\u5934 <flat_map>\u00a0(C++23)", "type": "cpp", "path": "cpp\\header\\flat_map.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934 (C++23)\u6807\u51c6\u5e93\u6807\u5934 <flat_map>\u00a0(C++23)"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <format>", "type": "cpp", "path": "cpp\\header\\format.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <format>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <forward_list>", "type": "cpp", "path": "cpp\\header\\forward_list.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <forward_list>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <fstream>", "type": "cpp", "path": "cpp\\header\\fstream.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <fstream>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <functional>", "type": "cpp", "path": "cpp\\header\\functional.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <functional>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <future>", "type": "cpp", "path": "cpp\\header\\future.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <future>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934 (C++23)\u6807\u51c6\u5e93\u6807\u5934 <generator>\u00a0(C++23)", "type": "cpp", "path": "cpp\\header\\generator.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934 (C++23)\u6807\u51c6\u5e93\u6807\u5934 <generator>\u00a0(C++23)"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <initializer_list>", "type": "cpp", "path": "cpp\\header\\initializer_list.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <initializer_list>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <iomanip>", "type": "cpp", "path": "cpp\\header\\iomanip.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <iomanip>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <ios>", "type": "cpp", "path": "cpp\\header\\ios.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <ios>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <iosfwd>", "type": "cpp", "path": "cpp\\header\\iosfwd.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <iosfwd>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <iostream>", "type": "cpp", "path": "cpp\\header\\iostream.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <iostream>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <istream>", "type": "cpp", "path": "cpp\\header\\istream.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <istream>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <iterator>", "type": "cpp", "path": "cpp\\header\\iterator.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <iterator>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <latch>", "type": "cpp", "path": "cpp\\header\\latch.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <latch>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <limits>", "type": "cpp", "path": "cpp\\header\\limits.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <limits>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <list>", "type": "cpp", "path": "cpp\\header\\list.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <list>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <locale>", "type": "cpp", "path": "cpp\\header\\locale.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <locale>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <map>", "type": "cpp", "path": "cpp\\header\\map.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <map>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <mdspan>", "type": "cpp", "path": "cpp\\header\\mdspan.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <mdspan>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <memory>", "type": "cpp", "path": "cpp\\header\\memory.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <memory>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <memory_resource>", "type": "cpp", "path": "cpp\\header\\memory_resource.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <memory_resource>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <mutex>", "type": "cpp", "path": "cpp\\header\\mutex.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <mutex>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <new>", "type": "cpp", "path": "cpp\\header\\new.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <new>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <numbers>", "type": "cpp", "path": "cpp\\header\\numbers.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <numbers>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <numeric>", "type": "cpp", "path": "cpp\\header\\numeric.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <numeric>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <optional>", "type": "cpp", "path": "cpp\\header\\optional.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <optional>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <ostream>", "type": "cpp", "path": "cpp\\header\\ostream.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <ostream>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934 (C++23)\u6807\u51c6\u5e93\u6807\u5934 <print>\u00a0(C++23)", "type": "cpp", "path": "cpp\\header\\print.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934 (C++23)\u6807\u51c6\u5e93\u6807\u5934 <print>\u00a0(C++23)"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <queue>", "type": "cpp", "path": "cpp\\header\\queue.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <queue>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <random>", "type": "cpp", "path": "cpp\\header\\random.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <random>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <ranges>", "type": "cpp", "path": "cpp\\header\\ranges.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <ranges>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <ratio>", "type": "cpp", "path": "cpp\\header\\ratio.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <ratio>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <regex>", "type": "cpp", "path": "cpp\\header\\regex.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <regex>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <scoped_allocator>", "type": "cpp", "path": "cpp\\header\\scoped_allocator.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <scoped_allocator>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <semaphore>", "type": "cpp", "path": "cpp\\header\\semaphore.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <semaphore>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <set>", "type": "cpp", "path": "cpp\\header\\set.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <set>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <shared_mutex>", "type": "cpp", "path": "cpp\\header\\shared_mutex.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <shared_mutex>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <source_location>", "type": "cpp", "path": "cpp\\header\\source_location.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <source_location>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <span>", "type": "cpp", "path": "cpp\\header\\span.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <span>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <spanstream>", "type": "cpp", "path": "cpp\\header\\spanstream.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <spanstream>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <sstream>", "type": "cpp", "path": "cpp\\header\\sstream.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <sstream>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <stack>", "type": "cpp", "path": "cpp\\header\\stack.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <stack>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <stacktrace>", "type": "cpp", "path": "cpp\\header\\stacktrace.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <stacktrace>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <stdatomic.h>", "type": "cpp", "path": "cpp\\header\\stdatomic.h.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <stdatomic.h>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <stdexcept>", "type": "cpp", "path": "cpp\\header\\stdexcept.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <stdexcept>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934 (C++23)\u6807\u51c6\u5e93\u6807\u5934 <stdfloat>\u00a0(C++23)", "type": "cpp", "path": "cpp\\header\\stdfloat.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934 (C++23)\u6807\u51c6\u5e93\u6807\u5934 <stdfloat>\u00a0(C++23)"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <stop_token>", "type": "cpp", "path": "cpp\\header\\stop_token.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <stop_token>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <streambuf>", "type": "cpp", "path": "cpp\\header\\streambuf.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <streambuf>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <string>", "type": "cpp", "path": "cpp\\header\\string.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <string>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <string_view>", "type": "cpp", "path": "cpp\\header\\string_view.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <string_view>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <strstream>", "type": "cpp", "path": "cpp\\header\\strstream.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <strstream>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <syncstream>", "type": "cpp", "path": "cpp\\header\\syncstream.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <syncstream>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <system_error>", "type": "cpp", "path": "cpp\\header\\system_error.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <system_error>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <thread>", "type": "cpp", "path": "cpp\\header\\thread.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <thread>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <tuple>", "type": "cpp", "path": "cpp\\header\\tuple.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <tuple>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <typeindex>", "type": "cpp", "path": "cpp\\header\\typeindex.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <typeindex>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <typeinfo>", "type": "cpp", "path": "cpp\\header\\typeinfo.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <typeinfo>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <type_traits>", "type": "cpp", "path": "cpp\\header\\type_traits.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <type_traits>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <unordered_map>", "type": "cpp", "path": "cpp\\header\\unordered_map.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <unordered_map>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <unordered_set>", "type": "cpp", "path": "cpp\\header\\unordered_set.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <unordered_set>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <utility>", "type": "cpp", "path": "cpp\\header\\utility.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <utility>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <valarray>", "type": "cpp", "path": "cpp\\header\\valarray.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <valarray>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <variant>", "type": "cpp", "path": "cpp\\header\\variant.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <variant>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <vector>", "type": "cpp", "path": "cpp\\header\\vector.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <vector>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <version>", "type": "cpp", "path": "cpp\\header\\version.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <version>"}, {"name": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/any>", "type": "cpp", "path": "cpp\\header\\experimental\\any.html", "desc": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/any>"}, {"name": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/filesystem>", "type": "cpp", "path": "cpp\\header\\experimental\\filesystem.html", "desc": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/filesystem>"}, {"name": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/memory_resource>", "type": "cpp", "path": "cpp\\header\\experimental\\memory_resource.html", "desc": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/memory_resource>"}, {"name": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/optional>", "type": "cpp", "path": "cpp\\header\\experimental\\optional.html", "desc": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/optional>"}, {"name": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/reflect>", "type": "cpp", "path": "cpp\\header\\experimental\\reflect.html", "desc": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/reflect>"}, {"name": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/string_view>", "type": "cpp", "path": "cpp\\header\\experimental\\string_view.html", "desc": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/string_view>"}, {"name": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/ranges/algorithm>", "type": "cpp", "path": "cpp\\header\\experimental\\ranges\\algorithm.html", "desc": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/ranges/algorithm>"}, {"name": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/ranges/concepts>", "type": "cpp", "path": "cpp\\header\\experimental\\ranges\\concepts.html", "desc": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/ranges/concepts>"}, {"name": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/ranges/functional>", "type": "cpp", "path": "cpp\\header\\experimental\\ranges\\functional.html", "desc": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/ranges/functional>"}, {"name": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/ranges/iterator>", "type": "cpp", "path": "cpp\\header\\experimental\\ranges\\iterator.html", "desc": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/ranges/iterator>"}, {"name": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/ranges/random>", "type": "cpp", "path": "cpp\\header\\experimental\\ranges\\random.html", "desc": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/ranges/random>"}, {"name": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <experimental/ranges/range>", "type": "cpp", "path": "cpp\\header\\experimental\\ranges\\range.html", "desc": "\u6807\u51c6\u5e93\u6807\u5934\u6807\u51c6\u5e93\u6807\u5934 <experimental/ranges/range>"}, {"name": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/ranges/tuple>", "type": "cpp", "path": "cpp\\header\\experimental\\ranges\\tuple.html", "desc": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/ranges/tuple>"}, {"name": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/ranges/type_traits>", "type": "cpp", "path": "cpp\\header\\experimental\\ranges\\type_traits.html", "desc": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/ranges/type_traits>"}, {"name": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/ranges/utility>", "type": "cpp", "path": "cpp\\header\\experimental\\ranges\\utility.html", "desc": "\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6\u5b9e\u9a8c\u6027\u5e93\u5934\u6587\u4ef6 <experimental/ranges/utility>"}, {"name": "std::std::basic_filebuf", "type": "cpp", "path": "cpp\\io\\basic_filebuf.html", "desc": "std::std::basic_filebuf"}, {"name": "std::std::basic_fstream", "type": "cpp", "path": "cpp\\io\\basic_fstream.html", "desc": "std::std::basic_fstream"}, {"name": "std::std::basic_ifstream", "type": "cpp", "path": "cpp\\io\\basic_ifstream.html", "desc": "std::std::basic_ifstream"}, {"name": "std::std::basic_ios", "type": "cpp", "path": "cpp\\io\\basic_ios.html", "desc": "std::std::basic_ios"}, {"name": "std::std::basic_iostream", "type": "cpp", "path": "cpp\\io\\basic_iostream.html", "desc": "std::std::basic_iostream"}, {"name": "std::std::basic_ispanstream", "type": "cpp", "path": "cpp\\io\\basic_ispanstream.html", "desc": "std::std::basic_ispanstream"}, {"name": "std::std::basic_istream", "type": "cpp", "path": "cpp\\io\\basic_istream.html", "desc": "std::std::basic_istream"}, {"name": "std::std::basic_istringstream", "type": "cpp", "path": "cpp\\io\\basic_istringstream.html", "desc": "std::std::basic_istringstream"}, {"name": "std::std::basic_ofstream", "type": "cpp", "path": "cpp\\io\\basic_ofstream.html", "desc": "std::std::basic_ofstream"}, {"name": "std::std::basic_ospanstream", "type": "cpp", "path": "cpp\\io\\basic_ospanstream.html", "desc": "std::std::basic_ospanstream"}, {"name": "std::std::basic_ostream", "type": "cpp", "path": "cpp\\io\\basic_ostream.html", "desc": "std::std::basic_ostream"}, {"name": "std::std::basic_ostringstream", "type": "cpp", "path": "cpp\\io\\basic_ostringstream.html", "desc": "std::std::basic_ostringstream"}, {"name": "std::std::basic_osyncstream", "type": "cpp", "path": "cpp\\io\\basic_osyncstream.html", "desc": "std::std::basic_osyncstream"}, {"name": "std::std::basic_spanbuf", "type": "cpp", "path": "cpp\\io\\basic_spanbuf.html", "desc": "std::std::basic_spanbuf"}, {"name": "std::std::basic_spanstream", "type": "cpp", "path": "cpp\\io\\basic_spanstream.html", "desc": "std::std::basic_spanstream"}, {"name": "std::std::basic_streambuf", "type": "cpp", "path": "cpp\\io\\basic_streambuf.html", "desc": "std::std::basic_streambuf"}, {"name": "std::std::basic_stringbuf", "type": "cpp", "path": "cpp\\io\\basic_stringbuf.html", "desc": "std::std::basic_stringbuf"}, {"name": "std::std::basic_stringstream", "type": "cpp", "path": "cpp\\io\\basic_stringstream.html", "desc": "std::std::basic_stringstream"}, {"name": "std::std::basic_syncbuf", "type": "cpp", "path": "cpp\\io\\basic_syncbuf.html", "desc": "std::std::basic_syncbuf"}, {"name": "C \u98ce\u683c\u6587\u4ef6\u8f93\u5165/\u8f93\u51fa", "type": "cpp", "path": "cpp\\io\\c.html", "desc": "C \u98ce\u683c\u6587\u4ef6\u8f93\u5165/\u8f93\u51fa"}, {"name": "std:: std::std::cerr, std::wcerr", "type": "cpp", "path": "cpp\\io\\cerr.html", "desc": "std:: std::std::cerr, std::wcerr"}, {"name": "std:: std::std::cin, std::wcin", "type": "cpp", "path": "cpp\\io\\cin.html", "desc": "std:: std::std::cin, std::wcin"}, {"name": "std:: std::std::clog, std::wclog", "type": "cpp", "path": "cpp\\io\\clog.html", "desc": "std:: std::std::clog, std::wclog"}, {"name": "std:: std::std::cout, std::wcout", "type": "cpp", "path": "cpp\\io\\cout.html", "desc": "std:: std::std::cout, std::wcout"}, {"name": "std::std::fpos", "type": "cpp", "path": "cpp\\io\\fpos.html", "desc": "std::std::fpos"}, {"name": "std::std::iostream_category", "type": "cpp", "path": "cpp\\io\\iostream_category.html", "desc": "std::std::iostream_category"}, {"name": "std::std::ios_base", "type": "cpp", "path": "cpp\\io\\ios_base.html", "desc": "std::std::ios_base"}, {"name": "std::std::io_errc", "type": "cpp", "path": "cpp\\io\\io_errc.html", "desc": "std::std::io_errc"}, {"name": "std::std::istrstream", "type": "cpp", "path": "cpp\\io\\istrstream.html", "desc": "std::std::istrstream"}, {"name": "\u8f93\u5165/\u8f93\u51fa\u64cd\u7eb5\u7b26", "type": "cpp", "path": "cpp\\io\\manip.html", "desc": "\u8f93\u5165/\u8f93\u51fa\u64cd\u7eb5\u7b26"}, {"name": "std::std::ostrstream", "type": "cpp", "path": "cpp\\io\\ostrstream.html", "desc": "std::std::ostrstream"}, {"name": "std::std::print", "type": "cpp", "path": "cpp\\io\\print.html", "desc": "std::std::print"}, {"name": "std::std::println", "type": "cpp", "path": "cpp\\io\\println.html", "desc": "std::std::println"}, {"name": "std::std::streamoff", "type": "cpp", "path": "cpp\\io\\streamoff.html", "desc": "std::std::streamoff"}, {"name": "std::std::streamsize", "type": "cpp", "path": "cpp\\io\\streamsize.html", "desc": "std::std::streamsize"}, {"name": "std::std::strstream", "type": "cpp", "path": "cpp\\io\\strstream.html", "desc": "std::std::strstream"}, {"name": "std::std::strstreambuf", "type": "cpp", "path": "cpp\\io\\strstreambuf.html", "desc": "std::std::strstreambuf"}, {"name": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::basic_filebuf", "type": "cpp", "path": "cpp\\io\\basic_filebuf\\basic_filebuf.html", "desc": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::basic_filebuf"}, {"name": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::close", "type": "cpp", "path": "cpp\\io\\basic_filebuf\\close.html", "desc": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::close"}, {"name": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::imbue", "type": "cpp", "path": "cpp\\io\\basic_filebuf\\imbue.html", "desc": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::imbue"}, {"name": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::is_open", "type": "cpp", "path": "cpp\\io\\basic_filebuf\\is_open.html", "desc": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::is_open"}, {"name": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::open", "type": "cpp", "path": "cpp\\io\\basic_filebuf\\open.html", "desc": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::open"}, {"name": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::operator=", "type": "cpp", "path": "cpp\\io\\basic_filebuf\\operator=.html", "desc": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::operator="}, {"name": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::overflow", "type": "cpp", "path": "cpp\\io\\basic_filebuf\\overflow.html", "desc": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::overflow"}, {"name": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::pbackfail", "type": "cpp", "path": "cpp\\io\\basic_filebuf\\pbackfail.html", "desc": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::pbackfail"}, {"name": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::seekoff", "type": "cpp", "path": "cpp\\io\\basic_filebuf\\seekoff.html", "desc": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::seekoff"}, {"name": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::seekpos", "type": "cpp", "path": "cpp\\io\\basic_filebuf\\seekpos.html", "desc": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::seekpos"}, {"name": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::setbuf", "type": "cpp", "path": "cpp\\io\\basic_filebuf\\setbuf.html", "desc": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::setbuf"}, {"name": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::showmanyc", "type": "cpp", "path": "cpp\\io\\basic_filebuf\\showmanyc.html", "desc": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::showmanyc"}, {"name": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::swap", "type": "cpp", "path": "cpp\\io\\basic_filebuf\\swap.html", "desc": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::swap"}, {"name": "std::std::swap(std::basic_filebuf)", "type": "cpp", "path": "cpp\\io\\basic_filebuf\\swap2.html", "desc": "std::std::swap(std::basic_filebuf)"}, {"name": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::sync", "type": "cpp", "path": "cpp\\io\\basic_filebuf\\sync.html", "desc": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::sync"}, {"name": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::uflow", "type": "cpp", "path": "cpp\\io\\basic_filebuf\\uflow.html", "desc": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::uflow"}, {"name": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::underflow", "type": "cpp", "path": "cpp\\io\\basic_filebuf\\underflow.html", "desc": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::underflow"}, {"name": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::~basic_filebuf", "type": "cpp", "path": "cpp\\io\\basic_filebuf\\~basic_filebuf.html", "desc": "std::basic_filebuf<CharT,Traits>::std::basic_filebuf<CharT,Traits>::~basic_filebuf"}, {"name": "std::basic_fstream<CharT,Traits>::std::basic_fstream<CharT,Traits>::basic_fstream", "type": "cpp", "path": "cpp\\io\\basic_fstream\\basic_fstream.html", "desc": "std::basic_fstream<CharT,Traits>::std::basic_fstream<CharT,Traits>::basic_fstream"}, {"name": "std::basic_fstream<CharT,Traits>::std::basic_fstream<CharT,Traits>::close", "type": "cpp", "path": "cpp\\io\\basic_fstream\\close.html", "desc": "std::basic_fstream<CharT,Traits>::std::basic_fstream<CharT,Traits>::close"}, {"name": "std::basic_fstream<CharT,Traits>::std::basic_fstream<CharT,Traits>::is_open", "type": "cpp", "path": "cpp\\io\\basic_fstream\\is_open.html", "desc": "std::basic_fstream<CharT,Traits>::std::basic_fstream<CharT,Traits>::is_open"}, {"name": "std::basic_fstream<CharT,Traits>::std::basic_fstream<CharT,Traits>::open", "type": "cpp", "path": "cpp\\io\\basic_fstream\\open.html", "desc": "std::basic_fstream<CharT,Traits>::std::basic_fstream<CharT,Traits>::open"}, {"name": "std::basic_fstream<CharT,Traits>::std::basic_fstream<CharT,Traits>::operator=", "type": "cpp", "path": "cpp\\io\\basic_fstream\\operator=.html", "desc": "std::basic_fstream<CharT,Traits>::std::basic_fstream<CharT,Traits>::operator="}, {"name": "std::basic_fstream<CharT,Traits>::std::basic_fstream<CharT,Traits>::rdbuf", "type": "cpp", "path": "cpp\\io\\basic_fstream\\rdbuf.html", "desc": "std::basic_fstream<CharT,Traits>::std::basic_fstream<CharT,Traits>::rdbuf"}, {"name": "std::basic_fstream<CharT,Traits>::std::basic_fstream<CharT,Traits>::swap", "type": "cpp", "path": "cpp\\io\\basic_fstream\\swap.html", "desc": "std::basic_fstream<CharT,Traits>::std::basic_fstream<CharT,Traits>::swap"}, {"name": "std::std::swap(std::basic_fstream)", "type": "cpp", "path": "cpp\\io\\basic_fstream\\swap2.html", "desc": "std::std::swap(std::basic_fstream)"}, {"name": "std::basic_ifstream<CharT,Traits>::std::basic_ifstream<CharT,Traits>::basic_ifstream", "type": "cpp", "path": "cpp\\io\\basic_ifstream\\basic_ifstream.html", "desc": "std::basic_ifstream<CharT,Traits>::std::basic_ifstream<CharT,Traits>::basic_ifstream"}, {"name": "std::basic_ifstream<CharT,Traits>::std::basic_ifstream<CharT,Traits>::close", "type": "cpp", "path": "cpp\\io\\basic_ifstream\\close.html", "desc": "std::basic_ifstream<CharT,Traits>::std::basic_ifstream<CharT,Traits>::close"}, {"name": "std::basic_ifstream<CharT,Traits>::std::basic_ifstream<CharT,Traits>::is_open", "type": "cpp", "path": "cpp\\io\\basic_ifstream\\is_open.html", "desc": "std::basic_ifstream<CharT,Traits>::std::basic_ifstream<CharT,Traits>::is_open"}, {"name": "std::basic_ifstream<CharT,Traits>::std::basic_ifstream<CharT,Traits>::open", "type": "cpp", "path": "cpp\\io\\basic_ifstream\\open.html", "desc": "std::basic_ifstream<CharT,Traits>::std::basic_ifstream<CharT,Traits>::open"}, {"name": "std::basic_ifstream<CharT,Traits>::std::basic_ifstream<CharT,Traits>::operator=", "type": "cpp", "path": "cpp\\io\\basic_ifstream\\operator=.html", "desc": "std::basic_ifstream<CharT,Traits>::std::basic_ifstream<CharT,Traits>::operator="}, {"name": "std::basic_ifstream<CharT,Traits>::std::basic_ifstream<CharT,Traits>::rdbuf", "type": "cpp", "path": "cpp\\io\\basic_ifstream\\rdbuf.html", "desc": "std::basic_ifstream<CharT,Traits>::std::basic_ifstream<CharT,Traits>::rdbuf"}, {"name": "std::basic_ifstream<CharT,Traits>::std::basic_ifstream<CharT,Traits>::swap", "type": "cpp", "path": "cpp\\io\\basic_ifstream\\swap.html", "desc": "std::basic_ifstream<CharT,Traits>::std::basic_ifstream<CharT,Traits>::swap"}, {"name": "std::std::swap(std::basic_ifstream)", "type": "cpp", "path": "cpp\\io\\basic_ifstream\\swap2.html", "desc": "std::std::swap(std::basic_ifstream)"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::bad", "type": "cpp", "path": "cpp\\io\\basic_ios\\bad.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::bad"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::basic_ios", "type": "cpp", "path": "cpp\\io\\basic_ios\\basic_ios.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::basic_ios"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::clear", "type": "cpp", "path": "cpp\\io\\basic_ios\\clear.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::clear"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::copyfmt", "type": "cpp", "path": "cpp\\io\\basic_ios\\copyfmt.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::copyfmt"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::eof", "type": "cpp", "path": "cpp\\io\\basic_ios\\eof.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::eof"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::exceptions", "type": "cpp", "path": "cpp\\io\\basic_ios\\exceptions.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::exceptions"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::fail", "type": "cpp", "path": "cpp\\io\\basic_ios\\fail.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::fail"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::fill", "type": "cpp", "path": "cpp\\io\\basic_ios\\fill.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::fill"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::good", "type": "cpp", "path": "cpp\\io\\basic_ios\\good.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::good"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::imbue", "type": "cpp", "path": "cpp\\io\\basic_ios\\imbue.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::imbue"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::init", "type": "cpp", "path": "cpp\\io\\basic_ios\\init.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::init"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::move", "type": "cpp", "path": "cpp\\io\\basic_ios\\move.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::move"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::narrow", "type": "cpp", "path": "cpp\\io\\basic_ios\\narrow.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::narrow"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::operator!", "type": "cpp", "path": "cpp\\io\\basic_ios\\operator!.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::operator!"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::operator bool", "type": "cpp", "path": "cpp\\io\\basic_ios\\operator_bool.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::operator bool"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::rdbuf", "type": "cpp", "path": "cpp\\io\\basic_ios\\rdbuf.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::rdbuf"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::rdstate", "type": "cpp", "path": "cpp\\io\\basic_ios\\rdstate.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::rdstate"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::setstate", "type": "cpp", "path": "cpp\\io\\basic_ios\\setstate.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::setstate"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::set_rdbuf", "type": "cpp", "path": "cpp\\io\\basic_ios\\set_rdbuf.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::set_rdbuf"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::swap", "type": "cpp", "path": "cpp\\io\\basic_ios\\swap.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::swap"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::tie", "type": "cpp", "path": "cpp\\io\\basic_ios\\tie.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::tie"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::widen", "type": "cpp", "path": "cpp\\io\\basic_ios\\widen.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::widen"}, {"name": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::~basic_ios", "type": "cpp", "path": "cpp\\io\\basic_ios\\~basic_ios.html", "desc": "std::basic_ios<CharT,Traits>::std::basic_ios<CharT,Traits>::~basic_ios"}, {"name": "std::basic_iostream<CharT,Traits>::std::basic_iostream<CharT,Traits>::basic_iostream", "type": "cpp", "path": "cpp\\io\\basic_iostream\\basic_iostream.html", "desc": "std::basic_iostream<CharT,Traits>::std::basic_iostream<CharT,Traits>::basic_iostream"}, {"name": "std::basic_iostream<CharT,Traits>::std::basic_iostream<CharT,Traits>::operator=", "type": "cpp", "path": "cpp\\io\\basic_iostream\\operator=.html", "desc": "std::basic_iostream<CharT,Traits>::std::basic_iostream<CharT,Traits>::operator="}, {"name": "std::basic_iostream<CharT,Traits>::std::basic_iostream<CharT,Traits>::swap", "type": "cpp", "path": "cpp\\io\\basic_iostream\\swap.html", "desc": "std::basic_iostream<CharT,Traits>::std::basic_iostream<CharT,Traits>::swap"}, {"name": "std::basic_iostream<CharT,Traits>::std::basic_iostream<CharT,Traits>::~basic_iostream", "type": "cpp", "path": "cpp\\io\\basic_iostream\\~basic_iostream.html", "desc": "std::basic_iostream<CharT,Traits>::std::basic_iostream<CharT,Traits>::~basic_iostream"}, {"name": "std::basic_ispanstream<CharT,Traits>::std::basic_ispanstream<CharT,Traits>::basic_ispanstream", "type": "cpp", "path": "cpp\\io\\basic_ispanstream\\basic_ispanstream.html", "desc": "std::basic_ispanstream<CharT,Traits>::std::basic_ispanstream<CharT,Traits>::basic_ispanstream"}, {"name": "std::basic_ispanstream<CharT,Traits>::std::basic_ispanstream<CharT,Traits>::operator=", "type": "cpp", "path": "cpp\\io\\basic_ispanstream\\operator=.html", "desc": "std::basic_ispanstream<CharT,Traits>::std::basic_ispanstream<CharT,Traits>::operator="}, {"name": "std::basic_ispanstream<CharT,Traits>::std::basic_ispanstream<CharT,Traits>::rdbuf", "type": "cpp", "path": "cpp\\io\\basic_ispanstream\\rdbuf.html", "desc": "std::basic_ispanstream<CharT,Traits>::std::basic_ispanstream<CharT,Traits>::rdbuf"}, {"name": "std::basic_ispanstream<CharT,Traits>::std::basic_ispanstream<CharT,Traits>::span", "type": "cpp", "path": "cpp\\io\\basic_ispanstream\\span.html", "desc": "std::basic_ispanstream<CharT,Traits>::std::basic_ispanstream<CharT,Traits>::span"}, {"name": "std::basic_ispanstream<CharT,Traits>::std::basic_ispanstream<CharT,Traits>::swap", "type": "cpp", "path": "cpp\\io\\basic_ispanstream\\swap.html", "desc": "std::basic_ispanstream<CharT,Traits>::std::basic_ispanstream<CharT,Traits>::swap"}, {"name": "std::std::swap(std::basic_ispanstream)", "type": "cpp", "path": "cpp\\io\\basic_ispanstream\\swap2.html", "desc": "std::std::swap(std::basic_ispanstream)"}, {"name": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::basic_istream", "type": "cpp", "path": "cpp\\io\\basic_istream\\basic_istream.html", "desc": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::basic_istream"}, {"name": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::gcount", "type": "cpp", "path": "cpp\\io\\basic_istream\\gcount.html", "desc": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::gcount"}, {"name": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::get", "type": "cpp", "path": "cpp\\io\\basic_istream\\get.html", "desc": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::get"}, {"name": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::getline", "type": "cpp", "path": "cpp\\io\\basic_istream\\getline.html", "desc": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::getline"}, {"name": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::ignore", "type": "cpp", "path": "cpp\\io\\basic_istream\\ignore.html", "desc": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::ignore"}, {"name": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::operator=", "type": "cpp", "path": "cpp\\io\\basic_istream\\operator=.html", "desc": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::operator="}, {"name": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::operator>>", "type": "cpp", "path": "cpp\\io\\basic_istream\\operator_gtgt.html", "desc": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::operator>>"}, {"name": "(std::basic_istream)operator>>(std::basic_istream)", "type": "cpp", "path": "cpp\\io\\basic_istream\\operator_gtgt2.html", "desc": "(std::basic_istream)operator>>(std::basic_istream)"}, {"name": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::peek", "type": "cpp", "path": "cpp\\io\\basic_istream\\peek.html", "desc": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::peek"}, {"name": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::putback", "type": "cpp", "path": "cpp\\io\\basic_istream\\putback.html", "desc": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::putback"}, {"name": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::read", "type": "cpp", "path": "cpp\\io\\basic_istream\\read.html", "desc": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::read"}, {"name": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::readsome", "type": "cpp", "path": "cpp\\io\\basic_istream\\readsome.html", "desc": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::readsome"}, {"name": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::seekg", "type": "cpp", "path": "cpp\\io\\basic_istream\\seekg.html", "desc": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::seekg"}, {"name": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::sentry", "type": "cpp", "path": "cpp\\io\\basic_istream\\sentry.html", "desc": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::sentry"}, {"name": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::swap", "type": "cpp", "path": "cpp\\io\\basic_istream\\swap.html", "desc": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::swap"}, {"name": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::sync", "type": "cpp", "path": "cpp\\io\\basic_istream\\sync.html", "desc": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::sync"}, {"name": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::tellg", "type": "cpp", "path": "cpp\\io\\basic_istream\\tellg.html", "desc": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::tellg"}, {"name": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::unget", "type": "cpp", "path": "cpp\\io\\basic_istream\\unget.html", "desc": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::unget"}, {"name": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::~basic_istream", "type": "cpp", "path": "cpp\\io\\basic_istream\\~basic_istream.html", "desc": "std::basic_istream<CharT,Traits>::std::basic_istream<CharT,Traits>::~basic_istream"}, {"name": "std::basic_istringstream<CharT,Traits,Allocator>::std::basic_istringstream<CharT,Traits,Allocator>::basic_istringstream", "type": "cpp", "path": "cpp\\io\\basic_istringstream\\basic_istringstream.html", "desc": "std::basic_istringstream<CharT,Traits,Allocator>::std::basic_istringstream<CharT,Traits,Allocator>::basic_istringstream"}, {"name": "std::basic_istringstream::std::basic_istringstream::operator=", "type": "cpp", "path": "cpp\\io\\basic_istringstream\\operator=.html", "desc": "std::basic_istringstream::std::basic_istringstream::operator="}, {"name": "std::basic_istringstream::std::basic_istringstream::rdbuf", "type": "cpp", "path": "cpp\\io\\basic_istringstream\\rdbuf.html", "desc": "std::basic_istringstream::std::basic_istringstream::rdbuf"}, {"name": "std::basic_istringstream<CharT,Traits,Allocator>::std::basic_istringstream<CharT,Traits,Allocator>::str", "type": "cpp", "path": "cpp\\io\\basic_istringstream\\str.html", "desc": "std::basic_istringstream<CharT,Traits,Allocator>::std::basic_istringstream<CharT,Traits,Allocator>::str"}, {"name": "std::basic_istringstream::std::basic_istringstream::swap", "type": "cpp", "path": "cpp\\io\\basic_istringstream\\swap.html", "desc": "std::basic_istringstream::std::basic_istringstream::swap"}, {"name": "std::std::swap(std::basic_istringstream)", "type": "cpp", "path": "cpp\\io\\basic_istringstream\\swap2.html", "desc": "std::std::swap(std::basic_istringstream)"}, {"name": "std::basic_istringstream<CharT,Traits,Allocator>::std::basic_istringstream<CharT,Traits,Allocator>::view", "type": "cpp", "path": "cpp\\io\\basic_istringstream\\view.html", "desc": "std::basic_istringstream<CharT,Traits,Allocator>::std::basic_istringstream<CharT,Traits,Allocator>::view"}, {"name": "std::basic_ofstream<CharT,Traits>::std::basic_ofstream<CharT,Traits>::basic_ofstream", "type": "cpp", "path": "cpp\\io\\basic_ofstream\\basic_ofstream.html", "desc": "std::basic_ofstream<CharT,Traits>::std::basic_ofstream<CharT,Traits>::basic_ofstream"}, {"name": "std::basic_ofstream<CharT,Traits>::std::basic_ofstream<CharT,Traits>::close", "type": "cpp", "path": "cpp\\io\\basic_ofstream\\close.html", "desc": "std::basic_ofstream<CharT,Traits>::std::basic_ofstream<CharT,Traits>::close"}, {"name": "std::basic_ofstream<CharT,Traits>::std::basic_ofstream<CharT,Traits>::is_open", "type": "cpp", "path": "cpp\\io\\basic_ofstream\\is_open.html", "desc": "std::basic_ofstream<CharT,Traits>::std::basic_ofstream<CharT,Traits>::is_open"}, {"name": "std::basic_ofstream<CharT,Traits>::std::basic_ofstream<CharT,Traits>::open", "type": "cpp", "path": "cpp\\io\\basic_ofstream\\open.html", "desc": "std::basic_ofstream<CharT,Traits>::std::basic_ofstream<CharT,Traits>::open"}, {"name": "std::basic_ofstream<CharT,Traits>::std::basic_ofstream<CharT,Traits>::operator=", "type": "cpp", "path": "cpp\\io\\basic_ofstream\\operator=.html", "desc": "std::basic_ofstream<CharT,Traits>::std::basic_ofstream<CharT,Traits>::operator="}, {"name": "std::basic_ofstream<CharT,Traits>::std::basic_ofstream<CharT,Traits>::rdbuf", "type": "cpp", "path": "cpp\\io\\basic_ofstream\\rdbuf.html", "desc": "std::basic_ofstream<CharT,Traits>::std::basic_ofstream<CharT,Traits>::rdbuf"}, {"name": "std::basic_ofstream<CharT,Traits>::std::basic_ofstream<CharT,Traits>::swap", "type": "cpp", "path": "cpp\\io\\basic_ofstream\\swap.html", "desc": "std::basic_ofstream<CharT,Traits>::std::basic_ofstream<CharT,Traits>::swap"}, {"name": "std::std::swap(std::basic_ofstream)", "type": "cpp", "path": "cpp\\io\\basic_ofstream\\swap2.html", "desc": "std::std::swap(std::basic_ofstream)"}, {"name": "std::basic_ospanstream<CharT,Traits>::std::basic_ospanstream<CharT,Traits>::basic_ospanstream", "type": "cpp", "path": "cpp\\io\\basic_ospanstream\\basic_ospanstream.html", "desc": "std::basic_ospanstream<CharT,Traits>::std::basic_ospanstream<CharT,Traits>::basic_ospanstream"}, {"name": "std::basic_ospanstream<CharT,Traits>::std::basic_ospanstream<CharT,Traits>::operator=", "type": "cpp", "path": "cpp\\io\\basic_ospanstream\\operator=.html", "desc": "std::basic_ospanstream<CharT,Traits>::std::basic_ospanstream<CharT,Traits>::operator="}, {"name": "std::basic_ospanstream<CharT,Traits>::std::basic_ospanstream<CharT,Traits>::rdbuf", "type": "cpp", "path": "cpp\\io\\basic_ospanstream\\rdbuf.html", "desc": "std::basic_ospanstream<CharT,Traits>::std::basic_ospanstream<CharT,Traits>::rdbuf"}, {"name": "std::basic_ospanstream<CharT,Traits>::std::basic_ospanstream<CharT,Traits>::span", "type": "cpp", "path": "cpp\\io\\basic_ospanstream\\span.html", "desc": "std::basic_ospanstream<CharT,Traits>::std::basic_ospanstream<CharT,Traits>::span"}, {"name": "std::basic_ospanstream<CharT,Traits>::std::basic_ospanstream<CharT,Traits>::swap", "type": "cpp", "path": "cpp\\io\\basic_ospanstream\\swap.html", "desc": "std::basic_ospanstream<CharT,Traits>::std::basic_ospanstream<CharT,Traits>::swap"}, {"name": "std::std::swap(std::basic_ospanstream)", "type": "cpp", "path": "cpp\\io\\basic_ospanstream\\swap2.html", "desc": "std::std::swap(std::basic_ospanstream)"}, {"name": "std::basic_ostream<CharT,Traits>::std::basic_ostream<CharT,Traits>::basic_ostream", "type": "cpp", "path": "cpp\\io\\basic_ostream\\basic_ostream.html", "desc": "std::basic_ostream<CharT,Traits>::std::basic_ostream<CharT,Traits>::basic_ostream"}, {"name": "std::basic_ostream<CharT,Traits>::std::basic_ostream<CharT,Traits>::flush", "type": "cpp", "path": "cpp\\io\\basic_ostream\\flush.html", "desc": "std::basic_ostream<CharT,Traits>::std::basic_ostream<CharT,Traits>::flush"}, {"name": "std::basic_ostream<CharT,Traits>::std::basic_ostream<CharT,Traits>::operator=", "type": "cpp", "path": "cpp\\io\\basic_ostream\\operator=.html", "desc": "std::basic_ostream<CharT,Traits>::std::basic_ostream<CharT,Traits>::operator="}, {"name": "std::basic_ostream<CharT,Traits>::std::basic_ostream<CharT,Traits>::operator<<", "type": "cpp", "path": "cpp\\io\\basic_ostream\\operator_ltlt.html", "desc": "std::basic_ostream<CharT,Traits>::std::basic_ostream<CharT,Traits>::operator<<"}, {"name": "(std::basic_ostream)operator<<(std::basic_ostream)", "type": "cpp", "path": "cpp\\io\\basic_ostream\\operator_ltlt2.html", "desc": "(std::basic_ostream)operator<<(std::basic_ostream)"}, {"name": "(std::ostream)print(std::ostream)", "type": "cpp", "path": "cpp\\io\\basic_ostream\\print.html", "desc": "(std::ostream)print(std::ostream)"}, {"name": "std::basic_ostream<CharT,Traits>::std::basic_ostream<CharT,Traits>::put", "type": "cpp", "path": "cpp\\io\\basic_ostream\\put.html", "desc": "std::basic_ostream<CharT,Traits>::std::basic_ostream<CharT,Traits>::put"}, {"name": "std::basic_ostream<CharT,Traits>::std::basic_ostream<CharT,Traits>::seekp", "type": "cpp", "path": "cpp\\io\\basic_ostream\\seekp.html", "desc": "std::basic_ostream<CharT,Traits>::std::basic_ostream<CharT,Traits>::seekp"}, {"name": "std::basic_ostream<CharT,Traits>::std::basic_ostream<CharT,Traits>::sentry", "type": "cpp", "path": "cpp\\io\\basic_ostream\\sentry.html", "desc": "std::basic_ostream<CharT,Traits>::std::basic_ostream<CharT,Traits>::sentry"}, {"name": "std::basic_ostream<CharT,Traits>::std::basic_ostream<CharT,Traits>::swap", "type": "cpp", "path": "cpp\\io\\basic_ostream\\swap.html", "desc": "std::basic_ostream<CharT,Traits>::std::basic_ostream<CharT,Traits>::swap"}, {"name": "std::basic_ostream<CharT,Traits>::std::basic_ostream<CharT,Traits>::tellp", "type": "cpp", "path": "cpp\\io\\basic_ostream\\tellp.html", "desc": "std::basic_ostream<CharT,Traits>::std::basic_ostream<CharT,Traits>::tellp"}, {"name": "std::basic_ostream<CharT,Traits>::std::basic_ostream<CharT,Traits>::write", "type": "cpp", "path": "cpp\\io\\basic_ostream\\write.html", "desc": "std::basic_ostream<CharT,Traits>::std::basic_ostream<CharT,Traits>::write"}, {"name": "std::basic_ostream<CharT,Traits>::std::basic_ostream<CharT,Traits>::~basic_ostream", "type": "cpp", "path": "cpp\\io\\basic_ostream\\~basic_ostream.html", "desc": "std::basic_ostream<CharT,Traits>::std::basic_ostream<CharT,Traits>::~basic_ostream"}, {"name": "std::basic_ostringstream<CharT,Traits,Allocator>::std::basic_ostringstream<CharT,Traits,Allocator>::basic_ostringstream", "type": "cpp", "path": "cpp\\io\\basic_ostringstream\\basic_ostringstream.html", "desc": "std::basic_ostringstream<CharT,Traits,Allocator>::std::basic_ostringstream<CharT,Traits,Allocator>::basic_ostringstream"}, {"name": "std::basic_ostringstream::std::basic_ostringstream::operator=", "type": "cpp", "path": "cpp\\io\\basic_ostringstream\\operator=.html", "desc": "std::basic_ostringstream::std::basic_ostringstream::operator="}, {"name": "std::basic_ostringstream::std::basic_ostringstream::rdbuf", "type": "cpp", "path": "cpp\\io\\basic_ostringstream\\rdbuf.html", "desc": "std::basic_ostringstream::std::basic_ostringstream::rdbuf"}, {"name": "std::basic_ostringstream<CharT,Traits,Allocator>::std::basic_ostringstream<CharT,Traits,Allocator>::str", "type": "cpp", "path": "cpp\\io\\basic_ostringstream\\str.html", "desc": "std::basic_ostringstream<CharT,Traits,Allocator>::std::basic_ostringstream<CharT,Traits,Allocator>::str"}, {"name": "std::basic_ostringstream::std::basic_ostringstream::swap", "type": "cpp", "path": "cpp\\io\\basic_ostringstream\\swap.html", "desc": "std::basic_ostringstream::std::basic_ostringstream::swap"}, {"name": "std::std::swap(std::basic_ostringstream)", "type": "cpp", "path": "cpp\\io\\basic_ostringstream\\swap2.html", "desc": "std::std::swap(std::basic_ostringstream)"}, {"name": "std::basic_ostringstream<CharT,Traits,Allocator>::std::basic_ostringstream<CharT,Traits,Allocator>::view", "type": "cpp", "path": "cpp\\io\\basic_ostringstream\\view.html", "desc": "std::basic_ostringstream<CharT,Traits,Allocator>::std::basic_ostringstream<CharT,Traits,Allocator>::view"}, {"name": "std::basic_osyncstream<CharT,Traits,Allocator>::std::basic_osyncstream<CharT,Traits,Allocator>::basic_osyncstream", "type": "cpp", "path": "cpp\\io\\basic_osyncstream\\basic_osyncstream.html", "desc": "std::basic_osyncstream<CharT,Traits,Allocator>::std::basic_osyncstream<CharT,Traits,Allocator>::basic_osyncstream"}, {"name": "std::basic_osyncstream<CharT,Traits,Allocator>::std::basic_osyncstream<CharT,Traits,Allocator>::emit", "type": "cpp", "path": "cpp\\io\\basic_osyncstream\\emit.html", "desc": "std::basic_osyncstream<CharT,Traits,Allocator>::std::basic_osyncstream<CharT,Traits,Allocator>::emit"}, {"name": "std::basic_osyncstream<CharT,Traits,Allocator>::std::basic_osyncstream<CharT,Traits,Allocator>::get_wrapped", "type": "cpp", "path": "cpp\\io\\basic_osyncstream\\get_wrapped.html", "desc": "std::basic_osyncstream<CharT,Traits,Allocator>::std::basic_osyncstream<CharT,Traits,Allocator>::get_wrapped"}, {"name": "std::basic_osyncstream<CharT,Traits,Allocator>::std::basic_osyncstream<CharT,Traits,Allocator>::operator=", "type": "cpp", "path": "cpp\\io\\basic_osyncstream\\operator=.html", "desc": "std::basic_osyncstream<CharT,Traits,Allocator>::std::basic_osyncstream<CharT,Traits,Allocator>::operator="}, {"name": "std::basic_osyncstream<CharT,Traits,Allocator>::std::basic_osyncstream<CharT,Traits,Allocator>::rdbuf", "type": "cpp", "path": "cpp\\io\\basic_osyncstream\\rdbuf.html", "desc": "std::basic_osyncstream<CharT,Traits,Allocator>::std::basic_osyncstream<CharT,Traits,Allocator>::rdbuf"}, {"name": "std::basic_osyncstream<CharT,Traits,Allocator>::std::basic_osyncstream<CharT,Traits,Allocator>::~basic_osyncstream", "type": "cpp", "path": "cpp\\io\\basic_osyncstream\\~basic_osyncstream.html", "desc": "std::basic_osyncstream<CharT,Traits,Allocator>::std::basic_osyncstream<CharT,Traits,Allocator>::~basic_osyncstream"}, {"name": "std::basic_spanbuf<CharT,Traits>::std::basic_spanbuf<CharT,Traits>::basic_spanbuf", "type": "cpp", "path": "cpp\\io\\basic_spanbuf\\basic_spanbuf.html", "desc": "std::basic_spanbuf<CharT,Traits>::std::basic_spanbuf<CharT,Traits>::basic_spanbuf"}, {"name": "std::basic_spanbuf<CharT,Traits>::std::basic_spanbuf<CharT,Traits>::operator=", "type": "cpp", "path": "cpp\\io\\basic_spanbuf\\operator=.html", "desc": "std::basic_spanbuf<CharT,Traits>::std::basic_spanbuf<CharT,Traits>::operator="}, {"name": "std::basic_spanbuf<CharT,Traits>::std::basic_spanbuf<CharT,Traits>::seekoff", "type": "cpp", "path": "cpp\\io\\basic_spanbuf\\seekoff.html", "desc": "std::basic_spanbuf<CharT,Traits>::std::basic_spanbuf<CharT,Traits>::seekoff"}, {"name": "std::basic_spanbuf<CharT,Traits>::std::basic_spanbuf<CharT,Traits>::seekpos", "type": "cpp", "path": "cpp\\io\\basic_spanbuf\\seekpos.html", "desc": "std::basic_spanbuf<CharT,Traits>::std::basic_spanbuf<CharT,Traits>::seekpos"}, {"name": "std::basic_spanbuf<CharT,Traits>::std::basic_spanbuf<CharT,Traits>::setbuf", "type": "cpp", "path": "cpp\\io\\basic_spanbuf\\setbuf.html", "desc": "std::basic_spanbuf<CharT,Traits>::std::basic_spanbuf<CharT,Traits>::setbuf"}, {"name": "std::basic_spanbuf<CharT,Traits>::std::basic_spanbuf<CharT,Traits>::span", "type": "cpp", "path": "cpp\\io\\basic_spanbuf\\span.html", "desc": "std::basic_spanbuf<CharT,Traits>::std::basic_spanbuf<CharT,Traits>::span"}, {"name": "std::basic_spanbuf<CharT,Traits>::std::basic_spanbuf<CharT,Traits>::swap", "type": "cpp", "path": "cpp\\io\\basic_spanbuf\\swap.html", "desc": "std::basic_spanbuf<CharT,Traits>::std::basic_spanbuf<CharT,Traits>::swap"}, {"name": "std::std::swap(std::basic_spanbuf)", "type": "cpp", "path": "cpp\\io\\basic_spanbuf\\swap2.html", "desc": "std::std::swap(std::basic_spanbuf)"}, {"name": "std::basic_spanstream<CharT,Traits>::std::basic_spanstream<CharT,Traits>::basic_spanstream", "type": "cpp", "path": "cpp\\io\\basic_spanstream\\basic_spanstream.html", "desc": "std::basic_spanstream<CharT,Traits>::std::basic_spanstream<CharT,Traits>::basic_spanstream"}, {"name": "std::basic_spanstream<CharT,Traits>::std::basic_spanstream<CharT,Traits>::operator=", "type": "cpp", "path": "cpp\\io\\basic_spanstream\\operator=.html", "desc": "std::basic_spanstream<CharT,Traits>::std::basic_spanstream<CharT,Traits>::operator="}, {"name": "std::basic_spanstream<CharT,Traits>::std::basic_spanstream<CharT,Traits>::rdbuf", "type": "cpp", "path": "cpp\\io\\basic_spanstream\\rdbuf.html", "desc": "std::basic_spanstream<CharT,Traits>::std::basic_spanstream<CharT,Traits>::rdbuf"}, {"name": "std::basic_spanstream<CharT,Traits>::std::basic_spanstream<CharT,Traits>::span", "type": "cpp", "path": "cpp\\io\\basic_spanstream\\span.html", "desc": "std::basic_spanstream<CharT,Traits>::std::basic_spanstream<CharT,Traits>::span"}, {"name": "std::basic_spanstream<CharT,Traits>::std::basic_spanstream<CharT,Traits>::swap", "type": "cpp", "path": "cpp\\io\\basic_spanstream\\swap.html", "desc": "std::basic_spanstream<CharT,Traits>::std::basic_spanstream<CharT,Traits>::swap"}, {"name": "std::std::swap(std::basic_spanstream)", "type": "cpp", "path": "cpp\\io\\basic_spanstream\\swap2.html", "desc": "std::std::swap(std::basic_spanstream)"}, {"name": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::basic_streambuf", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\basic_streambuf.html", "desc": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::basic_streambuf"}, {"name": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::gbump", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\gbump.html", "desc": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::gbump"}, {"name": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::getloc", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\getloc.html", "desc": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::getloc"}, {"name": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::eback, gptr, egptr", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\gptr.html", "desc": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::eback, gptr, egptr"}, {"name": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::in_avail", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\in_avail.html", "desc": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::in_avail"}, {"name": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::operator=", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\operator=.html", "desc": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::operator="}, {"name": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::overflow", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\overflow.html", "desc": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::overflow"}, {"name": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::pbackfail", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\pbackfail.html", "desc": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::pbackfail"}, {"name": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::pbump", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\pbump.html", "desc": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::pbump"}, {"name": "std::basic_streambuf<CharT,Traits>:: std::basic_streambuf<CharT,Traits>:: std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::pbase, std::basic_streambuf<CharT,Traits>::pptr, std::basic_streambuf<CharT,Traits>::epptr", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\pptr.html", "desc": "std::basic_streambuf<CharT,Traits>:: std::basic_streambuf<CharT,Traits>:: std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::pbase, std::basic_streambuf<CharT,Traits>::pptr, std::basic_streambuf<CharT,Traits>::epptr"}, {"name": "std::basic_streambuf<CharT,Traits>:: std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::pubimbue, std::basic_streambuf<CharT,Traits>::imbue", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\pubimbue.html", "desc": "std::basic_streambuf<CharT,Traits>:: std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::pubimbue, std::basic_streambuf<CharT,Traits>::imbue"}, {"name": "std::basic_streambuf<CharT,Traits>:: std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::pubseekoff, std::basic_streambuf<CharT,Traits>::seekoff", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\pubseekoff.html", "desc": "std::basic_streambuf<CharT,Traits>:: std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::pubseekoff, std::basic_streambuf<CharT,Traits>::seekoff"}, {"name": "std::basic_streambuf<CharT,Traits>:: std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::pubseekpos, std::basic_streambuf<CharT,Traits>::seekpos", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\pubseekpos.html", "desc": "std::basic_streambuf<CharT,Traits>:: std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::pubseekpos, std::basic_streambuf<CharT,Traits>::seekpos"}, {"name": "std::basic_streambuf<CharT,Traits>:: std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::pubsetbuf, std::basic_streambuf<CharT,Traits>::setbuf", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\pubsetbuf.html", "desc": "std::basic_streambuf<CharT,Traits>:: std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::pubsetbuf, std::basic_streambuf<CharT,Traits>::setbuf"}, {"name": "std::basic_streambuf<CharT,Traits>:: std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::pubsync, std::basic_streambuf<CharT,Traits>::sync", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\pubsync.html", "desc": "std::basic_streambuf<CharT,Traits>:: std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::pubsync, std::basic_streambuf<CharT,Traits>::sync"}, {"name": "std::basic_streambuf<CharT,Traits>:: std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::sbumpc, std::basic_streambuf<CharT,Traits>::stossc", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\sbumpc.html", "desc": "std::basic_streambuf<CharT,Traits>:: std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::sbumpc, std::basic_streambuf<CharT,Traits>::stossc"}, {"name": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::setg", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\setg.html", "desc": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::setg"}, {"name": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::setp", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\setp.html", "desc": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::setp"}, {"name": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::sgetc", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\sgetc.html", "desc": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::sgetc"}, {"name": "std::basic_streambuf<CharT,Traits>:: std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::sgetn, std::basic_streambuf<CharT,Traits>::xsgetn", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\sgetn.html", "desc": "std::basic_streambuf<CharT,Traits>:: std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::sgetn, std::basic_streambuf<CharT,Traits>::xsgetn"}, {"name": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::showmanyc", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\showmanyc.html", "desc": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::showmanyc"}, {"name": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::snextc", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\snextc.html", "desc": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::snextc"}, {"name": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::sputbackc", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\sputbackc.html", "desc": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::sputbackc"}, {"name": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::sputc", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\sputc.html", "desc": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::sputc"}, {"name": "std::basic_streambuf<CharT,Traits>:: std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::sputn, std::basic_streambuf<CharT,Traits>::xsputn", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\sputn.html", "desc": "std::basic_streambuf<CharT,Traits>:: std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::sputn, std::basic_streambuf<CharT,Traits>::xsputn"}, {"name": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::sungetc", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\sungetc.html", "desc": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::sungetc"}, {"name": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::swap", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\swap.html", "desc": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::swap"}, {"name": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::uflow", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\uflow.html", "desc": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::uflow"}, {"name": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::underflow", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\underflow.html", "desc": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::underflow"}, {"name": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::~basic_streambuf", "type": "cpp", "path": "cpp\\io\\basic_streambuf\\~basic_streambuf.html", "desc": "std::basic_streambuf<CharT,Traits>::std::basic_streambuf<CharT,Traits>::~basic_streambuf"}, {"name": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::basic_stringbuf", "type": "cpp", "path": "cpp\\io\\basic_stringbuf\\basic_stringbuf.html", "desc": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::basic_stringbuf"}, {"name": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::get_allocator", "type": "cpp", "path": "cpp\\io\\basic_stringbuf\\get_allocator.html", "desc": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::get_allocator"}, {"name": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::init_buf_ptrs", "type": "cpp", "path": "cpp\\io\\basic_stringbuf\\init_buf_ptrs.html", "desc": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::init_buf_ptrs"}, {"name": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::operator=", "type": "cpp", "path": "cpp\\io\\basic_stringbuf\\operator=.html", "desc": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::operator="}, {"name": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::overflow", "type": "cpp", "path": "cpp\\io\\basic_stringbuf\\overflow.html", "desc": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::overflow"}, {"name": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::pbackfail", "type": "cpp", "path": "cpp\\io\\basic_stringbuf\\pbackfail.html", "desc": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::pbackfail"}, {"name": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::seekoff", "type": "cpp", "path": "cpp\\io\\basic_stringbuf\\seekoff.html", "desc": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::seekoff"}, {"name": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::seekpos", "type": "cpp", "path": "cpp\\io\\basic_stringbuf\\seekpos.html", "desc": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::seekpos"}, {"name": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::setbuf", "type": "cpp", "path": "cpp\\io\\basic_stringbuf\\setbuf.html", "desc": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::setbuf"}, {"name": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::str", "type": "cpp", "path": "cpp\\io\\basic_stringbuf\\str.html", "desc": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::str"}, {"name": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::swap", "type": "cpp", "path": "cpp\\io\\basic_stringbuf\\swap.html", "desc": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::swap"}, {"name": "std::std::swap(std::basic_stringbuf)", "type": "cpp", "path": "cpp\\io\\basic_stringbuf\\swap2.html", "desc": "std::std::swap(std::basic_stringbuf)"}, {"name": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::underflow", "type": "cpp", "path": "cpp\\io\\basic_stringbuf\\underflow.html", "desc": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::underflow"}, {"name": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::view", "type": "cpp", "path": "cpp\\io\\basic_stringbuf\\view.html", "desc": "std::basic_stringbuf<CharT,Traits,Allocator>::std::basic_stringbuf<CharT,Traits,Allocator>::view"}, {"name": "std::basic_stringstream<CharT,Traits,Allocator>::std::basic_stringstream<CharT,Traits,Allocator>::basic_stringstream", "type": "cpp", "path": "cpp\\io\\basic_stringstream\\basic_stringstream.html", "desc": "std::basic_stringstream<CharT,Traits,Allocator>::std::basic_stringstream<CharT,Traits,Allocator>::basic_stringstream"}, {"name": "std::basic_stringstream::std::basic_stringstream::operator=", "type": "cpp", "path": "cpp\\io\\basic_stringstream\\operator=.html", "desc": "std::basic_stringstream::std::basic_stringstream::operator="}, {"name": "std::basic_stringstream::std::basic_stringstream::rdbuf", "type": "cpp", "path": "cpp\\io\\basic_stringstream\\rdbuf.html", "desc": "std::basic_stringstream::std::basic_stringstream::rdbuf"}, {"name": "std::basic_stringstream<CharT,Traits,Allocator>::std::basic_stringstream<CharT,Traits,Allocator>::str", "type": "cpp", "path": "cpp\\io\\basic_stringstream\\str.html", "desc": "std::basic_stringstream<CharT,Traits,Allocator>::std::basic_stringstream<CharT,Traits,Allocator>::str"}, {"name": "std::basic_stringstream::std::basic_stringstream::swap", "type": "cpp", "path": "cpp\\io\\basic_stringstream\\swap.html", "desc": "std::basic_stringstream::std::basic_stringstream::swap"}, {"name": "std::std::swap(std::basic_stringstream)", "type": "cpp", "path": "cpp\\io\\basic_stringstream\\swap2.html", "desc": "std::std::swap(std::basic_stringstream)"}, {"name": "std::basic_stringstream<CharT,Traits,Allocator>::std::basic_stringstream<CharT,Traits,Allocator>::view", "type": "cpp", "path": "cpp\\io\\basic_stringstream\\view.html", "desc": "std::basic_stringstream<CharT,Traits,Allocator>::std::basic_stringstream<CharT,Traits,Allocator>::view"}, {"name": "std::basic_syncbuf<CharT,Traits,Allocator>::std::basic_syncbuf<CharT,Traits,Allocator>::basic_syncbuf", "type": "cpp", "path": "cpp\\io\\basic_syncbuf\\basic_syncbuf.html", "desc": "std::basic_syncbuf<CharT,Traits,Allocator>::std::basic_syncbuf<CharT,Traits,Allocator>::basic_syncbuf"}, {"name": "std::basic_syncbuf<CharT,Traits,Allocator>::std::basic_syncbuf<CharT,Traits,Allocator>::emit", "type": "cpp", "path": "cpp\\io\\basic_syncbuf\\emit.html", "desc": "std::basic_syncbuf<CharT,Traits,Allocator>::std::basic_syncbuf<CharT,Traits,Allocator>::emit"}, {"name": "std::basic_syncbuf<CharT,Traits,Allocator>::std::basic_syncbuf<CharT,Traits,Allocator>::get_allocator", "type": "cpp", "path": "cpp\\io\\basic_syncbuf\\get_allocator.html", "desc": "std::basic_syncbuf<CharT,Traits,Allocator>::std::basic_syncbuf<CharT,Traits,Allocator>::get_allocator"}, {"name": "std::basic_syncbuf<CharT,Traits,Allocator>::std::basic_syncbuf<CharT,Traits,Allocator>::get_wrapped", "type": "cpp", "path": "cpp\\io\\basic_syncbuf\\get_wrapped.html", "desc": "std::basic_syncbuf<CharT,Traits,Allocator>::std::basic_syncbuf<CharT,Traits,Allocator>::get_wrapped"}, {"name": "std::basic_syncbuf<CharT,Traits,Allocator>::std::basic_syncbuf<CharT,Traits,Allocator>::operator=", "type": "cpp", "path": "cpp\\io\\basic_syncbuf\\operator=.html", "desc": "std::basic_syncbuf<CharT,Traits,Allocator>::std::basic_syncbuf<CharT,Traits,Allocator>::operator="}, {"name": "std::basic_syncbuf<CharT,Traits,Allocator>::std::basic_syncbuf<CharT,Traits,Allocator>::set_emit_on_sync", "type": "cpp", "path": "cpp\\io\\basic_syncbuf\\set_emit_on_sync.html", "desc": "std::basic_syncbuf<CharT,Traits,Allocator>::std::basic_syncbuf<CharT,Traits,Allocator>::set_emit_on_sync"}, {"name": "std::basic_syncbuf<CharT,Traits,Allocator>::std::basic_syncbuf<CharT,Traits,Allocator>::swap", "type": "cpp", "path": "cpp\\io\\basic_syncbuf\\swap.html", "desc": "std::basic_syncbuf<CharT,Traits,Allocator>::std::basic_syncbuf<CharT,Traits,Allocator>::swap"}, {"name": "std::std::swap(std::basic_syncbuf)", "type": "cpp", "path": "cpp\\io\\basic_syncbuf\\swap2.html", "desc": "std::std::swap(std::basic_syncbuf)"}, {"name": "std::basic_syncbuf<CharT,Traits,Allocator>::std::basic_syncbuf<CharT,Traits,Allocator>::sync", "type": "cpp", "path": "cpp\\io\\basic_syncbuf\\sync.html", "desc": "std::basic_syncbuf<CharT,Traits,Allocator>::std::basic_syncbuf<CharT,Traits,Allocator>::sync"}, {"name": "std::basic_syncbuf<CharT,Traits,Allocator>::std::basic_syncbuf<CharT,Traits,Allocator>::~basic_syncbuf", "type": "cpp", "path": "cpp\\io\\basic_syncbuf\\~basic_syncbuf.html", "desc": "std::basic_syncbuf<CharT,Traits,Allocator>::std::basic_syncbuf<CharT,Traits,Allocator>::~basic_syncbuf"}, {"name": "std::std::clearerr", "type": "cpp", "path": "cpp\\io\\c\\clearerr.html", "desc": "std::std::clearerr"}, {"name": "std::std::fclose", "type": "cpp", "path": "cpp\\io\\c\\fclose.html", "desc": "std::std::fclose"}, {"name": "std::std::feof", "type": "cpp", "path": "cpp\\io\\c\\feof.html", "desc": "std::std::feof"}, {"name": "std::std::ferror", "type": "cpp", "path": "cpp\\io\\c\\ferror.html", "desc": "std::std::ferror"}, {"name": "std::std::fflush", "type": "cpp", "path": "cpp\\io\\c\\fflush.html", "desc": "std::std::fflush"}, {"name": "std:: std::std::fgetc, std::getc", "type": "cpp", "path": "cpp\\io\\c\\fgetc.html", "desc": "std:: std::std::fgetc, std::getc"}, {"name": "std::std::fgetpos", "type": "cpp", "path": "cpp\\io\\c\\fgetpos.html", "desc": "std::std::fgetpos"}, {"name": "std::std::fgets", "type": "cpp", "path": "cpp\\io\\c\\fgets.html", "desc": "std::std::fgets"}, {"name": "std::std::fgetwc", "type": "cpp", "path": "cpp\\io\\c\\fgetwc.html", "desc": "std::std::fgetwc"}, {"name": "std::std::fgetws", "type": "cpp", "path": "cpp\\io\\c\\fgetws.html", "desc": "std::std::fgetws"}, {"name": "std::std::FILE", "type": "cpp", "path": "cpp\\io\\c\\FILE.html", "desc": "std::std::FILE"}, {"name": "std::std::fopen", "type": "cpp", "path": "cpp\\io\\c\\fopen.html", "desc": "std::std::fopen"}, {"name": "std::std::fpos_t", "type": "cpp", "path": "cpp\\io\\c\\fpos_t.html", "desc": "std::std::fpos_t"}, {"name": "std:: std:: std:: std::std::printf, std::fprintf, std::sprintf, std::snprintf", "type": "cpp", "path": "cpp\\io\\c\\fprintf.html", "desc": "std:: std:: std:: std::std::printf, std::fprintf, std::sprintf, std::snprintf"}, {"name": "std:: std::std::fputc, std::putc", "type": "cpp", "path": "cpp\\io\\c\\fputc.html", "desc": "std:: std::std::fputc, std::putc"}, {"name": "std::std::fputs", "type": "cpp", "path": "cpp\\io\\c\\fputs.html", "desc": "std::std::fputs"}, {"name": "std::std::fputwc", "type": "cpp", "path": "cpp\\io\\c\\fputwc.html", "desc": "std::std::fputwc"}, {"name": "std::std::fputws", "type": "cpp", "path": "cpp\\io\\c\\fputws.html", "desc": "std::std::fputws"}, {"name": "std::std::fread", "type": "cpp", "path": "cpp\\io\\c\\fread.html", "desc": "std::std::fread"}, {"name": "std::std::freopen", "type": "cpp", "path": "cpp\\io\\c\\freopen.html", "desc": "std::std::freopen"}, {"name": "std:: std:: std::std::scanf, std::fscanf, std::sscanf", "type": "cpp", "path": "cpp\\io\\c\\fscanf.html", "desc": "std:: std:: std::std::scanf, std::fscanf, std::sscanf"}, {"name": "std::std::fseek", "type": "cpp", "path": "cpp\\io\\c\\fseek.html", "desc": "std::std::fseek"}, {"name": "std::std::fsetpos", "type": "cpp", "path": "cpp\\io\\c\\fsetpos.html", "desc": "std::std::fsetpos"}, {"name": "std::std::ftell", "type": "cpp", "path": "cpp\\io\\c\\ftell.html", "desc": "std::std::ftell"}, {"name": "std::std::fwide", "type": "cpp", "path": "cpp\\io\\c\\fwide.html", "desc": "std::std::fwide"}, {"name": "std:: std:: std::std::wprintf, std::fwprintf, std::swprintf", "type": "cpp", "path": "cpp\\io\\c\\fwprintf.html", "desc": "std:: std:: std::std::wprintf, std::fwprintf, std::swprintf"}, {"name": "std::std::fwrite", "type": "cpp", "path": "cpp\\io\\c\\fwrite.html", "desc": "std::std::fwrite"}, {"name": "std:: std:: std::std::wscanf, std::fwscanf, std::swscanf", "type": "cpp", "path": "cpp\\io\\c\\fwscanf.html", "desc": "std:: std:: std::std::wscanf, std::fwscanf, std::swscanf"}, {"name": "std::std::getchar", "type": "cpp", "path": "cpp\\io\\c\\getchar.html", "desc": "std::std::getchar"}, {"name": "std::std::gets", "type": "cpp", "path": "cpp\\io\\c\\gets.html", "desc": "std::std::gets"}, {"name": "std::std::getwchar", "type": "cpp", "path": "cpp\\io\\c\\getwchar.html", "desc": "std::std::getwchar"}, {"name": "std::std::perror", "type": "cpp", "path": "cpp\\io\\c\\perror.html", "desc": "std::std::perror"}, {"name": "std:: std:: std:: std::std::printf, std::fprintf, std::sprintf, std::snprintf", "type": "cpp", "path": "cpp\\io\\c\\printf.html", "desc": "std:: std:: std:: std::std::printf, std::fprintf, std::sprintf, std::snprintf"}, {"name": "std::std::putchar", "type": "cpp", "path": "cpp\\io\\c\\putchar.html", "desc": "std::std::putchar"}, {"name": "std::std::puts", "type": "cpp", "path": "cpp\\io\\c\\puts.html", "desc": "std::std::puts"}, {"name": "std::std::putwchar", "type": "cpp", "path": "cpp\\io\\c\\putwchar.html", "desc": "std::std::putwchar"}, {"name": "std::std::remove", "type": "cpp", "path": "cpp\\io\\c\\remove.html", "desc": "std::std::remove"}, {"name": "std::std::rename", "type": "cpp", "path": "cpp\\io\\c\\rename.html", "desc": "std::std::rename"}, {"name": "std::std::rewind", "type": "cpp", "path": "cpp\\io\\c\\rewind.html", "desc": "std::std::rewind"}, {"name": "std:: std:: std::std::scanf, std::fscanf, std::sscanf", "type": "cpp", "path": "cpp\\io\\c\\scanf.html", "desc": "std:: std:: std::std::scanf, std::fscanf, std::sscanf"}, {"name": "std::std::setbuf", "type": "cpp", "path": "cpp\\io\\c\\setbuf.html", "desc": "std::std::setbuf"}, {"name": "std::std::setvbuf", "type": "cpp", "path": "cpp\\io\\c\\setvbuf.html", "desc": "std::std::setvbuf"}, {"name": "stdin, stdout, stderr", "type": "cpp", "path": "cpp\\io\\c\\std_streams.html", "desc": "stdin, stdout, stderr"}, {"name": "std::std::tmpfile", "type": "cpp", "path": "cpp\\io\\c\\tmpfile.html", "desc": "std::std::tmpfile"}, {"name": "std::std::tmpnam", "type": "cpp", "path": "cpp\\io\\c\\tmpnam.html", "desc": "std::std::tmpnam"}, {"name": "std::std::ungetc", "type": "cpp", "path": "cpp\\io\\c\\ungetc.html", "desc": "std::std::ungetc"}, {"name": "std::std::ungetwc", "type": "cpp", "path": "cpp\\io\\c\\ungetwc.html", "desc": "std::std::ungetwc"}, {"name": "std:: std:: std:: std::std::vprintf, std::vfprintf, std::vsprintf, std::vsnprintf", "type": "cpp", "path": "cpp\\io\\c\\vfprintf.html", "desc": "std:: std:: std:: std::std::vprintf, std::vfprintf, std::vsprintf, std::vsnprintf"}, {"name": "std:: std:: std::std::vscanf, std::vfscanf, std::vsscanf", "type": "cpp", "path": "cpp\\io\\c\\vfscanf.html", "desc": "std:: std:: std::std::vscanf, std::vfscanf, std::vsscanf"}, {"name": "std:: std:: std::std::vwprintf, std::vfwprintf, std::vswprintf", "type": "cpp", "path": "cpp\\io\\c\\vfwprintf.html", "desc": "std:: std:: std::std::vwprintf, std::vfwprintf, std::vswprintf"}, {"name": "std:: std:: std::std::vwscanf, std::vfwscanf, std::vswscanf", "type": "cpp", "path": "cpp\\io\\c\\vfwscanf.html", "desc": "std:: std:: std::std::vwscanf, std::vfwscanf, std::vswscanf"}, {"name": "std::fpos<State>::std::fpos<State>::state", "type": "cpp", "path": "cpp\\io\\fpos\\state.html", "desc": "std::fpos<State>::std::fpos<State>::state"}, {"name": "std::ios_base::std::ios_base::event", "type": "cpp", "path": "cpp\\io\\ios_base\\event.html", "desc": "std::ios_base::std::ios_base::event"}, {"name": "std::ios_base::std::ios_base::event_callback", "type": "cpp", "path": "cpp\\io\\ios_base\\event_callback.html", "desc": "std::ios_base::std::ios_base::event_callback"}, {"name": "std::ios_base::std::ios_base::failure", "type": "cpp", "path": "cpp\\io\\ios_base\\failure.html", "desc": "std::ios_base::std::ios_base::failure"}, {"name": "std::ios_base::std::ios_base::flags", "type": "cpp", "path": "cpp\\io\\ios_base\\flags.html", "desc": "std::ios_base::std::ios_base::flags"}, {"name": "std::ios_base::std::ios_base::fmtflags", "type": "cpp", "path": "cpp\\io\\ios_base\\fmtflags.html", "desc": "std::ios_base::std::ios_base::fmtflags"}, {"name": "std::ios_base::std::ios_base::getloc", "type": "cpp", "path": "cpp\\io\\ios_base\\getloc.html", "desc": "std::ios_base::std::ios_base::getloc"}, {"name": "std::ios_base::std::ios_base::imbue", "type": "cpp", "path": "cpp\\io\\ios_base\\imbue.html", "desc": "std::ios_base::std::ios_base::imbue"}, {"name": "std::ios_base::std::ios_base::Init", "type": "cpp", "path": "cpp\\io\\ios_base\\Init.html", "desc": "std::ios_base::std::ios_base::Init"}, {"name": "std::ios_base::std::ios_base::iostate", "type": "cpp", "path": "cpp\\io\\ios_base\\iostate.html", "desc": "std::ios_base::std::ios_base::iostate"}, {"name": "std::ios_base::std::ios_base::ios_base", "type": "cpp", "path": "cpp\\io\\ios_base\\ios_base.html", "desc": "std::ios_base::std::ios_base::ios_base"}, {"name": "std::ios_base::std::ios_base::iword", "type": "cpp", "path": "cpp\\io\\ios_base\\iword.html", "desc": "std::ios_base::std::ios_base::iword"}, {"name": "std::ios_base::std::ios_base::openmode", "type": "cpp", "path": "cpp\\io\\ios_base\\openmode.html", "desc": "std::ios_base::std::ios_base::openmode"}, {"name": "std::ios_base::std::ios_base::operator=", "type": "cpp", "path": "cpp\\io\\ios_base\\operator=.html", "desc": "std::ios_base::std::ios_base::operator="}, {"name": "std::ios_base::std::ios_base::precision", "type": "cpp", "path": "cpp\\io\\ios_base\\precision.html", "desc": "std::ios_base::std::ios_base::precision"}, {"name": "std::ios_base::std::ios_base::pword", "type": "cpp", "path": "cpp\\io\\ios_base\\pword.html", "desc": "std::ios_base::std::ios_base::pword"}, {"name": "std::ios_base::std::ios_base::register_callback", "type": "cpp", "path": "cpp\\io\\ios_base\\register_callback.html", "desc": "std::ios_base::std::ios_base::register_callback"}, {"name": "std::ios_base::std::ios_base::seekdir", "type": "cpp", "path": "cpp\\io\\ios_base\\seekdir.html", "desc": "std::ios_base::std::ios_base::seekdir"}, {"name": "std::ios_base::std::ios_base::setf", "type": "cpp", "path": "cpp\\io\\ios_base\\setf.html", "desc": "std::ios_base::std::ios_base::setf"}, {"name": "std::ios_base::std::ios_base::sync_with_stdio", "type": "cpp", "path": "cpp\\io\\ios_base\\sync_with_stdio.html", "desc": "std::ios_base::std::ios_base::sync_with_stdio"}, {"name": "std::ios_base::std::ios_base::unsetf", "type": "cpp", "path": "cpp\\io\\ios_base\\unsetf.html", "desc": "std::ios_base::std::ios_base::unsetf"}, {"name": "std::ios_base::std::ios_base::width", "type": "cpp", "path": "cpp\\io\\ios_base\\width.html", "desc": "std::ios_base::std::ios_base::width"}, {"name": "std::ios_base::std::ios_base::xalloc", "type": "cpp", "path": "cpp\\io\\ios_base\\xalloc.html", "desc": "std::ios_base::std::ios_base::xalloc"}, {"name": "std::ios_base::std::ios_base::~ios_base", "type": "cpp", "path": "cpp\\io\\ios_base\\~ios_base.html", "desc": "std::ios_base::std::ios_base::~ios_base"}, {"name": "std::std::is_error_code_enum<std::io_errc>", "type": "cpp", "path": "cpp\\io\\io_errc\\is_error_code_enum.html", "desc": "std::std::is_error_code_enum<std::io_errc>"}, {"name": "std:: (std::io_errc)std::make_error_code(std::io_errc)", "type": "cpp", "path": "cpp\\io\\io_errc\\make_error_code.html", "desc": "std:: (std::io_errc)std::make_error_code(std::io_errc)"}, {"name": "std:: (std::io_errc)std::make_error_condition(std::io_errc)", "type": "cpp", "path": "cpp\\io\\io_errc\\make_error_condition.html", "desc": "std:: (std::io_errc)std::make_error_condition(std::io_errc)"}, {"name": "std::istrstream::std::istrstream::istrstream", "type": "cpp", "path": "cpp\\io\\istrstream\\istrstream.html", "desc": "std::istrstream::std::istrstream::istrstream"}, {"name": "std::istrstream::std::istrstream::rdbuf", "type": "cpp", "path": "cpp\\io\\istrstream\\rdbuf.html", "desc": "std::istrstream::std::istrstream::rdbuf"}, {"name": "std::istrstream::std::istrstream::str", "type": "cpp", "path": "cpp\\io\\istrstream\\str.html", "desc": "std::istrstream::std::istrstream::str"}, {"name": "std::istrstream::std::istrstream::~istrstream", "type": "cpp", "path": "cpp\\io\\istrstream\\~istrstream.html", "desc": "std::istrstream::std::istrstream::~istrstream"}, {"name": "std:: std::std::boolalpha, std::noboolalpha", "type": "cpp", "path": "cpp\\io\\manip\\boolalpha.html", "desc": "std:: std::std::boolalpha, std::noboolalpha"}, {"name": "std:: std::std::emit_on_flush, std::noemit_on_flush", "type": "cpp", "path": "cpp\\io\\manip\\emit_on_flush.html", "desc": "std:: std::std::emit_on_flush, std::noemit_on_flush"}, {"name": "std::std::endl", "type": "cpp", "path": "cpp\\io\\manip\\endl.html", "desc": "std::std::endl"}, {"name": "std::std::ends", "type": "cpp", "path": "cpp\\io\\manip\\ends.html", "desc": "std::std::ends"}, {"name": "std:: std:: std:: std::std::fixed, std::scientific, std::hexfloat, std::defaultfloat", "type": "cpp", "path": "cpp\\io\\manip\\fixed.html", "desc": "std:: std:: std:: std::std::fixed, std::scientific, std::hexfloat, std::defaultfloat"}, {"name": "std::std::flush", "type": "cpp", "path": "cpp\\io\\manip\\flush.html", "desc": "std::std::flush"}, {"name": "std::std::flush_emit", "type": "cpp", "path": "cpp\\io\\manip\\flush_emit.html", "desc": "std::std::flush_emit"}, {"name": "std::std::get_money", "type": "cpp", "path": "cpp\\io\\manip\\get_money.html", "desc": "std::std::get_money"}, {"name": "std::std::get_time", "type": "cpp", "path": "cpp\\io\\manip\\get_time.html", "desc": "std::std::get_time"}, {"name": "std:: std:: std::std::dec, std::hex, std::oct", "type": "cpp", "path": "cpp\\io\\manip\\hex.html", "desc": "std:: std:: std::std::dec, std::hex, std::oct"}, {"name": "std:: std:: std::std::left, std::right, std::internal", "type": "cpp", "path": "cpp\\io\\manip\\left.html", "desc": "std:: std:: std::std::left, std::right, std::internal"}, {"name": "std::std::put_money", "type": "cpp", "path": "cpp\\io\\manip\\put_money.html", "desc": "std::std::put_money"}, {"name": "std::std::put_time", "type": "cpp", "path": "cpp\\io\\manip\\put_time.html", "desc": "std::std::put_time"}, {"name": "std::std::quoted", "type": "cpp", "path": "cpp\\io\\manip\\quoted.html", "desc": "std::std::quoted"}, {"name": "std::std::resetiosflags", "type": "cpp", "path": "cpp\\io\\manip\\resetiosflags.html", "desc": "std::std::resetiosflags"}, {"name": "std::std::setbase", "type": "cpp", "path": "cpp\\io\\manip\\setbase.html", "desc": "std::std::setbase"}, {"name": "std::std::setfill", "type": "cpp", "path": "cpp\\io\\manip\\setfill.html", "desc": "std::std::setfill"}, {"name": "std::std::setiosflags", "type": "cpp", "path": "cpp\\io\\manip\\setiosflags.html", "desc": "std::std::setiosflags"}, {"name": "std::std::setprecision", "type": "cpp", "path": "cpp\\io\\manip\\setprecision.html", "desc": "std::std::setprecision"}, {"name": "std::std::setw", "type": "cpp", "path": "cpp\\io\\manip\\setw.html", "desc": "std::std::setw"}, {"name": "std:: std::std::showbase, std::noshowbase", "type": "cpp", "path": "cpp\\io\\manip\\showbase.html", "desc": "std:: std::std::showbase, std::noshowbase"}, {"name": "std:: std::std::showpoint, std::noshowpoint", "type": "cpp", "path": "cpp\\io\\manip\\showpoint.html", "desc": "std:: std::std::showpoint, std::noshowpoint"}, {"name": "std:: std::std::showpos, std::noshowpos", "type": "cpp", "path": "cpp\\io\\manip\\showpos.html", "desc": "std:: std::std::showpos, std::noshowpos"}, {"name": "std:: std::std::skipws, std::noskipws", "type": "cpp", "path": "cpp\\io\\manip\\skipws.html", "desc": "std:: std::std::skipws, std::noskipws"}, {"name": "std:: std::std::unitbuf, std::nounitbuf", "type": "cpp", "path": "cpp\\io\\manip\\unitbuf.html", "desc": "std:: std::std::unitbuf, std::nounitbuf"}, {"name": "std:: std::std::uppercase, std::nouppercase", "type": "cpp", "path": "cpp\\io\\manip\\uppercase.html", "desc": "std:: std::std::uppercase, std::nouppercase"}, {"name": "std::std::ws", "type": "cpp", "path": "cpp\\io\\manip\\ws.html", "desc": "std::std::ws"}, {"name": "std::ostrstream::std::ostrstream::freeze", "type": "cpp", "path": "cpp\\io\\ostrstream\\freeze.html", "desc": "std::ostrstream::std::ostrstream::freeze"}, {"name": "std::ostrstream::std::ostrstream::ostrstream", "type": "cpp", "path": "cpp\\io\\ostrstream\\ostrstream.html", "desc": "std::ostrstream::std::ostrstream::ostrstream"}, {"name": "std::ostrstream::std::ostrstream::pcount", "type": "cpp", "path": "cpp\\io\\ostrstream\\pcount.html", "desc": "std::ostrstream::std::ostrstream::pcount"}, {"name": "std::ostrstream::std::ostrstream::rdbuf", "type": "cpp", "path": "cpp\\io\\ostrstream\\rdbuf.html", "desc": "std::ostrstream::std::ostrstream::rdbuf"}, {"name": "std::ostrstream::std::ostrstream::str", "type": "cpp", "path": "cpp\\io\\ostrstream\\str.html", "desc": "std::ostrstream::std::ostrstream::str"}, {"name": "std::ostrstream::std::ostrstream::~ostrstream", "type": "cpp", "path": "cpp\\io\\ostrstream\\~ostrstream.html", "desc": "std::ostrstream::std::ostrstream::~ostrstream"}, {"name": "std::strstream::std::strstream::freeze", "type": "cpp", "path": "cpp\\io\\strstream\\freeze.html", "desc": "std::strstream::std::strstream::freeze"}, {"name": "std::strstream::std::strstream::pcount", "type": "cpp", "path": "cpp\\io\\strstream\\pcount.html", "desc": "std::strstream::std::strstream::pcount"}, {"name": "std::strstream::std::strstream::rdbuf", "type": "cpp", "path": "cpp\\io\\strstream\\rdbuf.html", "desc": "std::strstream::std::strstream::rdbuf"}, {"name": "std::strstream::std::strstream::str", "type": "cpp", "path": "cpp\\io\\strstream\\str.html", "desc": "std::strstream::std::strstream::str"}, {"name": "std::strstream::std::strstream::strstream", "type": "cpp", "path": "cpp\\io\\strstream\\strstream.html", "desc": "std::strstream::std::strstream::strstream"}, {"name": "std::strstream::std::strstream::~strstream", "type": "cpp", "path": "cpp\\io\\strstream\\~strstream.html", "desc": "std::strstream::std::strstream::~strstream"}, {"name": "std::strstreambuf::std::strstreambuf::freeze", "type": "cpp", "path": "cpp\\io\\strstreambuf\\freeze.html", "desc": "std::strstreambuf::std::strstreambuf::freeze"}, {"name": "std::strstreambuf::std::strstreambuf::overflow", "type": "cpp", "path": "cpp\\io\\strstreambuf\\overflow.html", "desc": "std::strstreambuf::std::strstreambuf::overflow"}, {"name": "std::strstreambuf::std::strstreambuf::pbackfail", "type": "cpp", "path": "cpp\\io\\strstreambuf\\pbackfail.html", "desc": "std::strstreambuf::std::strstreambuf::pbackfail"}, {"name": "std::strstreambuf::std::strstreambuf::pcount", "type": "cpp", "path": "cpp\\io\\strstreambuf\\pcount.html", "desc": "std::strstreambuf::std::strstreambuf::pcount"}, {"name": "std::strstreambuf::std::strstreambuf::seekoff", "type": "cpp", "path": "cpp\\io\\strstreambuf\\seekoff.html", "desc": "std::strstreambuf::std::strstreambuf::seekoff"}, {"name": "std::strstreambuf::std::strstreambuf::seekpos", "type": "cpp", "path": "cpp\\io\\strstreambuf\\seekpos.html", "desc": "std::strstreambuf::std::strstreambuf::seekpos"}, {"name": "std::strstreambuf::std::strstreambuf::setbuf", "type": "cpp", "path": "cpp\\io\\strstreambuf\\setbuf.html", "desc": "std::strstreambuf::std::strstreambuf::setbuf"}, {"name": "std::strstreambuf::std::strstreambuf::str", "type": "cpp", "path": "cpp\\io\\strstreambuf\\str.html", "desc": "std::strstreambuf::std::strstreambuf::str"}, {"name": "std::strstreambuf::std::strstreambuf::strstreambuf", "type": "cpp", "path": "cpp\\io\\strstreambuf\\strstreambuf.html", "desc": "std::strstreambuf::std::strstreambuf::strstreambuf"}, {"name": "std::strstreambuf::std::strstreambuf::underflow", "type": "cpp", "path": "cpp\\io\\strstreambuf\\underflow.html", "desc": "std::strstreambuf::std::strstreambuf::underflow"}, {"name": "std::strstreambuf::std::strstreambuf::~strstreambuf", "type": "cpp", "path": "cpp\\io\\strstreambuf\\~strstreambuf.html", "desc": "std::strstreambuf::std::strstreambuf::~strstreambuf"}, {"name": "std::std::advance", "type": "cpp", "path": "cpp\\iterator\\advance.html", "desc": "std::std::advance"}, {"name": "std::std::back_inserter", "type": "cpp", "path": "cpp\\iterator\\back_inserter.html", "desc": "std::std::back_inserter"}, {"name": "std::std::back_insert_iterator", "type": "cpp", "path": "cpp\\iterator\\back_insert_iterator.html", "desc": "std::std::back_insert_iterator"}, {"name": "std::std::basic_const_iterator", "type": "cpp", "path": "cpp\\iterator\\basic_const_iterator.html", "desc": "std::std::basic_const_iterator"}, {"name": "std:: std::std::begin, std::cbegin", "type": "cpp", "path": "cpp\\iterator\\begin.html", "desc": "std:: std::std::begin, std::cbegin"}, {"name": "std::std::bidirectional_iterator", "type": "cpp", "path": "cpp\\iterator\\bidirectional_iterator.html", "desc": "std::std::bidirectional_iterator"}, {"name": "std::std::common_iterator", "type": "cpp", "path": "cpp\\iterator\\common_iterator.html", "desc": "std::std::common_iterator"}, {"name": "std::std::contiguous_iterator", "type": "cpp", "path": "cpp\\iterator\\contiguous_iterator.html", "desc": "std::std::contiguous_iterator"}, {"name": "std::std::counted_iterator", "type": "cpp", "path": "cpp\\iterator\\counted_iterator.html", "desc": "std::std::counted_iterator"}, {"name": "std::std::data", "type": "cpp", "path": "cpp\\iterator\\data.html", "desc": "std::std::data"}, {"name": "std:: std::std::default_sentinel_t, std::default_sentinel", "type": "cpp", "path": "cpp\\iterator\\default_sentinel_t.html", "desc": "std:: std::std::default_sentinel_t, std::default_sentinel"}, {"name": "std::std::distance", "type": "cpp", "path": "cpp\\iterator\\distance.html", "desc": "std::std::distance"}, {"name": "std::std::empty", "type": "cpp", "path": "cpp\\iterator\\empty.html", "desc": "std::std::empty"}, {"name": "std:: std::std::end, std::cend", "type": "cpp", "path": "cpp\\iterator\\end.html", "desc": "std:: std::std::end, std::cend"}, {"name": "std::std::forward_iterator", "type": "cpp", "path": "cpp\\iterator\\forward_iterator.html", "desc": "std::std::forward_iterator"}, {"name": "std::std::front_inserter", "type": "cpp", "path": "cpp\\iterator\\front_inserter.html", "desc": "std::std::front_inserter"}, {"name": "std::std::front_insert_iterator", "type": "cpp", "path": "cpp\\iterator\\front_insert_iterator.html", "desc": "std::std::front_insert_iterator"}, {"name": "std::std::incrementable", "type": "cpp", "path": "cpp\\iterator\\incrementable.html", "desc": "std::std::incrementable"}, {"name": "std::std::incrementable_traits", "type": "cpp", "path": "cpp\\iterator\\incrementable_traits.html", "desc": "std::std::incrementable_traits"}, {"name": "std::std::indirectly_comparable", "type": "cpp", "path": "cpp\\iterator\\indirectly_comparable.html", "desc": "std::std::indirectly_comparable"}, {"name": "std::std::indirectly_copyable", "type": "cpp", "path": "cpp\\iterator\\indirectly_copyable.html", "desc": "std::std::indirectly_copyable"}, {"name": "std::std::indirectly_copyable_storable", "type": "cpp", "path": "cpp\\iterator\\indirectly_copyable_storable.html", "desc": "std::std::indirectly_copyable_storable"}, {"name": "std::std::indirectly_movable", "type": "cpp", "path": "cpp\\iterator\\indirectly_movable.html", "desc": "std::std::indirectly_movable"}, {"name": "std::std::indirectly_movable_storable", "type": "cpp", "path": "cpp\\iterator\\indirectly_movable_storable.html", "desc": "std::std::indirectly_movable_storable"}, {"name": "std::std::indirectly_readable", "type": "cpp", "path": "cpp\\iterator\\indirectly_readable.html", "desc": "std::std::indirectly_readable"}, {"name": "std::std::indirectly_readable_traits", "type": "cpp", "path": "cpp\\iterator\\indirectly_readable_traits.html", "desc": "std::std::indirectly_readable_traits"}, {"name": "std::std::indirectly_swappable", "type": "cpp", "path": "cpp\\iterator\\indirectly_swappable.html", "desc": "std::std::indirectly_swappable"}, {"name": "std:: std::std::indirect_unary_invocable, std::indirectly_regular_unary_invocable", "type": "cpp", "path": "cpp\\iterator\\indirectly_unary_invocable.html", "desc": "std:: std::std::indirect_unary_invocable, std::indirectly_regular_unary_invocable"}, {"name": "std::std::indirectly_writable", "type": "cpp", "path": "cpp\\iterator\\indirectly_writable.html", "desc": "std::std::indirectly_writable"}, {"name": "std::std::indirect_binary_predicate", "type": "cpp", "path": "cpp\\iterator\\indirect_binary_predicate.html", "desc": "std::std::indirect_binary_predicate"}, {"name": "std::std::indirect_equivalence_relation", "type": "cpp", "path": "cpp\\iterator\\indirect_equivalence_relation.html", "desc": "std::std::indirect_equivalence_relation"}, {"name": "std::std::indirect_result_t", "type": "cpp", "path": "cpp\\iterator\\indirect_result_t.html", "desc": "std::std::indirect_result_t"}, {"name": "std::std::indirect_strict_weak_order", "type": "cpp", "path": "cpp\\iterator\\indirect_strict_weak_order.html", "desc": "std::std::indirect_strict_weak_order"}, {"name": "std::std::indirect_unary_predicate", "type": "cpp", "path": "cpp\\iterator\\indirect_unary_predicate.html", "desc": "std::std::indirect_unary_predicate"}, {"name": "std::std::input_iterator", "type": "cpp", "path": "cpp\\iterator\\input_iterator.html", "desc": "std::std::input_iterator"}, {"name": "std::std::input_or_output_iterator", "type": "cpp", "path": "cpp\\iterator\\input_or_output_iterator.html", "desc": "std::std::input_or_output_iterator"}, {"name": "std::std::inserter", "type": "cpp", "path": "cpp\\iterator\\inserter.html", "desc": "std::std::inserter"}, {"name": "std::std::insert_iterator", "type": "cpp", "path": "cpp\\iterator\\insert_iterator.html", "desc": "std::std::insert_iterator"}, {"name": "std::std::istreambuf_iterator", "type": "cpp", "path": "cpp\\iterator\\istreambuf_iterator.html", "desc": "std::std::istreambuf_iterator"}, {"name": "std::std::istream_iterator", "type": "cpp", "path": "cpp\\iterator\\istream_iterator.html", "desc": "std::std::istream_iterator"}, {"name": "std::std::iterator", "type": "cpp", "path": "cpp\\iterator\\iterator.html", "desc": "std::std::iterator"}, {"name": "std:: std:: std:: std:: std:: std::std::input_iterator_tag, std::output_iterator_tag, std::forward_iterator_tag, std::bidirectional_iterator_tag, std::random_access_iterator_tag, std::contiguous_iterator_tag", "type": "cpp", "path": "cpp\\iterator\\iterator_tags.html", "desc": "std:: std:: std:: std:: std:: std::std::input_iterator_tag, std::output_iterator_tag, std::forward_iterator_tag, std::bidirectional_iterator_tag, std::random_access_iterator_tag, std::contiguous_iterator_tag"}, {"name": "std::std::iterator_traits", "type": "cpp", "path": "cpp\\iterator\\iterator_traits.html", "desc": "std::std::iterator_traits"}, {"name": "std:: std:: std:: std:: std::std::iter_value_t, std::iter_reference_t, std::iter_difference_t, std::iter_rvalue_reference_t, std::iter_common_reference_t", "type": "cpp", "path": "cpp\\iterator\\iter_t.html", "desc": "std:: std:: std:: std:: std::std::iter_value_t, std::iter_reference_t, std::iter_difference_t, std::iter_rvalue_reference_t, std::iter_common_reference_t"}, {"name": "std::std::make_move_iterator", "type": "cpp", "path": "cpp\\iterator\\make_move_iterator.html", "desc": "std::std::make_move_iterator"}, {"name": "std::std::make_reverse_iterator", "type": "cpp", "path": "cpp\\iterator\\make_reverse_iterator.html", "desc": "std::std::make_reverse_iterator"}, {"name": "std::std::mergeable", "type": "cpp", "path": "cpp\\iterator\\mergeable.html", "desc": "std::std::mergeable"}, {"name": "std::std::move_iterator", "type": "cpp", "path": "cpp\\iterator\\move_iterator.html", "desc": "std::std::move_iterator"}, {"name": "std::std::move_sentinel", "type": "cpp", "path": "cpp\\iterator\\move_sentinel.html", "desc": "std::std::move_sentinel"}, {"name": "std::std::next", "type": "cpp", "path": "cpp\\iterator\\next.html", "desc": "std::std::next"}, {"name": "std::std::ostreambuf_iterator", "type": "cpp", "path": "cpp\\iterator\\ostreambuf_iterator.html", "desc": "std::std::ostreambuf_iterator"}, {"name": "std::std::ostream_iterator", "type": "cpp", "path": "cpp\\iterator\\ostream_iterator.html", "desc": "std::std::ostream_iterator"}, {"name": "std::std::output_iterator", "type": "cpp", "path": "cpp\\iterator\\output_iterator.html", "desc": "std::std::output_iterator"}, {"name": "std::std::permutable", "type": "cpp", "path": "cpp\\iterator\\permutable.html", "desc": "std::std::permutable"}, {"name": "std::std::prev", "type": "cpp", "path": "cpp\\iterator\\prev.html", "desc": "std::std::prev"}, {"name": "std::std::projected", "type": "cpp", "path": "cpp\\iterator\\projected.html", "desc": "std::std::projected"}, {"name": "std::std::random_access_iterator", "type": "cpp", "path": "cpp\\iterator\\random_access_iterator.html", "desc": "std::std::random_access_iterator"}, {"name": "std:: std::std::rbegin, std::crbegin", "type": "cpp", "path": "cpp\\iterator\\rbegin.html", "desc": "std:: std::std::rbegin, std::crbegin"}, {"name": "std:: std::std::rend, std::crend", "type": "cpp", "path": "cpp\\iterator\\rend.html", "desc": "std:: std::std::rend, std::crend"}, {"name": "std::std::reverse_iterator", "type": "cpp", "path": "cpp\\iterator\\reverse_iterator.html", "desc": "std::std::reverse_iterator"}, {"name": "std::std::sentinel_for", "type": "cpp", "path": "cpp\\iterator\\sentinel_for.html", "desc": "std::std::sentinel_for"}, {"name": "std:: std::std::size, std::ssize", "type": "cpp", "path": "cpp\\iterator\\size.html", "desc": "std:: std::std::size, std::ssize"}, {"name": "std:: std::std::sized_sentinel_for, std::disable_sized_sentinel_for", "type": "cpp", "path": "cpp\\iterator\\sized_sentinel_for.html", "desc": "std:: std::std::sized_sentinel_for, std::disable_sized_sentinel_for"}, {"name": "std::std::sortable", "type": "cpp", "path": "cpp\\iterator\\sortable.html", "desc": "std::std::sortable"}, {"name": "std:: std::std::unreachable_sentinel_t, std::unreachable_sentinel", "type": "cpp", "path": "cpp\\iterator\\unreachable_sentinel_t.html", "desc": "std:: std::std::unreachable_sentinel_t, std::unreachable_sentinel"}, {"name": "std::std::weakly_incrementable", "type": "cpp", "path": "cpp\\iterator\\weakly_incrementable.html", "desc": "std::std::weakly_incrementable"}, {"name": "std::back_insert_iterator<Container>::std::back_insert_iterator<Container>::back_insert_iterator", "type": "cpp", "path": "cpp\\iterator\\back_insert_iterator\\back_insert_iterator.html", "desc": "std::back_insert_iterator<Container>::std::back_insert_iterator<Container>::back_insert_iterator"}, {"name": "std::back_insert_iterator<Container>::std::back_insert_iterator<Container>::operator*", "type": "cpp", "path": "cpp\\iterator\\back_insert_iterator\\operator%2A.html", "desc": "std::back_insert_iterator<Container>::std::back_insert_iterator<Container>::operator*"}, {"name": "std::back_insert_iterator<Container>::std::back_insert_iterator<Container>::operator++", "type": "cpp", "path": "cpp\\iterator\\back_insert_iterator\\operator++.html", "desc": "std::back_insert_iterator<Container>::std::back_insert_iterator<Container>::operator++"}, {"name": "std::back_insert_iterator<Container>::std::back_insert_iterator<Container>::operator=", "type": "cpp", "path": "cpp\\iterator\\back_insert_iterator\\operator=.html", "desc": "std::back_insert_iterator<Container>::std::back_insert_iterator<Container>::operator="}, {"name": "std::common_iterator<I,S>::std::common_iterator<I,S>::common_iterator", "type": "cpp", "path": "cpp\\iterator\\common_iterator\\common_iterator.html", "desc": "std::common_iterator<I,S>::std::common_iterator<I,S>::common_iterator"}, {"name": "std::std::incrementable_traits<std::common_iterator>", "type": "cpp", "path": "cpp\\iterator\\common_iterator\\incrementable_traits.html", "desc": "std::std::incrementable_traits<std::common_iterator>"}, {"name": "std::std::iterator_traits<std::common_iterator>", "type": "cpp", "path": "cpp\\iterator\\common_iterator\\iterator_traits.html", "desc": "std::std::iterator_traits<std::common_iterator>"}, {"name": "std::std::iter_move(std::common_iterator)", "type": "cpp", "path": "cpp\\iterator\\common_iterator\\iter_move.html", "desc": "std::std::iter_move(std::common_iterator)"}, {"name": "std::std::iter_swap(std::common_iterator)", "type": "cpp", "path": "cpp\\iterator\\common_iterator\\iter_swap.html", "desc": "std::std::iter_swap(std::common_iterator)"}, {"name": "std::common_iterator<I,S>::std::common_iterator<I,S>::operator*,->", "type": "cpp", "path": "cpp\\iterator\\common_iterator\\operator%2A.html", "desc": "std::common_iterator<I,S>::std::common_iterator<I,S>::operator*,->"}, {"name": "operator-(std::common_iterator)", "type": "cpp", "path": "cpp\\iterator\\common_iterator\\operator-.html", "desc": "operator-(std::common_iterator)"}, {"name": "std::common_iterator<I,S>::std::common_iterator<I,S>::operator=", "type": "cpp", "path": "cpp\\iterator\\common_iterator\\operator=.html", "desc": "std::common_iterator<I,S>::std::common_iterator<I,S>::operator="}, {"name": "std::common_iterator<I,S>::std::common_iterator<I,S>::operator++", "type": "cpp", "path": "cpp\\iterator\\common_iterator\\operator_arith.html", "desc": "std::common_iterator<I,S>::std::common_iterator<I,S>::operator++"}, {"name": "operator==(std::common_iterator)", "type": "cpp", "path": "cpp\\iterator\\common_iterator\\operator_cmp.html", "desc": "operator==(std::common_iterator)"}, {"name": "std::counted_iterator<I>::std::counted_iterator<I>::base", "type": "cpp", "path": "cpp\\iterator\\counted_iterator\\base.html", "desc": "std::counted_iterator<I>::std::counted_iterator<I>::base"}, {"name": "std::counted_iterator<I>::std::counted_iterator<I>::count", "type": "cpp", "path": "cpp\\iterator\\counted_iterator\\count.html", "desc": "std::counted_iterator<I>::std::counted_iterator<I>::count"}, {"name": "std::counted_iterator<I>::std::counted_iterator<I>::counted_iterator", "type": "cpp", "path": "cpp\\iterator\\counted_iterator\\counted_iterator.html", "desc": "std::counted_iterator<I>::std::counted_iterator<I>::counted_iterator"}, {"name": "std::std::iterator_traits<std::counted_iterator>", "type": "cpp", "path": "cpp\\iterator\\counted_iterator\\iterator_traits.html", "desc": "std::std::iterator_traits<std::counted_iterator>"}, {"name": "std::std::iter_move(std::counted_iterator)", "type": "cpp", "path": "cpp\\iterator\\counted_iterator\\iter_move.html", "desc": "std::std::iter_move(std::counted_iterator)"}, {"name": "std::std::iter_swap(std::counted_iterator)", "type": "cpp", "path": "cpp\\iterator\\counted_iterator\\iter_swap.html", "desc": "std::std::iter_swap(std::counted_iterator)"}, {"name": "std::counted_iterator<I>::std::counted_iterator<I>::operator*,->", "type": "cpp", "path": "cpp\\iterator\\counted_iterator\\operator%2A.html", "desc": "std::counted_iterator<I>::std::counted_iterator<I>::operator*,->"}, {"name": "operator+(std::counted_iterator)", "type": "cpp", "path": "cpp\\iterator\\counted_iterator\\operator+.html", "desc": "operator+(std::counted_iterator)"}, {"name": "operator-(std::counted_iterator)", "type": "cpp", "path": "cpp\\iterator\\counted_iterator\\operator-.html", "desc": "operator-(std::counted_iterator)"}, {"name": "operator-(std::counted_iterator<I>, std::default_sentinel_t)", "type": "cpp", "path": "cpp\\iterator\\counted_iterator\\operator-2.html", "desc": "operator-(std::counted_iterator<I>, std::default_sentinel_t)"}, {"name": "std::counted_iterator<I>::std::counted_iterator<I>::operator=", "type": "cpp", "path": "cpp\\iterator\\counted_iterator\\operator=.html", "desc": "std::counted_iterator<I>::std::counted_iterator<I>::operator="}, {"name": "std::counted_iterator<I>::std::counted_iterator<I>::operator++,+,+=,--,-,-=", "type": "cpp", "path": "cpp\\iterator\\counted_iterator\\operator_arith.html", "desc": "std::counted_iterator<I>::std::counted_iterator<I>::operator++,+,+=,--,-,-="}, {"name": "std::counted_iterator<I>::std::counted_iterator<I>::operator[]", "type": "cpp", "path": "cpp\\iterator\\counted_iterator\\operator_at.html", "desc": "std::counted_iterator<I>::std::counted_iterator<I>::operator[]"}, {"name": "operator==,<=>(std::counted_iterator)", "type": "cpp", "path": "cpp\\iterator\\counted_iterator\\operator_cmp.html", "desc": "operator==,<=>(std::counted_iterator)"}, {"name": "operator==(std::counted_iterator<I>, std::default_sentinel_t)", "type": "cpp", "path": "cpp\\iterator\\counted_iterator\\operator_cmp2.html", "desc": "operator==(std::counted_iterator<I>, std::default_sentinel_t)"}, {"name": "std::front_insert_iterator<Container>::std::front_insert_iterator<Container>::front_insert_iterator", "type": "cpp", "path": "cpp\\iterator\\front_insert_iterator\\front_insert_iterator.html", "desc": "std::front_insert_iterator<Container>::std::front_insert_iterator<Container>::front_insert_iterator"}, {"name": "std::front_insert_iterator<Container>::std::front_insert_iterator<Container>::operator*", "type": "cpp", "path": "cpp\\iterator\\front_insert_iterator\\operator%2A.html", "desc": "std::front_insert_iterator<Container>::std::front_insert_iterator<Container>::operator*"}, {"name": "std::front_insert_iterator<Container>::std::front_insert_iterator<Container>::operator++", "type": "cpp", "path": "cpp\\iterator\\front_insert_iterator\\operator++.html", "desc": "std::front_insert_iterator<Container>::std::front_insert_iterator<Container>::operator++"}, {"name": "std::front_insert_iterator<Container>::std::front_insert_iterator<Container>::operator=", "type": "cpp", "path": "cpp\\iterator\\front_insert_iterator\\operator=.html", "desc": "std::front_insert_iterator<Container>::std::front_insert_iterator<Container>::operator="}, {"name": "std::insert_iterator<Container>::std::insert_iterator<Container>::insert_iterator", "type": "cpp", "path": "cpp\\iterator\\insert_iterator\\insert_iterator.html", "desc": "std::insert_iterator<Container>::std::insert_iterator<Container>::insert_iterator"}, {"name": "std::insert_iterator<Container>::std::insert_iterator<Container>::operator*", "type": "cpp", "path": "cpp\\iterator\\insert_iterator\\operator%2A.html", "desc": "std::insert_iterator<Container>::std::insert_iterator<Container>::operator*"}, {"name": "std::insert_iterator<Container>::std::insert_iterator<Container>::operator++", "type": "cpp", "path": "cpp\\iterator\\insert_iterator\\operator++.html", "desc": "std::insert_iterator<Container>::std::insert_iterator<Container>::operator++"}, {"name": "std::insert_iterator<Container>::std::insert_iterator<Container>::operator=", "type": "cpp", "path": "cpp\\iterator\\insert_iterator\\operator=.html", "desc": "std::insert_iterator<Container>::std::insert_iterator<Container>::operator="}, {"name": "std::istreambuf_iterator<CharT,Traits>::std::istreambuf_iterator<CharT,Traits>::equal", "type": "cpp", "path": "cpp\\iterator\\istreambuf_iterator\\equal.html", "desc": "std::istreambuf_iterator<CharT,Traits>::std::istreambuf_iterator<CharT,Traits>::equal"}, {"name": "std::istreambuf_iterator<CharT,Traits>::std::istreambuf_iterator<CharT,Traits>::istreambuf_iterator", "type": "cpp", "path": "cpp\\iterator\\istreambuf_iterator\\istreambuf_iterator.html", "desc": "std::istreambuf_iterator<CharT,Traits>::std::istreambuf_iterator<CharT,Traits>::istreambuf_iterator"}, {"name": "std::istreambuf_iterator<CharT,Traits>::std::istreambuf_iterator<CharT,Traits>::operator*", "type": "cpp", "path": "cpp\\iterator\\istreambuf_iterator\\operator%2A.html", "desc": "std::istreambuf_iterator<CharT,Traits>::std::istreambuf_iterator<CharT,Traits>::operator*"}, {"name": "std::istreambuf_iterator<CharT,Traits>:: (int)std::istreambuf_iterator<CharT,Traits>::operator++, operator++(int)", "type": "cpp", "path": "cpp\\iterator\\istreambuf_iterator\\operator_arith.html", "desc": "std::istreambuf_iterator<CharT,Traits>:: (int)std::istreambuf_iterator<CharT,Traits>::operator++, operator++(int)"}, {"name": "(std::istreambuf_iterator<CharT,Traits>)operator==,!=(std::istreambuf_iterator<CharT,Traits>)", "type": "cpp", "path": "cpp\\iterator\\istreambuf_iterator\\operator_cmp.html", "desc": "(std::istreambuf_iterator<CharT,Traits>)operator==,!=(std::istreambuf_iterator<CharT,Traits>)"}, {"name": "std::istream_iterator<T,CharT,Traits,Distance>::std::istream_iterator<T,CharT,Traits,Distance>::istream_iterator", "type": "cpp", "path": "cpp\\iterator\\istream_iterator\\istream_iterator.html", "desc": "std::istream_iterator<T,CharT,Traits,Distance>::std::istream_iterator<T,CharT,Traits,Distance>::istream_iterator"}, {"name": "std::istream_iterator<T,CharT,Traits,Distance>::std::istream_iterator<T,CharT,Traits,Distance>::operator*, operator->", "type": "cpp", "path": "cpp\\iterator\\istream_iterator\\operator%2A.html", "desc": "std::istream_iterator<T,CharT,Traits,Distance>::std::istream_iterator<T,CharT,Traits,Distance>::operator*, operator->"}, {"name": "std::istream_iterator<T,CharT,Traits,Distance>:: (int)std::istream_iterator<T,CharT,Traits,Distance>::operator++, operator++(int)", "type": "cpp", "path": "cpp\\iterator\\istream_iterator\\operator_arith.html", "desc": "std::istream_iterator<T,CharT,Traits,Distance>:: (int)std::istream_iterator<T,CharT,Traits,Distance>::operator++, operator++(int)"}, {"name": "(std::istream_iterator<T, CharT, Traits, Dist>)operator==,!=(std::istream_iterator<T, CharT, Traits, Dist>)", "type": "cpp", "path": "cpp\\iterator\\istream_iterator\\operator_cmp.html", "desc": "(std::istream_iterator<T, CharT, Traits, Dist>)operator==,!=(std::istream_iterator<T, CharT, Traits, Dist>)"}, {"name": "std::istream_iterator<T,CharT,Traits,Distance>::std::istream_iterator<T,CharT,Traits,Distance>::~istream_iterator", "type": "cpp", "path": "cpp\\iterator\\istream_iterator\\~istream_iterator.html", "desc": "std::istream_iterator<T,CharT,Traits,Distance>::std::istream_iterator<T,CharT,Traits,Distance>::~istream_iterator"}, {"name": "std::move_iterator<Iter>::std::move_iterator<Iter>::base", "type": "cpp", "path": "cpp\\iterator\\move_iterator\\base.html", "desc": "std::move_iterator<Iter>::std::move_iterator<Iter>::base"}, {"name": "std::std::iter_move(std::move_iterator)", "type": "cpp", "path": "cpp\\iterator\\move_iterator\\iter_move.html", "desc": "std::std::iter_move(std::move_iterator)"}, {"name": "std::std::iter_swap(std::move_iterator)", "type": "cpp", "path": "cpp\\iterator\\move_iterator\\iter_swap.html", "desc": "std::std::iter_swap(std::move_iterator)"}, {"name": "std::move_iterator<Iter>::std::move_iterator<Iter>::move_iterator", "type": "cpp", "path": "cpp\\iterator\\move_iterator\\move_iterator.html", "desc": "std::move_iterator<Iter>::std::move_iterator<Iter>::move_iterator"}, {"name": "std::move_iterator<Iter>::std::move_iterator<Iter>::operator*,->", "type": "cpp", "path": "cpp\\iterator\\move_iterator\\operator%2A.html", "desc": "std::move_iterator<Iter>::std::move_iterator<Iter>::operator*,->"}, {"name": "operator+(std::move_iterator)", "type": "cpp", "path": "cpp\\iterator\\move_iterator\\operator+.html", "desc": "operator+(std::move_iterator)"}, {"name": "operator-(std::move_iterator)", "type": "cpp", "path": "cpp\\iterator\\move_iterator\\operator-.html", "desc": "operator-(std::move_iterator)"}, {"name": "operator-(std::move_iterator<Iter>, std::move_sentinel)", "type": "cpp", "path": "cpp\\iterator\\move_iterator\\operator-2.html", "desc": "operator-(std::move_iterator<Iter>, std::move_sentinel)"}, {"name": "std::move_iterator<Iter>::std::move_iterator<Iter>::operator=", "type": "cpp", "path": "cpp\\iterator\\move_iterator\\operator=.html", "desc": "std::move_iterator<Iter>::std::move_iterator<Iter>::operator="}, {"name": "std::move_iterator<Iter>::std::move_iterator<Iter>::operator++,+,+=,--,-,-=", "type": "cpp", "path": "cpp\\iterator\\move_iterator\\operator_arith.html", "desc": "std::move_iterator<Iter>::std::move_iterator<Iter>::operator++,+,+=,--,-,-="}, {"name": "std::move_iterator<Iter>::std::move_iterator<Iter>::operator[]", "type": "cpp", "path": "cpp\\iterator\\move_iterator\\operator_at.html", "desc": "std::move_iterator<Iter>::std::move_iterator<Iter>::operator[]"}, {"name": "operator==,!=,<,<=,>,>=,<=>(std::move_iterator)", "type": "cpp", "path": "cpp\\iterator\\move_iterator\\operator_cmp.html", "desc": "operator==,!=,<,<=,>,>=,<=>(std::move_iterator)"}, {"name": "operator==(std::move_iterator<Iter>, std::move_sentinel)", "type": "cpp", "path": "cpp\\iterator\\move_iterator\\operator_cmp2.html", "desc": "operator==(std::move_iterator<Iter>, std::move_sentinel)"}, {"name": "std::move_sentinel<S>::std::move_sentinel<S>::base", "type": "cpp", "path": "cpp\\iterator\\move_sentinel\\base.html", "desc": "std::move_sentinel<S>::std::move_sentinel<S>::base"}, {"name": "std::move_sentinel<S>::std::move_sentinel<S>::move_sentinel", "type": "cpp", "path": "cpp\\iterator\\move_sentinel\\move_sentinel.html", "desc": "std::move_sentinel<S>::std::move_sentinel<S>::move_sentinel"}, {"name": "std::move_sentinel<S>::std::move_sentinel<S>::operator=", "type": "cpp", "path": "cpp\\iterator\\move_sentinel\\operator=.html", "desc": "std::move_sentinel<S>::std::move_sentinel<S>::operator="}, {"name": "std::ostreambuf_iterator<CharT,Traits>::std::ostreambuf_iterator<CharT,Traits>::failed", "type": "cpp", "path": "cpp\\iterator\\ostreambuf_iterator\\failed.html", "desc": "std::ostreambuf_iterator<CharT,Traits>::std::ostreambuf_iterator<CharT,Traits>::failed"}, {"name": "std::ostreambuf_iterator<CharT,Traits>::std::ostreambuf_iterator<CharT,Traits>::operator*", "type": "cpp", "path": "cpp\\iterator\\ostreambuf_iterator\\operator%2A.html", "desc": "std::ostreambuf_iterator<CharT,Traits>::std::ostreambuf_iterator<CharT,Traits>::operator*"}, {"name": "std::ostreambuf_iterator<CharT,Traits>::std::ostreambuf_iterator<CharT,Traits>::operator=", "type": "cpp", "path": "cpp\\iterator\\ostreambuf_iterator\\operator=.html", "desc": "std::ostreambuf_iterator<CharT,Traits>::std::ostreambuf_iterator<CharT,Traits>::operator="}, {"name": "std::ostreambuf_iterator<CharT,Traits>::std::ostreambuf_iterator<CharT,Traits>::operator++", "type": "cpp", "path": "cpp\\iterator\\ostreambuf_iterator\\operator_arith.html", "desc": "std::ostreambuf_iterator<CharT,Traits>::std::ostreambuf_iterator<CharT,Traits>::operator++"}, {"name": "std::ostreambuf_iterator<CharT,Traits>::std::ostreambuf_iterator<CharT,Traits>::ostreambuf_iterator", "type": "cpp", "path": "cpp\\iterator\\ostreambuf_iterator\\ostreambuf_iterator.html", "desc": "std::ostreambuf_iterator<CharT,Traits>::std::ostreambuf_iterator<CharT,Traits>::ostreambuf_iterator"}, {"name": "std::ostream_iterator<T,CharT,Traits>::std::ostream_iterator<T,CharT,Traits>::operator*", "type": "cpp", "path": "cpp\\iterator\\ostream_iterator\\operator%2A.html", "desc": "std::ostream_iterator<T,CharT,Traits>::std::ostream_iterator<T,CharT,Traits>::operator*"}, {"name": "std::ostream_iterator<T,CharT,Traits>::std::ostream_iterator<T,CharT,Traits>::operator=", "type": "cpp", "path": "cpp\\iterator\\ostream_iterator\\operator=.html", "desc": "std::ostream_iterator<T,CharT,Traits>::std::ostream_iterator<T,CharT,Traits>::operator="}, {"name": "std::ostream_iterator<T,CharT,Traits>::std::ostream_iterator<T,CharT,Traits>::operator++", "type": "cpp", "path": "cpp\\iterator\\ostream_iterator\\operator_arith.html", "desc": "std::ostream_iterator<T,CharT,Traits>::std::ostream_iterator<T,CharT,Traits>::operator++"}, {"name": "std::ostream_iterator<T,CharT,Traits>::std::ostream_iterator<T,CharT,Traits>::ostream_iterator", "type": "cpp", "path": "cpp\\iterator\\ostream_iterator\\ostream_iterator.html", "desc": "std::ostream_iterator<T,CharT,Traits>::std::ostream_iterator<T,CharT,Traits>::ostream_iterator"}, {"name": "std::ostream_iterator<T,CharT,Traits>::std::ostream_iterator<T,CharT,Traits>::~ostream_iterator", "type": "cpp", "path": "cpp\\iterator\\ostream_iterator\\~ostream_iterator.html", "desc": "std::ostream_iterator<T,CharT,Traits>::std::ostream_iterator<T,CharT,Traits>::~ostream_iterator"}, {"name": "std::ranges::std::ranges::advance", "type": "cpp", "path": "cpp\\iterator\\ranges\\advance.html", "desc": "std::ranges::std::ranges::advance"}, {"name": "std::ranges::std::ranges::distance", "type": "cpp", "path": "cpp\\iterator\\ranges\\distance.html", "desc": "std::ranges::std::ranges::distance"}, {"name": "std::ranges::std::ranges::iter_move", "type": "cpp", "path": "cpp\\iterator\\ranges\\iter_move.html", "desc": "std::ranges::std::ranges::iter_move"}, {"name": "std::ranges::std::ranges::iter_swap", "type": "cpp", "path": "cpp\\iterator\\ranges\\iter_swap.html", "desc": "std::ranges::std::ranges::iter_swap"}, {"name": "std::ranges::std::ranges::next", "type": "cpp", "path": "cpp\\iterator\\ranges\\next.html", "desc": "std::ranges::std::ranges::next"}, {"name": "std::ranges::std::ranges::prev", "type": "cpp", "path": "cpp\\iterator\\ranges\\prev.html", "desc": "std::ranges::std::ranges::prev"}, {"name": "std::reverse_iterator<Iter>::std::reverse_iterator<Iter>::base", "type": "cpp", "path": "cpp\\iterator\\reverse_iterator\\base.html", "desc": "std::reverse_iterator<Iter>::std::reverse_iterator<Iter>::base"}, {"name": "std::std::iter_move(std::reverse_iterator)", "type": "cpp", "path": "cpp\\iterator\\reverse_iterator\\iter_move.html", "desc": "std::std::iter_move(std::reverse_iterator)"}, {"name": "std::std::iter_swap(std::reverse_iterator)", "type": "cpp", "path": "cpp\\iterator\\reverse_iterator\\iter_swap.html", "desc": "std::std::iter_swap(std::reverse_iterator)"}, {"name": "std::reverse_iterator<Iter>::std::reverse_iterator<Iter>::operator*,->", "type": "cpp", "path": "cpp\\iterator\\reverse_iterator\\operator%2A.html", "desc": "std::reverse_iterator<Iter>::std::reverse_iterator<Iter>::operator*,->"}, {"name": "operator+(std::reverse_iterator)", "type": "cpp", "path": "cpp\\iterator\\reverse_iterator\\operator+.html", "desc": "operator+(std::reverse_iterator)"}, {"name": "operator-(std::reverse_iterator)", "type": "cpp", "path": "cpp\\iterator\\reverse_iterator\\operator-.html", "desc": "operator-(std::reverse_iterator)"}, {"name": "std::reverse_iterator<Iter>::std::reverse_iterator<Iter>::operator=", "type": "cpp", "path": "cpp\\iterator\\reverse_iterator\\operator=.html", "desc": "std::reverse_iterator<Iter>::std::reverse_iterator<Iter>::operator="}, {"name": "std::reverse_iterator<Iter>::std::reverse_iterator<Iter>::operator++,+,+=,--,-,-=", "type": "cpp", "path": "cpp\\iterator\\reverse_iterator\\operator_arith.html", "desc": "std::reverse_iterator<Iter>::std::reverse_iterator<Iter>::operator++,+,+=,--,-,-="}, {"name": "std::reverse_iterator<Iter>::std::reverse_iterator<Iter>::operator[]", "type": "cpp", "path": "cpp\\iterator\\reverse_iterator\\operator_at.html", "desc": "std::reverse_iterator<Iter>::std::reverse_iterator<Iter>::operator[]"}, {"name": "operator==,!=,<,<=,>,>=,<=>(std::reverse_iterator)", "type": "cpp", "path": "cpp\\iterator\\reverse_iterator\\operator_cmp.html", "desc": "operator==,!=,<,<=,>,>=,<=>(std::reverse_iterator)"}, {"name": "std::reverse_iterator<Iter>::std::reverse_iterator<Iter>::reverse_iterator", "type": "cpp", "path": "cpp\\iterator\\reverse_iterator\\reverse_iterator.html", "desc": "std::reverse_iterator<Iter>::std::reverse_iterator<Iter>::reverse_iterator"}, {"name": "C++ \u5173\u952e\u8bcd\uff1a (C++11 \u8d77)C++ \u5173\u952e\u8bcd\uff1aalignas (C++11 \u8d77)", "type": "cpp", "path": "cpp\\keyword\\alignas.html", "desc": "C++ \u5173\u952e\u8bcd\uff1a (C++11 \u8d77)C++ \u5173\u952e\u8bcd\uff1aalignas (C++11 \u8d77)"}, {"name": "C++ \u5173\u952e\u8bcd\uff1a (C++11 \u8d77)C++ \u5173\u952e\u8bcd\uff1aalignof (C++11 \u8d77)", "type": "cpp", "path": "cpp\\keyword\\alignof.html", "desc": "C++ \u5173\u952e\u8bcd\uff1a (C++11 \u8d77)C++ \u5173\u952e\u8bcd\uff1aalignof (C++11 \u8d77)"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aand", "type": "cpp", "path": "cpp\\keyword\\and.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aand"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aand_eq", "type": "cpp", "path": "cpp\\keyword\\and_eq.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aand_eq"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aasm", "type": "cpp", "path": "cpp\\keyword\\asm.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aasm"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aauto", "type": "cpp", "path": "cpp\\keyword\\auto.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aauto"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1abitand", "type": "cpp", "path": "cpp\\keyword\\bitand.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1abitand"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1abitor", "type": "cpp", "path": "cpp\\keyword\\bitor.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1abitor"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1abool", "type": "cpp", "path": "cpp\\keyword\\bool.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1abool"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1a break", "type": "cpp", "path": "cpp\\keyword\\break.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1a break"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1acase", "type": "cpp", "path": "cpp\\keyword\\case.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1acase"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1acatch", "type": "cpp", "path": "cpp\\keyword\\catch.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1acatch"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1achar", "type": "cpp", "path": "cpp\\keyword\\char.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1achar"}, {"name": "C++ \u5173\u952e\u8bcd\uff1a (C++11 \u8d77)C++ \u5173\u952e\u8bcd\uff1achar16_t (C++11 \u8d77)", "type": "cpp", "path": "cpp\\keyword\\char16_t.html", "desc": "C++ \u5173\u952e\u8bcd\uff1a (C++11 \u8d77)C++ \u5173\u952e\u8bcd\uff1achar16_t (C++11 \u8d77)"}, {"name": "C++ \u5173\u952e\u8bcd\uff1a (C++11 \u8d77)C++ \u5173\u952e\u8bcd\uff1achar32_t (C++11 \u8d77)", "type": "cpp", "path": "cpp\\keyword\\char32_t.html", "desc": "C++ \u5173\u952e\u8bcd\uff1a (C++11 \u8d77)C++ \u5173\u952e\u8bcd\uff1achar32_t (C++11 \u8d77)"}, {"name": "C++ \u5173\u952e\u8bcd\uff1a (C++20 \u8d77)C++ \u5173\u952e\u8bcd\uff1achar8_t (C++20 \u8d77)", "type": "cpp", "path": "cpp\\keyword\\char8_t.html", "desc": "C++ \u5173\u952e\u8bcd\uff1a (C++20 \u8d77)C++ \u5173\u952e\u8bcd\uff1achar8_t (C++20 \u8d77)"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aclass", "type": "cpp", "path": "cpp\\keyword\\class.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aclass"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1acompl", "type": "cpp", "path": "cpp\\keyword\\compl.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1acompl"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aconcept", "type": "cpp", "path": "cpp\\keyword\\concept.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aconcept"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aconst", "type": "cpp", "path": "cpp\\keyword\\const.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aconst"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aconsteval", "type": "cpp", "path": "cpp\\keyword\\consteval.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aconsteval"}, {"name": "C++ \u5173\u952e\u8bcd\uff1a (C++11 \u8d77)C++ \u5173\u952e\u8bcd\uff1aconstexpr (C++11 \u8d77)", "type": "cpp", "path": "cpp\\keyword\\constexpr.html", "desc": "C++ \u5173\u952e\u8bcd\uff1a (C++11 \u8d77)C++ \u5173\u952e\u8bcd\uff1aconstexpr (C++11 \u8d77)"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aconstinit", "type": "cpp", "path": "cpp\\keyword\\constinit.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aconstinit"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aconst_cast", "type": "cpp", "path": "cpp\\keyword\\const_cast.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aconst_cast"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1acontinue", "type": "cpp", "path": "cpp\\keyword\\continue.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1acontinue"}, {"name": "C++ \u5173\u952e\u8bcd\uff1a (C++20 \u8d77)C++ \u5173\u952e\u8bcd\uff1aco_await (C++20 \u8d77)", "type": "cpp", "path": "cpp\\keyword\\co_await.html", "desc": "C++ \u5173\u952e\u8bcd\uff1a (C++20 \u8d77)C++ \u5173\u952e\u8bcd\uff1aco_await (C++20 \u8d77)"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aco_return", "type": "cpp", "path": "cpp\\keyword\\co_return.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aco_return"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aco_yield", "type": "cpp", "path": "cpp\\keyword\\co_yield.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aco_yield"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1adecltype", "type": "cpp", "path": "cpp\\keyword\\decltype.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1adecltype"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1adefault", "type": "cpp", "path": "cpp\\keyword\\default.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1adefault"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1adelete", "type": "cpp", "path": "cpp\\keyword\\delete.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1adelete"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1ado", "type": "cpp", "path": "cpp\\keyword\\do.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1ado"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1adouble", "type": "cpp", "path": "cpp\\keyword\\double.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1adouble"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1adynamic_cast", "type": "cpp", "path": "cpp\\keyword\\dynamic_cast.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1adynamic_cast"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aelse", "type": "cpp", "path": "cpp\\keyword\\else.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aelse"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aenum", "type": "cpp", "path": "cpp\\keyword\\enum.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aenum"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aexplicit", "type": "cpp", "path": "cpp\\keyword\\explicit.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aexplicit"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aexport", "type": "cpp", "path": "cpp\\keyword\\export.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aexport"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aextern", "type": "cpp", "path": "cpp\\keyword\\extern.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aextern"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1afalse", "type": "cpp", "path": "cpp\\keyword\\false.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1afalse"}, {"name": "C++ \u5173\u952e\u8bcd\uff1a (C++11 \u8d77)C++ \u5173\u952e\u8bcd\uff1afinal (C++11 \u8d77)", "type": "cpp", "path": "cpp\\keyword\\final.html", "desc": "C++ \u5173\u952e\u8bcd\uff1a (C++11 \u8d77)C++ \u5173\u952e\u8bcd\uff1afinal (C++11 \u8d77)"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1afloat", "type": "cpp", "path": "cpp\\keyword\\float.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1afloat"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1afor", "type": "cpp", "path": "cpp\\keyword\\for.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1afor"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1afriend", "type": "cpp", "path": "cpp\\keyword\\friend.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1afriend"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1agoto", "type": "cpp", "path": "cpp\\keyword\\goto.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1agoto"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aif", "type": "cpp", "path": "cpp\\keyword\\if.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aif"}, {"name": "cpp/keyword/import", "type": "cpp", "path": "cpp\\keyword\\import.html", "desc": "cpp/keyword/import"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1ainline", "type": "cpp", "path": "cpp\\keyword\\inline.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1ainline"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aint", "type": "cpp", "path": "cpp\\keyword\\int.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aint"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1along", "type": "cpp", "path": "cpp\\keyword\\long.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1along"}, {"name": "C++ \u5173\u952e\u8bcd\uff1a (C++20 \u8d77)C++ \u5173\u952e\u8bcd\uff1amodule (C++20 \u8d77)", "type": "cpp", "path": "cpp\\keyword\\module.html", "desc": "C++ \u5173\u952e\u8bcd\uff1a (C++20 \u8d77)C++ \u5173\u952e\u8bcd\uff1amodule (C++20 \u8d77)"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1amutable", "type": "cpp", "path": "cpp\\keyword\\mutable.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1amutable"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1anamespace", "type": "cpp", "path": "cpp\\keyword\\namespace.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1anamespace"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1anew", "type": "cpp", "path": "cpp\\keyword\\new.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1anew"}, {"name": "C++ \u5173\u952e\u8bcd\uff1a (C++11 \u8d77)C++ \u5173\u952e\u8bcd\uff1anoexcept (C++11 \u8d77)", "type": "cpp", "path": "cpp\\keyword\\noexcept.html", "desc": "C++ \u5173\u952e\u8bcd\uff1a (C++11 \u8d77)C++ \u5173\u952e\u8bcd\uff1anoexcept (C++11 \u8d77)"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1anot", "type": "cpp", "path": "cpp\\keyword\\not.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1anot"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1anot_eq", "type": "cpp", "path": "cpp\\keyword\\not_eq.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1anot_eq"}, {"name": "C++ \u5173\u952e\u8bcd\uff1a (C++11 \u8d77)C++ \u5173\u952e\u8bcd\uff1anullptr (C++11 \u8d77)", "type": "cpp", "path": "cpp\\keyword\\nullptr.html", "desc": "C++ \u5173\u952e\u8bcd\uff1a (C++11 \u8d77)C++ \u5173\u952e\u8bcd\uff1anullptr (C++11 \u8d77)"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aoperator", "type": "cpp", "path": "cpp\\keyword\\operator.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aoperator"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aor", "type": "cpp", "path": "cpp\\keyword\\or.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aor"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aor_eq", "type": "cpp", "path": "cpp\\keyword\\or_eq.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aor_eq"}, {"name": "C++ \u5173\u952e\u8bcd\uff1a (C++11 \u8d77)C++ \u5173\u952e\u8bcd\uff1aoverride (C++11 \u8d77)", "type": "cpp", "path": "cpp\\keyword\\override.html", "desc": "C++ \u5173\u952e\u8bcd\uff1a (C++11 \u8d77)C++ \u5173\u952e\u8bcd\uff1aoverride (C++11 \u8d77)"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aprivate", "type": "cpp", "path": "cpp\\keyword\\private.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aprivate"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aprotected", "type": "cpp", "path": "cpp\\keyword\\protected.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aprotected"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1apublic", "type": "cpp", "path": "cpp\\keyword\\public.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1apublic"}, {"name": "C++ \u5173\u952e\u8bcd\uff1a (\u53cd\u5c04 TS)C++ \u5173\u952e\u8bcd\uff1areflexpr (\u53cd\u5c04 TS)", "type": "cpp", "path": "cpp\\keyword\\reflexpr.html", "desc": "C++ \u5173\u952e\u8bcd\uff1a (\u53cd\u5c04 TS)C++ \u5173\u952e\u8bcd\uff1areflexpr (\u53cd\u5c04 TS)"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aregister", "type": "cpp", "path": "cpp\\keyword\\register.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aregister"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1areinterpret_cast", "type": "cpp", "path": "cpp\\keyword\\reinterpret_cast.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1areinterpret_cast"}, {"name": "C++ \u5173\u952e\u8bcd\uff1a (C++20 \u8d77)C++ \u5173\u952e\u8bcd\uff1arequires (C++20 \u8d77)", "type": "cpp", "path": "cpp\\keyword\\requires.html", "desc": "C++ \u5173\u952e\u8bcd\uff1a (C++20 \u8d77)C++ \u5173\u952e\u8bcd\uff1arequires (C++20 \u8d77)"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1areturn", "type": "cpp", "path": "cpp\\keyword\\return.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1areturn"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1ashort", "type": "cpp", "path": "cpp\\keyword\\short.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1ashort"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1asigned", "type": "cpp", "path": "cpp\\keyword\\signed.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1asigned"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1asizeof", "type": "cpp", "path": "cpp\\keyword\\sizeof.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1asizeof"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1astatic", "type": "cpp", "path": "cpp\\keyword\\static.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1astatic"}, {"name": "C++ \u5173\u952e\u8bcd\uff1a (C++11 \u8d77)C++ \u5173\u952e\u8bcd\uff1astatic_assert (C++11 \u8d77)", "type": "cpp", "path": "cpp\\keyword\\static_assert.html", "desc": "C++ \u5173\u952e\u8bcd\uff1a (C++11 \u8d77)C++ \u5173\u952e\u8bcd\uff1astatic_assert (C++11 \u8d77)"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1astatic_cast", "type": "cpp", "path": "cpp\\keyword\\static_cast.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1astatic_cast"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1astruct", "type": "cpp", "path": "cpp\\keyword\\struct.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1astruct"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aswitch", "type": "cpp", "path": "cpp\\keyword\\switch.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aswitch"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1atemplate", "type": "cpp", "path": "cpp\\keyword\\template.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1atemplate"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1athis", "type": "cpp", "path": "cpp\\keyword\\this.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1athis"}, {"name": "C++ \u5173\u952e\u8bcd\uff1a (C++11 \u8d77)C++ \u5173\u952e\u8bcd\uff1athread_local (C++11 \u8d77)", "type": "cpp", "path": "cpp\\keyword\\thread_local.html", "desc": "C++ \u5173\u952e\u8bcd\uff1a (C++11 \u8d77)C++ \u5173\u952e\u8bcd\uff1athread_local (C++11 \u8d77)"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1athrow", "type": "cpp", "path": "cpp\\keyword\\throw.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1athrow"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1atrue", "type": "cpp", "path": "cpp\\keyword\\true.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1atrue"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1atry", "type": "cpp", "path": "cpp\\keyword\\try.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1atry"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1atypedef", "type": "cpp", "path": "cpp\\keyword\\typedef.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1atypedef"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1atypeid", "type": "cpp", "path": "cpp\\keyword\\typeid.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1atypeid"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aunion", "type": "cpp", "path": "cpp\\keyword\\union.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aunion"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aunsigned", "type": "cpp", "path": "cpp\\keyword\\unsigned.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aunsigned"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1ausing", "type": "cpp", "path": "cpp\\keyword\\using.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1ausing"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1avirtual", "type": "cpp", "path": "cpp\\keyword\\virtual.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1avirtual"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1avoid", "type": "cpp", "path": "cpp\\keyword\\void.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1avoid"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1avolatile", "type": "cpp", "path": "cpp\\keyword\\volatile.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1avolatile"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1awchar_t", "type": "cpp", "path": "cpp\\keyword\\wchar_t.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1awchar_t"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1awhile", "type": "cpp", "path": "cpp\\keyword\\while.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1awhile"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1axor", "type": "cpp", "path": "cpp\\keyword\\xor.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1axor"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1axor_eq", "type": "cpp", "path": "cpp\\keyword\\xor_eq.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1axor_eq"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aif", "type": "cpp", "path": "cpp\\keywords\\if.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1aif"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1astatic", "type": "cpp", "path": "cpp\\keywords\\static.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1astatic"}, {"name": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1atypename", "type": "cpp", "path": "cpp\\keywords\\typename.html", "desc": "C++ \u5173\u952e\u8bcd\uff1aC++ \u5173\u952e\u8bcd\uff1atypename"}, {"name": "\u62bd\u8c61\u7c7b", "type": "cpp", "path": "cpp\\language\\abstract_class.html", "desc": "\u62bd\u8c61\u7c7b"}, {"name": "\u8bbf\u95ee\u8bf4\u660e\u7b26", "type": "cpp", "path": "cpp\\language\\access.html", "desc": "\u8bbf\u95ee\u8bf4\u660e\u7b26"}, {"name": "\u5b57\u6bcd\u7f29\u5199", "type": "cpp", "path": "cpp\\language\\acronyms.html", "desc": "\u5b57\u6bcd\u7f29\u5199"}, {"name": "\u5b9e\u53c2\u4f9d\u8d56\u67e5\u627e", "type": "cpp", "path": "cpp\\language\\adl.html", "desc": "\u5b9e\u53c2\u4f9d\u8d56\u67e5\u627e"}, {"name": "\u805a\u5408\u521d\u59cb\u5316", "type": "cpp", "path": "cpp\\language\\aggregate_initialization.html", "desc": "\u805a\u5408\u521d\u59cb\u5316"}, {"name": "(C++11 \u8d77)alignas \u8bf4\u660e\u7b26 (C++11 \u8d77)", "type": "cpp", "path": "cpp\\language\\alignas.html", "desc": "(C++11 \u8d77)alignas \u8bf4\u660e\u7b26 (C++11 \u8d77)"}, {"name": "(C++11 \u8d77)alignof \u8fd0\u7b97\u7b26(C++11 \u8d77)", "type": "cpp", "path": "cpp\\language\\alignof.html", "desc": "(C++11 \u8d77)alignof \u8fd0\u7b97\u7b26(C++11 \u8d77)"}, {"name": "\u6570\u7ec4\u58f0\u660e", "type": "cpp", "path": "cpp\\language\\array.html", "desc": "\u6570\u7ec4\u58f0\u660e"}, {"name": "ASCII \u7801\u8868", "type": "cpp", "path": "cpp\\language\\ascii.html", "desc": "ASCII \u7801\u8868"}, {"name": "\u6c47\u7f16\u58f0\u660e", "type": "cpp", "path": "cpp\\language\\asm.html", "desc": "\u6c47\u7f16\u58f0\u660e"}, {"name": "\u5982\u540c\u89c4\u5219", "type": "cpp", "path": "cpp\\language\\as_if.html", "desc": "\u5982\u540c\u89c4\u5219"}, {"name": "(C++11 \u8d77)\u5c5e\u6027\u8bf4\u660e\u7b26\u5e8f\u5217(C++11 \u8d77)", "type": "cpp", "path": "cpp\\language\\attributes.html", "desc": "(C++11 \u8d77)\u5c5e\u6027\u8bf4\u660e\u7b26\u5e8f\u5217(C++11 \u8d77)"}, {"name": "(C++11 \u8d77)\u5360\u4f4d\u7c7b\u578b\u8bf4\u660e\u7b26 (C++11 \u8d77)", "type": "cpp", "path": "cpp\\language\\auto.html", "desc": "(C++11 \u8d77)\u5360\u4f4d\u7c7b\u578b\u8bf4\u660e\u7b26 (C++11 \u8d77)"}, {"name": "\u57fa\u672c\u6982\u5ff5", "type": "cpp", "path": "cpp\\language\\basic_concepts.html", "desc": "\u57fa\u672c\u6982\u5ff5"}, {"name": "\u4f4d\u57df", "type": "cpp", "path": "cpp\\language\\bitfield.html", "desc": "\u4f4d\u57df"}, {"name": "\u4f4d\u57df", "type": "cpp", "path": "cpp\\language\\bit_field.html", "desc": "\u4f4d\u57df"}, {"name": "\u5e03\u5c14\u5b57\u9762\u91cf", "type": "cpp", "path": "cpp\\language\\bool_literal.html", "desc": "\u5e03\u5c14\u5b57\u9762\u91cf"}, {"name": "break \u8bed\u53e5", "type": "cpp", "path": "cpp\\language\\break.html", "desc": "break \u8bed\u53e5"}, {"name": "\u7528\u6237\u5b9a\u4e49\u8f6c\u6362\u51fd\u6570", "type": "cpp", "path": "cpp\\language\\cast_operator.html", "desc": "\u7528\u6237\u5b9a\u4e49\u8f6c\u6362\u51fd\u6570"}, {"name": "\u5b57\u7b26\u5b57\u9762\u91cf", "type": "cpp", "path": "cpp\\language\\character_literal.html", "desc": "\u5b57\u7b26\u5b57\u9762\u91cf"}, {"name": "\u5b57\u7b26\u96c6\u4e0e\u7f16\u7801", "type": "cpp", "path": "cpp\\language\\charset.html", "desc": "\u5b57\u7b26\u96c6\u4e0e\u7f16\u7801"}, {"name": "\u7c7b\u58f0\u660e", "type": "cpp", "path": "cpp\\language\\class.html", "desc": "\u7c7b\u58f0\u660e"}, {"name": "\u7c7b", "type": "cpp", "path": "cpp\\language\\classes.html", "desc": "\u7c7b"}, {"name": "\u7c7b\u6a21\u677f", "type": "cpp", "path": "cpp\\language\\class_template.html", "desc": "\u7c7b\u6a21\u677f"}, {"name": "(C++17 \u8d77)\u7c7b\u6a21\u677f\u5b9e\u53c2\u63a8\u5bfc\uff08CTAD\uff09(C++17 \u8d77)", "type": "cpp", "path": "cpp\\language\\class_template_argument_deduction.html", "desc": "(C++17 \u8d77)\u7c7b\u6a21\u677f\u5b9e\u53c2\u63a8\u5bfc\uff08CTAD\uff09(C++17 \u8d77)"}, {"name": "\u5e38\u91cf\u8868\u8fbe\u5f0f", "type": "cpp", "path": "cpp\\language\\constant_expression.html", "desc": "\u5e38\u91cf\u8868\u8fbe\u5f0f"}, {"name": "\u5e38\u91cf\u521d\u59cb\u5316", "type": "cpp", "path": "cpp\\language\\constant_initialization.html", "desc": "\u5e38\u91cf\u521d\u59cb\u5316"}, {"name": "(C++20 \u8d77)consteval \u8bf4\u660e\u7b26 (C++20 \u8d77)", "type": "cpp", "path": "cpp\\language\\consteval.html", "desc": "(C++20 \u8d77)consteval \u8bf4\u660e\u7b26 (C++20 \u8d77)"}, {"name": "(C++11 \u8d77)constexpr \u8bf4\u660e\u7b26(C++11 \u8d77)", "type": "cpp", "path": "cpp\\language\\constexpr.html", "desc": "(C++11 \u8d77)constexpr \u8bf4\u660e\u7b26(C++11 \u8d77)"}, {"name": "(C++20 \u8d77)constinit \u8bf4\u660e\u7b26 (C++20 \u8d77)", "type": "cpp", "path": "cpp\\language\\constinit.html", "desc": "(C++20 \u8d77)constinit \u8bf4\u660e\u7b26 (C++20 \u8d77)"}, {"name": "(C++20 \u8d77)\u7ea6\u675f\u4e0e\u6982\u5ff5 (C++20 \u8d77)", "type": "cpp", "path": "cpp\\language\\constraints.html", "desc": "(C++20 \u8d77)\u7ea6\u675f\u4e0e\u6982\u5ff5 (C++20 \u8d77)"}, {"name": "const_cast \u8f6c\u6362", "type": "cpp", "path": "cpp\\language\\const_cast.html", "desc": "const_cast \u8f6c\u6362"}, {"name": "continue \u8bed\u53e5", "type": "cpp", "path": "cpp\\language\\continue.html", "desc": "continue \u8bed\u53e5"}, {"name": "\u8f6c\u6362\u6784\u9020\u51fd\u6570", "type": "cpp", "path": "cpp\\language\\converting_constructor.html", "desc": "\u8f6c\u6362\u6784\u9020\u51fd\u6570"}, {"name": "\u590d\u5236\u8d4b\u503c\u8fd0\u7b97\u7b26", "type": "cpp", "path": "cpp\\language\\copy_assignment.html", "desc": "\u590d\u5236\u8d4b\u503c\u8fd0\u7b97\u7b26"}, {"name": "\u590d\u5236\u6784\u9020\u51fd\u6570", "type": "cpp", "path": "cpp\\language\\copy_constructor.html", "desc": "\u590d\u5236\u6784\u9020\u51fd\u6570"}, {"name": "\u590d\u5236\u6d88\u9664", "type": "cpp", "path": "cpp\\language\\copy_elision.html", "desc": "\u590d\u5236\u6d88\u9664"}, {"name": "\u590d\u5236\u521d\u59cb\u5316", "type": "cpp", "path": "cpp\\language\\copy_initialization.html", "desc": "\u590d\u5236\u521d\u59cb\u5316"}, {"name": "(C++20)\u534f\u7a0b (C++20)", "type": "cpp", "path": "cpp\\language\\coroutines.html", "desc": "(C++20)\u534f\u7a0b (C++20)"}, {"name": "\u5947\u7279\u91cd\u73b0\u6a21\u677f\u6a21\u5f0f", "type": "cpp", "path": "cpp\\language\\crtp.html", "desc": "\u5947\u7279\u91cd\u73b0\u6a21\u677f\u6a21\u5f0f"}, {"name": "const volatilecv\uff08const \u4e0e volatile\uff09\u7c7b\u578b\u9650\u5b9a\u7b26", "type": "cpp", "path": "cpp\\language\\cv.html", "desc": "const volatilecv\uff08const \u4e0e volatile\uff09\u7c7b\u578b\u9650\u5b9a\u7b26"}, {"name": "\u975e\u9759\u6001\u6570\u636e\u6210\u5458", "type": "cpp", "path": "cpp\\language\\data_members.html", "desc": "\u975e\u9759\u6001\u6570\u636e\u6210\u5458"}, {"name": "\u58f0\u660e", "type": "cpp", "path": "cpp\\language\\declarations.html", "desc": "\u58f0\u660e"}, {"name": "decltype \u8bf4\u660e\u7b26", "type": "cpp", "path": "cpp\\language\\decltype.html", "desc": "decltype \u8bf4\u660e\u7b26"}, {"name": "\u9ed8\u8ba4\u5b9e\u53c2", "type": "cpp", "path": "cpp\\language\\default_arguments.html", "desc": "\u9ed8\u8ba4\u5b9e\u53c2"}, {"name": "(C++20 \u8d77)\u9ed8\u8ba4\u6bd4\u8f83(C++20 \u8d77)", "type": "cpp", "path": "cpp\\language\\default_comparisons.html", "desc": "(C++20 \u8d77)\u9ed8\u8ba4\u6bd4\u8f83(C++20 \u8d77)"}, {"name": "\u9ed8\u8ba4\u6784\u9020\u51fd\u6570", "type": "cpp", "path": "cpp\\language\\default_constructor.html", "desc": "\u9ed8\u8ba4\u6784\u9020\u51fd\u6570"}, {"name": "\u9ed8\u8ba4\u521d\u59cb\u5316", "type": "cpp", "path": "cpp\\language\\default_initialization.html", "desc": "\u9ed8\u8ba4\u521d\u59cb\u5316"}, {"name": "\u5b9a\u4e49\u4e0e ODR \uff08\u5355\u4e00\u5b9a\u4e49\u89c4\u5219\uff09", "type": "cpp", "path": "cpp\\language\\definition.html", "desc": "\u5b9a\u4e49\u4e0e ODR \uff08\u5355\u4e00\u5b9a\u4e49\u89c4\u5219\uff09"}, {"name": "delete \u8868\u8fbe\u5f0f", "type": "cpp", "path": "cpp\\language\\delete.html", "desc": "delete \u8868\u8fbe\u5f0f"}, {"name": "\u5f85\u51b3\u540d", "type": "cpp", "path": "cpp\\language\\dependent_name.html", "desc": "\u5f85\u51b3\u540d"}, {"name": "\u6d3e\u751f\u7c7b", "type": "cpp", "path": "cpp\\language\\derived_class.html", "desc": "\u6d3e\u751f\u7c7b"}, {"name": "\u6790\u6784\u51fd\u6570", "type": "cpp", "path": "cpp\\language\\destructor.html", "desc": "\u6790\u6784\u51fd\u6570"}, {"name": "\u76f4\u63a5\u521d\u59cb\u5316", "type": "cpp", "path": "cpp\\language\\direct_initialization.html", "desc": "\u76f4\u63a5\u521d\u59cb\u5316"}, {"name": "do-while \u5faa\u73af", "type": "cpp", "path": "cpp\\language\\do.html", "desc": "do-while \u5faa\u73af"}, {"name": "dynamic_cast \u8f6c\u6362", "type": "cpp", "path": "cpp\\language\\dynamic_cast.html", "desc": "dynamic_cast \u8f6c\u6362"}, {"name": "\u7a7a\u57fa\u7c7b\u4f18\u5316", "type": "cpp", "path": "cpp\\language\\ebo.html", "desc": "\u7a7a\u57fa\u7c7b\u4f18\u5316"}, {"name": "\u8be6\u8ff0\u7c7b\u578b\u8bf4\u660e\u7b26", "type": "cpp", "path": "cpp\\language\\elaborated_type_specifier.html", "desc": "\u8be6\u8ff0\u7c7b\u578b\u8bf4\u660e\u7b26"}, {"name": "\u679a\u4e3e\u58f0\u660e", "type": "cpp", "path": "cpp\\language\\enum.html", "desc": "\u679a\u4e3e\u58f0\u660e"}, {"name": "\u8f6c\u4e49\u5e8f\u5217", "type": "cpp", "path": "cpp\\language\\escape.html", "desc": "\u8f6c\u4e49\u5e8f\u5217"}, {"name": "\u6c42\u503c\u987a\u5e8f", "type": "cpp", "path": "cpp\\language\\eval_order.html", "desc": "\u6c42\u503c\u987a\u5e8f"}, {"name": "\u5f02\u5e38", "type": "cpp", "path": "cpp\\language\\exceptions.html", "desc": "\u5f02\u5e38"}, {"name": "(C++17 \u524d)\u52a8\u6001\u5f02\u5e38\u8bf4\u660e (C++17 \u524d)", "type": "cpp", "path": "cpp\\language\\except_spec.html", "desc": "(C++17 \u524d)\u52a8\u6001\u5f02\u5e38\u8bf4\u660e (C++17 \u524d)"}, {"name": "explicit \u8bf4\u660e\u7b26", "type": "cpp", "path": "cpp\\language\\explicit.html", "desc": "explicit \u8bf4\u660e\u7b26"}, {"name": "\u663e\u5f0f\u7c7b\u578b\u8f6c\u6362", "type": "cpp", "path": "cpp\\language\\explicit_cast.html", "desc": "\u663e\u5f0f\u7c7b\u578b\u8f6c\u6362"}, {"name": "\u8868\u8fbe\u5f0f", "type": "cpp", "path": "cpp\\language\\expressions.html", "desc": "\u8868\u8fbe\u5f0f"}, {"name": "\u6269\u5145\u547d\u540d\u7a7a\u95f4 std", "type": "cpp", "path": "cpp\\language\\extending_std.html", "desc": "\u6269\u5145\u547d\u540d\u7a7a\u95f4 std"}, {"name": "(C++11 \u8d77)final \u8bf4\u660e\u7b26 (C++11 \u8d77)", "type": "cpp", "path": "cpp\\language\\final.html", "desc": "(C++11 \u8d77)final \u8bf4\u660e\u7b26 (C++11 \u8d77)"}, {"name": "\u6d6e\u70b9\u5b57\u9762\u91cf", "type": "cpp", "path": "cpp\\language\\floating_literal.html", "desc": "\u6d6e\u70b9\u5b57\u9762\u91cf"}, {"name": "(C++17 \u8d77)\u6298\u53e0\u8868\u8fbe\u5f0f(C++17 \u8d77)", "type": "cpp", "path": "cpp\\language\\fold.html", "desc": "(C++17 \u8d77)\u6298\u53e0\u8868\u8fbe\u5f0f(C++17 \u8d77)"}, {"name": "for \u5faa\u73af", "type": "cpp", "path": "cpp\\language\\for.html", "desc": "for \u5faa\u73af"}, {"name": "\u53cb\u5143\u58f0\u660e", "type": "cpp", "path": "cpp\\language\\friend.html", "desc": "\u53cb\u5143\u58f0\u660e"}, {"name": "\u51fd\u6570 try \u5757", "type": "cpp", "path": "cpp\\language\\function-try-block.html", "desc": "\u51fd\u6570 try \u5757"}, {"name": "\u51fd\u6570\u58f0\u660e", "type": "cpp", "path": "cpp\\language\\function.html", "desc": "\u51fd\u6570\u58f0\u660e"}, {"name": "\u51fd\u6570", "type": "cpp", "path": "cpp\\language\\functions.html", "desc": "\u51fd\u6570"}, {"name": "\u51fd\u6570\u6a21\u677f", "type": "cpp", "path": "cpp\\language\\function_template.html", "desc": "\u51fd\u6570\u6a21\u677f"}, {"name": "goto \u8bed\u53e5", "type": "cpp", "path": "cpp\\language\\goto.html", "desc": "goto \u8bed\u53e5"}, {"name": "C++ \u7684\u5386\u53f2", "type": "cpp", "path": "cpp\\language\\history.html", "desc": "C++ \u7684\u5386\u53f2"}, {"name": "\u6807\u8bc6\u7b26", "type": "cpp", "path": "cpp\\language\\identifiers.html", "desc": "\u6807\u8bc6\u7b26"}, {"name": "if \u8bed\u53e5", "type": "cpp", "path": "cpp\\language\\if.html", "desc": "if \u8bed\u53e5"}, {"name": "\u9690\u5f0f\u8f6c\u6362", "type": "cpp", "path": "cpp\\language\\implicit_cast.html", "desc": "\u9690\u5f0f\u8f6c\u6362"}, {"name": "\u9690\u5f0f\u8f6c\u6362", "type": "cpp", "path": "cpp\\language\\implicit_conversion.html", "desc": "\u9690\u5f0f\u8f6c\u6362"}, {"name": "\u7c7b\u578b", "type": "cpp", "path": "cpp\\language\\incomplete_type.html", "desc": "\u7c7b\u578b"}, {"name": "\u521d\u59cb\u5316", "type": "cpp", "path": "cpp\\language\\initialization.html", "desc": "\u521d\u59cb\u5316"}, {"name": "\u6784\u9020\u51fd\u6570\u4e0e\u6210\u5458\u521d\u59cb\u5316\u5668\u5217\u8868", "type": "cpp", "path": "cpp\\language\\initializer_list.html", "desc": "\u6784\u9020\u51fd\u6570\u4e0e\u6210\u5458\u521d\u59cb\u5316\u5668\u5217\u8868"}, {"name": "\u6ce8\u5165\u7c7b\u540d", "type": "cpp", "path": "cpp\\language\\injected-class-name.html", "desc": "\u6ce8\u5165\u7c7b\u540d"}, {"name": "inline \u8bf4\u660e\u7b26", "type": "cpp", "path": "cpp\\language\\inline.html", "desc": "inline \u8bf4\u660e\u7b26"}, {"name": "\u6574\u6570\u5b57\u9762\u91cf", "type": "cpp", "path": "cpp\\language\\integer_literal.html", "desc": "\u6574\u6570\u5b57\u9762\u91cf"}, {"name": "(C++11 \u8d77)lambda \u8868\u8fbe\u5f0f (C++11 \u8d77)", "type": "cpp", "path": "cpp\\language\\lambda.html", "desc": "(C++11 \u8d77)lambda \u8868\u8fbe\u5f0f (C++11 \u8d77)"}, {"name": "\u8bed\u8a00\u94fe\u63a5", "type": "cpp", "path": "cpp\\language\\language_linkage.html", "desc": "\u8bed\u8a00\u94fe\u63a5"}, {"name": "\u751f\u5b58\u671f", "type": "cpp", "path": "cpp\\language\\lifetime.html", "desc": "\u751f\u5b58\u671f"}, {"name": "(C++11 \u8d77)\u5217\u8868\u521d\u59cb\u5316 (C++11 \u8d77)", "type": "cpp", "path": "cpp\\language\\list_initialization.html", "desc": "(C++11 \u8d77)\u5217\u8868\u521d\u59cb\u5316 (C++11 \u8d77)"}, {"name": "\u540d\u5b57\u67e5\u627e", "type": "cpp", "path": "cpp\\language\\lookup.html", "desc": "\u540d\u5b57\u67e5\u627e"}, {"name": "\u4e3b\u51fd\u6570", "type": "cpp", "path": "cpp\\language\\main_function.html", "desc": "\u4e3b\u51fd\u6570"}, {"name": "\u975e\u9759\u6001\u6210\u5458\u51fd\u6570", "type": "cpp", "path": "cpp\\language\\member_functions.html", "desc": "\u975e\u9759\u6001\u6210\u5458\u51fd\u6570"}, {"name": "\u6210\u5458\u6a21\u677f", "type": "cpp", "path": "cpp\\language\\member_template.html", "desc": "\u6210\u5458\u6a21\u677f"}, {"name": "\u5185\u5b58\u6a21\u578b", "type": "cpp", "path": "cpp\\language\\memory_model.html", "desc": "\u5185\u5b58\u6a21\u578b"}, {"name": "(C++20 \u8d77)\u6a21\u5757 (C++20 \u8d77)", "type": "cpp", "path": "cpp\\language\\modules.html", "desc": "(C++20 \u8d77)\u6a21\u5757 (C++20 \u8d77)"}, {"name": "\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26", "type": "cpp", "path": "cpp\\language\\move_assignment.html", "desc": "\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26"}, {"name": "\u79fb\u52a8\u6784\u9020\u51fd\u6570", "type": "cpp", "path": "cpp\\language\\move_constructor.html", "desc": "\u79fb\u52a8\u6784\u9020\u51fd\u6570"}, {"name": "\u6807\u8bc6\u7b26", "type": "cpp", "path": "cpp\\language\\name.html", "desc": "\u6807\u8bc6\u7b26"}, {"name": "\u547d\u540d\u7a7a\u95f4", "type": "cpp", "path": "cpp\\language\\namespace.html", "desc": "\u547d\u540d\u7a7a\u95f4"}, {"name": "\u547d\u540d\u7a7a\u95f4\u522b\u540d", "type": "cpp", "path": "cpp\\language\\namespace_alias.html", "desc": "\u547d\u540d\u7a7a\u95f4\u522b\u540d"}, {"name": "\u4e0d\u8981\u6c42\u8bca\u65ad", "type": "cpp", "path": "cpp\\language\\ndr.html", "desc": "\u4e0d\u8981\u6c42\u8bca\u65ad"}, {"name": "\u5d4c\u5957\u7c7b", "type": "cpp", "path": "cpp\\language\\nested_classes.html", "desc": "\u5d4c\u5957\u7c7b"}, {"name": "\u5d4c\u5957\u7c7b", "type": "cpp", "path": "cpp\\language\\nested_types.html", "desc": "\u5d4c\u5957\u7c7b"}, {"name": "new \u8868\u8fbe\u5f0f", "type": "cpp", "path": "cpp\\language\\new.html", "desc": "new \u8868\u8fbe\u5f0f"}, {"name": "(C++11 \u8d77)noexcept \u8fd0\u7b97\u7b26 (C++11 \u8d77)", "type": "cpp", "path": "cpp\\language\\noexcept.html", "desc": "(C++11 \u8d77)noexcept \u8fd0\u7b97\u7b26 (C++11 \u8d77)"}, {"name": "(C++11 \u8d77)noexcept \u8bf4\u660e\u7b26 (C++11 \u8d77)", "type": "cpp", "path": "cpp\\language\\noexcept_spec.html", "desc": "(C++11 \u8d77)noexcept \u8bf4\u660e\u7b26 (C++11 \u8d77)"}, {"name": "nullptr \uff0c\u6307\u9488\u5b57\u9762\u91cf", "type": "cpp", "path": "cpp\\language\\nullptr.html", "desc": "nullptr \uff0c\u6307\u9488\u5b57\u9762\u91cf"}, {"name": "\u5bf9\u8c61", "type": "cpp", "path": "cpp\\language\\object.html", "desc": "\u5bf9\u8c61"}, {"name": "\u8fd0\u7b97\u7b26\u91cd\u8f7d", "type": "cpp", "path": "cpp\\language\\operators.html", "desc": "\u8fd0\u7b97\u7b26\u91cd\u8f7d"}, {"name": "\u4ee3\u7528\u8fd0\u7b97\u7b26\u8868\u793a", "type": "cpp", "path": "cpp\\language\\operator_alternative.html", "desc": "\u4ee3\u7528\u8fd0\u7b97\u7b26\u8868\u793a"}, {"name": "\u7b97\u672f\u8fd0\u7b97\u7b26", "type": "cpp", "path": "cpp\\language\\operator_arithmetic.html", "desc": "\u7b97\u672f\u8fd0\u7b97\u7b26"}, {"name": "\u8d4b\u503c\u8fd0\u7b97\u7b26", "type": "cpp", "path": "cpp\\language\\operator_assignment.html", "desc": "\u8d4b\u503c\u8fd0\u7b97\u7b26"}, {"name": "\u6bd4\u8f83\u8fd0\u7b97\u7b26", "type": "cpp", "path": "cpp\\language\\operator_comparison.html", "desc": "\u6bd4\u8f83\u8fd0\u7b97\u7b26"}, {"name": "\u81ea\u589e/\u81ea\u51cf\u8fd0\u7b97\u7b26", "type": "cpp", "path": "cpp\\language\\operator_incdec.html", "desc": "\u81ea\u589e/\u81ea\u51cf\u8fd0\u7b97\u7b26"}, {"name": "\u903b\u8f91\u8fd0\u7b97\u7b26", "type": "cpp", "path": "cpp\\language\\operator_logical.html", "desc": "\u903b\u8f91\u8fd0\u7b97\u7b26"}, {"name": "\u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26", "type": "cpp", "path": "cpp\\language\\operator_member_access.html", "desc": "\u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26"}, {"name": "\u5176\u4ed6\u8fd0\u7b97\u7b26", "type": "cpp", "path": "cpp\\language\\operator_other.html", "desc": "\u5176\u4ed6\u8fd0\u7b97\u7b26"}, {"name": "C++ \u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7", "type": "cpp", "path": "cpp\\language\\operator_precedence.html", "desc": "C++ \u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7"}, {"name": "\u91cd\u8f7d\u51fd\u6570\u7684\u5730\u5740", "type": "cpp", "path": "cpp\\language\\overloaded_address.html", "desc": "\u91cd\u8f7d\u51fd\u6570\u7684\u5730\u5740"}, {"name": "\u91cd\u8f7d\u51b3\u8bae(\u51fd\u6570\u5339\u914d)", "type": "cpp", "path": "cpp\\language\\overload_resolution.html", "desc": "\u91cd\u8f7d\u51b3\u8bae(\u51fd\u6570\u5339\u914d)"}, {"name": "(C++11 \u8d77)override \u8bf4\u660e\u7b26(C++11 \u8d77)", "type": "cpp", "path": "cpp\\language\\override.html", "desc": "(C++11 \u8d77)override \u8bf4\u660e\u7b26(C++11 \u8d77)"}, {"name": "(C++11 \u8d77)\u5f62\u53c2\u5305 (C++11 \u8d77)", "type": "cpp", "path": "cpp\\language\\parameter_pack.html", "desc": "(C++11 \u8d77)\u5f62\u53c2\u5305 (C++11 \u8d77)"}, {"name": "\u90e8\u5206\u6a21\u677f\u7279\u5316", "type": "cpp", "path": "cpp\\language\\partial_specialization.html", "desc": "\u90e8\u5206\u6a21\u677f\u7279\u5316"}, {"name": "PImpl", "type": "cpp", "path": "cpp\\language\\pimpl.html", "desc": "PImpl"}, {"name": "\u6307\u9488\u58f0\u660e", "type": "cpp", "path": "cpp\\language\\pointer.html", "desc": "\u6307\u9488\u58f0\u660e"}, {"name": "\u6807\u70b9", "type": "cpp", "path": "cpp\\language\\punctuators.html", "desc": "\u6807\u70b9"}, {"name": "\u6709\u9650\u5b9a\u7684\u540d\u5b57\u67e5\u627e", "type": "cpp", "path": "cpp\\language\\qualified_lookup.html", "desc": "\u6709\u9650\u5b9a\u7684\u540d\u5b57\u67e5\u627e"}, {"name": "RAII", "type": "cpp", "path": "cpp\\language\\raii.html", "desc": "RAII"}, {"name": "(C++11 \u8d77)\u57fa\u4e8e\u8303\u56f4\u7684 for \u5faa\u73af (C++11 \u8d77)", "type": "cpp", "path": "cpp\\language\\range-for.html", "desc": "(C++11 \u8d77)\u57fa\u4e8e\u8303\u56f4\u7684 for \u5faa\u73af (C++11 \u8d77)"}, {"name": "\u5f15\u7528\u58f0\u660e", "type": "cpp", "path": "cpp\\language\\reference.html", "desc": "\u5f15\u7528\u58f0\u660e"}, {"name": "\u5f15\u7528\u521d\u59cb\u5316", "type": "cpp", "path": "cpp\\language\\reference_initialization.html", "desc": "\u5f15\u7528\u521d\u59cb\u5316"}, {"name": "reinterpret_cast \u8f6c\u6362", "type": "cpp", "path": "cpp\\language\\reinterpret_cast.html", "desc": "reinterpret_cast \u8f6c\u6362"}, {"name": "(C++20 \u8d77)requires \u8868\u8fbe\u5f0f (C++20 \u8d77)", "type": "cpp", "path": "cpp\\language\\requires.html", "desc": "(C++20 \u8d77)requires \u8868\u8fbe\u5f0f (C++20 \u8d77)"}, {"name": "return \u8bed\u53e5", "type": "cpp", "path": "cpp\\language\\return.html", "desc": "return \u8bed\u53e5"}, {"name": "\u4e09/\u4e94/\u96f6\u4e4b\u6cd5\u5219", "type": "cpp", "path": "cpp\\language\\rule_of_three.html", "desc": "\u4e09/\u4e94/\u96f6\u4e4b\u6cd5\u5219"}, {"name": "\u4f5c\u7528\u57df", "type": "cpp", "path": "cpp\\language\\scope.html", "desc": "\u4f5c\u7528\u57df"}, {"name": "SFINAE", "type": "cpp", "path": "cpp\\language\\sfinae.html", "desc": "SFINAE"}, {"name": "(C++11 \u8d77)sizeof... \u8fd0\u7b97\u7b26 (C++11 \u8d77)", "type": "cpp", "path": "cpp\\language\\sizeof....html", "desc": "(C++11 \u8d77)sizeof... \u8fd0\u7b97\u7b26 (C++11 \u8d77)"}, {"name": "sizeof \u8fd0\u7b97\u7b26", "type": "cpp", "path": "cpp\\language\\sizeof.html", "desc": "sizeof \u8fd0\u7b97\u7b26"}, {"name": "\u8bed\u53e5", "type": "cpp", "path": "cpp\\language\\statements.html", "desc": "\u8bed\u53e5"}, {"name": "\u9759\u6001\u6210\u5458", "type": "cpp", "path": "cpp\\language\\static.html", "desc": "\u9759\u6001\u6210\u5458"}, {"name": "static_assert \u58f0\u660e", "type": "cpp", "path": "cpp\\language\\static_assert.html", "desc": "static_assert \u58f0\u660e"}, {"name": "static_cast \u8f6c\u6362", "type": "cpp", "path": "cpp\\language\\static_cast.html", "desc": "static_cast \u8f6c\u6362"}, {"name": "\u5b58\u50a8\u7c7b\u8bf4\u660e\u7b26", "type": "cpp", "path": "cpp\\language\\storage_duration.html", "desc": "\u5b58\u50a8\u7c7b\u8bf4\u660e\u7b26"}, {"name": "\u5b57\u7b26\u4e32\u5b57\u9762\u91cf", "type": "cpp", "path": "cpp\\language\\string_literal.html", "desc": "\u5b57\u7b26\u4e32\u5b57\u9762\u91cf"}, {"name": "(C++17 \u8d77)\u7ed3\u6784\u5316\u7ed1\u5b9a\u58f0\u660e (C++17 \u8d77)", "type": "cpp", "path": "cpp\\language\\structured_binding.html", "desc": "(C++17 \u8d77)\u7ed3\u6784\u5316\u7ed1\u5b9a\u58f0\u660e (C++17 \u8d77)"}, {"name": "switch \u8bed\u53e5", "type": "cpp", "path": "cpp\\language\\switch.html", "desc": "switch \u8bed\u53e5"}, {"name": "\u6a21\u677f", "type": "cpp", "path": "cpp\\language\\templates.html", "desc": "\u6a21\u677f"}, {"name": "\u6a21\u677f\u5b9e\u53c2\u63a8\u5bfc", "type": "cpp", "path": "cpp\\language\\template_argument_deduction.html", "desc": "\u6a21\u677f\u5b9e\u53c2\u63a8\u5bfc"}, {"name": "\u6a21\u677f\u5f62\u53c2\u4e0e\u6a21\u677f\u5b9e\u53c2", "type": "cpp", "path": "cpp\\language\\template_parameters.html", "desc": "\u6a21\u677f\u5f62\u53c2\u4e0e\u6a21\u677f\u5b9e\u53c2"}, {"name": "\u663e\u5f0f\uff08\u5168\uff09\u6a21\u677f\u7279\u5316", "type": "cpp", "path": "cpp\\language\\template_specialization.html", "desc": "\u663e\u5f0f\uff08\u5168\uff09\u6a21\u677f\u7279\u5316"}, {"name": "this \u6307\u9488", "type": "cpp", "path": "cpp\\language\\this.html", "desc": "this \u6307\u9488"}, {"name": "throw \u8868\u8fbe\u5f0f", "type": "cpp", "path": "cpp\\language\\throw.html", "desc": "throw \u8868\u8fbe\u5f0f"}, {"name": "\u4e8b\u52a1\u6027\u5185\u5b58", "type": "cpp", "path": "cpp\\language\\transactional_memory.html", "desc": "\u4e8b\u52a1\u6027\u5185\u5b58"}, {"name": "\u7ffb\u8bd1\u9636\u6bb5", "type": "cpp", "path": "cpp\\language\\translation_phases.html", "desc": "\u7ffb\u8bd1\u9636\u6bb5"}, {"name": "try \u5757", "type": "cpp", "path": "cpp\\language\\try_catch.html", "desc": "try \u5757"}, {"name": "(C++20 \u8d77)\u7ffb\u8bd1\u5355\u5143\u5c40\u90e8\u5b9e\u4f53 (C++20 \u8d77)", "type": "cpp", "path": "cpp\\language\\tu_local.html", "desc": "(C++20 \u8d77)\u7ffb\u8bd1\u5355\u5143\u5c40\u90e8\u5b9e\u4f53 (C++20 \u8d77)"}, {"name": "\u7c7b\u578b", "type": "cpp", "path": "cpp\\language\\type.html", "desc": "\u7c7b\u578b"}, {"name": "typedef \u8bf4\u660e\u7b26", "type": "cpp", "path": "cpp\\language\\typedef.html", "desc": "typedef \u8bf4\u660e\u7b26"}, {"name": "typeid \u8fd0\u7b97\u7b26", "type": "cpp", "path": "cpp\\language\\typeid.html", "desc": "typeid \u8fd0\u7b97\u7b26"}, {"name": "\u57fa\u7840\u7c7b\u578b", "type": "cpp", "path": "cpp\\language\\types.html", "desc": "\u57fa\u7840\u7c7b\u578b"}, {"name": "(C++11 \u8d77)\u7c7b\u578b\u522b\u540d\uff0c\u522b\u540d\u6a21\u677f (C++11 \u8d77)", "type": "cpp", "path": "cpp\\language\\type_alias.html", "desc": "(C++11 \u8d77)\u7c7b\u578b\u522b\u540d\uff0c\u522b\u540d\u6a21\u677f (C++11 \u8d77)"}, {"name": "\u672a\u5b9a\u4e49\u884c\u4e3a", "type": "cpp", "path": "cpp\\language\\ub.html", "desc": "\u672a\u5b9a\u4e49\u884c\u4e3a"}, {"name": "\u8054\u5408\u4f53\u58f0\u660e", "type": "cpp", "path": "cpp\\language\\union.html", "desc": "\u8054\u5408\u4f53\u58f0\u660e"}, {"name": "\u65e0\u9650\u5b9a\u7684\u540d\u5b57\u67e5\u627e", "type": "cpp", "path": "cpp\\language\\unqualified_lookup.html", "desc": "\u65e0\u9650\u5b9a\u7684\u540d\u5b57\u67e5\u627e"}, {"name": "(C++11 \u8d77)\u7528\u6237\u5b9a\u4e49\u5b57\u9762\u91cf (C++11 \u8d77)", "type": "cpp", "path": "cpp\\language\\user_literal.html", "desc": "(C++11 \u8d77)\u7528\u6237\u5b9a\u4e49\u5b57\u9762\u91cf (C++11 \u8d77)"}, {"name": "using \u58f0\u660e", "type": "cpp", "path": "cpp\\language\\using_declaration.html", "desc": "using \u58f0\u660e"}, {"name": "\u4e00\u822c\u7b97\u672f\u8f6c\u6362", "type": "cpp", "path": "cpp\\language\\usual_arithmetic_conversions.html", "desc": "\u4e00\u822c\u7b97\u672f\u8f6c\u6362"}, {"name": "\u503c\u7c7b\u522b", "type": "cpp", "path": "cpp\\language\\value_category.html", "desc": "\u503c\u7c7b\u522b"}, {"name": "(C++03 \u8d77)\u503c\u521d\u59cb\u5316(C++03 \u8d77)", "type": "cpp", "path": "cpp\\language\\value_initialization.html", "desc": "(C++03 \u8d77)\u503c\u521d\u59cb\u5316(C++03 \u8d77)"}, {"name": "(C++14 \u8d77)\u53d8\u91cf\u6a21\u677f(C++14 \u8d77)", "type": "cpp", "path": "cpp\\language\\variable_template.html", "desc": "(C++14 \u8d77)\u53d8\u91cf\u6a21\u677f(C++14 \u8d77)"}, {"name": "\u53d8\u957f\u5b9e\u53c2", "type": "cpp", "path": "cpp\\language\\variadic_arguments.html", "desc": "\u53d8\u957f\u5b9e\u53c2"}, {"name": "virtual \u51fd\u6570\u8bf4\u660e\u7b26", "type": "cpp", "path": "cpp\\language\\virtual.html", "desc": "virtual \u51fd\u6570\u8bf4\u660e\u7b26"}, {"name": "while \u5faa\u73af", "type": "cpp", "path": "cpp\\language\\while.html", "desc": "while \u5faa\u73af"}, {"name": "\u96f6\u5f00\u9500\u539f\u5219", "type": "cpp", "path": "cpp\\language\\Zero-overhead_principle.html", "desc": "\u96f6\u5f00\u9500\u539f\u5219"}, {"name": "\u96f6\u521d\u59cb\u5316", "type": "cpp", "path": "cpp\\language\\zero_initialization.html", "desc": "\u96f6\u521d\u59cb\u5316"}, {"name": "C++ \u5c5e\u6027\uff1a (C++23 \u8d77)C++ \u5c5e\u6027\uff1a assume (C++23 \u8d77)", "type": "cpp", "path": "cpp\\language\\attributes\\assume.html", "desc": "C++ \u5c5e\u6027\uff1a (C++23 \u8d77)C++ \u5c5e\u6027\uff1a assume (C++23 \u8d77)"}, {"name": "C++ \u5c5e\u6027\uff1a (C++11 \u8d77)C++ \u5c5e\u6027\uff1a carries_dependency (C++11 \u8d77)", "type": "cpp", "path": "cpp\\language\\attributes\\carries_dependency.html", "desc": "C++ \u5c5e\u6027\uff1a (C++11 \u8d77)C++ \u5c5e\u6027\uff1a carries_dependency (C++11 \u8d77)"}, {"name": "C++ \u5c5e\u6027\uff1a (C++14 \u8d77)C++ \u5c5e\u6027\uff1a deprecated (C++14 \u8d77)", "type": "cpp", "path": "cpp\\language\\attributes\\deprecated.html", "desc": "C++ \u5c5e\u6027\uff1a (C++14 \u8d77)C++ \u5c5e\u6027\uff1a deprecated (C++14 \u8d77)"}, {"name": "C++ \u5c5e\u6027\uff1a (C++17 \u8d77)C++ \u5c5e\u6027\uff1a fallthrough (C++17 \u8d77)", "type": "cpp", "path": "cpp\\language\\attributes\\fallthrough.html", "desc": "C++ \u5c5e\u6027\uff1a (C++17 \u8d77)C++ \u5c5e\u6027\uff1a fallthrough (C++17 \u8d77)"}, {"name": "C++ \u5c5e\u6027\uff1a (C++20 \u8d77)C++ \u5c5e\u6027\uff1a likely, unlikely (C++20 \u8d77)", "type": "cpp", "path": "cpp\\language\\attributes\\likely.html", "desc": "C++ \u5c5e\u6027\uff1a (C++20 \u8d77)C++ \u5c5e\u6027\uff1a likely, unlikely (C++20 \u8d77)"}, {"name": "C++ \u5c5e\u6027\uff1a (C++17 \u8d77)C++ \u5c5e\u6027\uff1a maybe_unused (C++17 \u8d77)", "type": "cpp", "path": "cpp\\language\\attributes\\maybe_unused.html", "desc": "C++ \u5c5e\u6027\uff1a (C++17 \u8d77)C++ \u5c5e\u6027\uff1a maybe_unused (C++17 \u8d77)"}, {"name": "C++ \u5c5e\u6027\uff1a (C++17 \u8d77)C++ \u5c5e\u6027\uff1a nodiscard (C++17 \u8d77)", "type": "cpp", "path": "cpp\\language\\attributes\\nodiscard.html", "desc": "C++ \u5c5e\u6027\uff1a (C++17 \u8d77)C++ \u5c5e\u6027\uff1a nodiscard (C++17 \u8d77)"}, {"name": "C++ \u5c5e\u6027\uff1a (C++11 \u8d77)C++ \u5c5e\u6027\uff1a noreturn (C++11 \u8d77)", "type": "cpp", "path": "cpp\\language\\attributes\\noreturn.html", "desc": "C++ \u5c5e\u6027\uff1a (C++11 \u8d77)C++ \u5c5e\u6027\uff1a noreturn (C++11 \u8d77)"}, {"name": "C++ \u5c5e\u6027\uff1a (C++20 \u8d77)C++ \u5c5e\u6027\uff1a no_unique_address (C++20 \u8d77)", "type": "cpp", "path": "cpp\\language\\attributes\\no_unique_address.html", "desc": "C++ \u5c5e\u6027\uff1a (C++20 \u8d77)C++ \u5c5e\u6027\uff1a no_unique_address (C++20 \u8d77)"}, {"name": "C++ \u5c5e\u6027\uff1a (TM TS)C++ \u5c5e\u6027\uff1a optimize_for_synchronized (TM TS)", "type": "cpp", "path": "cpp\\language\\attributes\\optimize_for_synchronized.html", "desc": "C++ \u5c5e\u6027\uff1a (TM TS)C++ \u5c5e\u6027\uff1a optimize_for_synchronized (TM TS)"}, {"name": "\u5f00\u6e90 C++ \u5e93\u5217\u8868", "type": "cpp", "path": "cpp\\links\\libs.html", "desc": "\u5f00\u6e90 C++ \u5e93\u5217\u8868"}, {"name": "std::std::codecvt", "type": "cpp", "path": "cpp\\locale\\codecvt.html", "desc": "std::std::codecvt"}, {"name": "std::std::codecvt_base", "type": "cpp", "path": "cpp\\locale\\codecvt_base.html", "desc": "std::std::codecvt_base"}, {"name": "std::std::codecvt_byname", "type": "cpp", "path": "cpp\\locale\\codecvt_byname.html", "desc": "std::std::codecvt_byname"}, {"name": "std::std::codecvt_mode", "type": "cpp", "path": "cpp\\locale\\codecvt_mode.html", "desc": "std::std::codecvt_mode"}, {"name": "std::std::codecvt_utf16", "type": "cpp", "path": "cpp\\locale\\codecvt_utf16.html", "desc": "std::std::codecvt_utf16"}, {"name": "std::std::codecvt_utf8", "type": "cpp", "path": "cpp\\locale\\codecvt_utf8.html", "desc": "std::std::codecvt_utf8"}, {"name": "std::std::codecvt_utf8_utf16", "type": "cpp", "path": "cpp\\locale\\codecvt_utf8_utf16.html", "desc": "std::std::codecvt_utf8_utf16"}, {"name": "std::std::collate", "type": "cpp", "path": "cpp\\locale\\collate.html", "desc": "std::std::collate"}, {"name": "std::std::collate_byname", "type": "cpp", "path": "cpp\\locale\\collate_byname.html", "desc": "std::std::collate_byname"}, {"name": "std::std::ctype", "type": "cpp", "path": "cpp\\locale\\ctype.html", "desc": "std::std::ctype"}, {"name": "std::std::ctype_base", "type": "cpp", "path": "cpp\\locale\\ctype_base.html", "desc": "std::std::ctype_base"}, {"name": "std::std::ctype_byname", "type": "cpp", "path": "cpp\\locale\\ctype_byname.html", "desc": "std::std::ctype_byname"}, {"name": "std:: <char>std::ctype_byname<char>", "type": "cpp", "path": "cpp\\locale\\ctype_byname_char.html", "desc": "std:: <char>std::ctype_byname<char>"}, {"name": "std:: <char>std::ctype<char>", "type": "cpp", "path": "cpp\\locale\\ctype_char.html", "desc": "std:: <char>std::ctype<char>"}, {"name": "std::std::has_facet", "type": "cpp", "path": "cpp\\locale\\has_facet.html", "desc": "std::std::has_facet"}, {"name": "std:: (std::locale)std::isalnum(std::locale)", "type": "cpp", "path": "cpp\\locale\\isalnum.html", "desc": "std:: (std::locale)std::isalnum(std::locale)"}, {"name": "std:: (std::locale)std::isalpha(std::locale)", "type": "cpp", "path": "cpp\\locale\\isalpha.html", "desc": "std:: (std::locale)std::isalpha(std::locale)"}, {"name": "std:: (std::locale)std::isblank(std::locale)", "type": "cpp", "path": "cpp\\locale\\isblank.html", "desc": "std:: (std::locale)std::isblank(std::locale)"}, {"name": "std:: (std::locale)std::iscntrl(std::locale)", "type": "cpp", "path": "cpp\\locale\\iscntrl.html", "desc": "std:: (std::locale)std::iscntrl(std::locale)"}, {"name": "std:: (std::locale)std::isdigit(std::locale)", "type": "cpp", "path": "cpp\\locale\\isdigit.html", "desc": "std:: (std::locale)std::isdigit(std::locale)"}, {"name": "std:: (std::locale)std::isgraph(std::locale)", "type": "cpp", "path": "cpp\\locale\\isgraph.html", "desc": "std:: (std::locale)std::isgraph(std::locale)"}, {"name": "std:: (std::locale)std::islower(std::locale)", "type": "cpp", "path": "cpp\\locale\\islower.html", "desc": "std:: (std::locale)std::islower(std::locale)"}, {"name": "std:: (std::locale)std::isprint(std::locale)", "type": "cpp", "path": "cpp\\locale\\isprint.html", "desc": "std:: (std::locale)std::isprint(std::locale)"}, {"name": "std:: (std::locale)std::ispunct(std::locale)", "type": "cpp", "path": "cpp\\locale\\ispunct.html", "desc": "std:: (std::locale)std::ispunct(std::locale)"}, {"name": "std:: (std::locale)std::isspace(std::locale)", "type": "cpp", "path": "cpp\\locale\\isspace.html", "desc": "std:: (std::locale)std::isspace(std::locale)"}, {"name": "std:: (std::locale)std::isupper(std::locale)", "type": "cpp", "path": "cpp\\locale\\isupper.html", "desc": "std:: (std::locale)std::isupper(std::locale)"}, {"name": "std:: (std::locale)std::isxdigit(std::locale)", "type": "cpp", "path": "cpp\\locale\\isxdigit.html", "desc": "std:: (std::locale)std::isxdigit(std::locale)"}, {"name": "std::std::lconv", "type": "cpp", "path": "cpp\\locale\\lconv.html", "desc": "std::std::lconv"}, {"name": "LC_ALL, LC_COLLATE, LC_CTYPE, LC_MONETARY, LC_NUMERIC, LC_TIME", "type": "cpp", "path": "cpp\\locale\\LC_categories.html", "desc": "LC_ALL, LC_COLLATE, LC_CTYPE, LC_MONETARY, LC_NUMERIC, LC_TIME"}, {"name": "std::std::locale", "type": "cpp", "path": "cpp\\locale\\locale.html", "desc": "std::std::locale"}, {"name": "std::std::localeconv", "type": "cpp", "path": "cpp\\locale\\localeconv.html", "desc": "std::std::localeconv"}, {"name": "std::std::messages", "type": "cpp", "path": "cpp\\locale\\messages.html", "desc": "std::std::messages"}, {"name": "std::std::messages_base", "type": "cpp", "path": "cpp\\locale\\messages_base.html", "desc": "std::std::messages_base"}, {"name": "std::std::messages_byname", "type": "cpp", "path": "cpp\\locale\\messages_byname.html", "desc": "std::std::messages_byname"}, {"name": "std::std::moneypunct", "type": "cpp", "path": "cpp\\locale\\moneypunct.html", "desc": "std::std::moneypunct"}, {"name": "std::std::moneypunct_byname", "type": "cpp", "path": "cpp\\locale\\moneypunct_byname.html", "desc": "std::std::moneypunct_byname"}, {"name": "std::std::money_base", "type": "cpp", "path": "cpp\\locale\\money_base.html", "desc": "std::std::money_base"}, {"name": "std::std::money_get", "type": "cpp", "path": "cpp\\locale\\money_get.html", "desc": "std::std::money_get"}, {"name": "std::std::money_put", "type": "cpp", "path": "cpp\\locale\\money_put.html", "desc": "std::std::money_put"}, {"name": "std::std::numpunct", "type": "cpp", "path": "cpp\\locale\\numpunct.html", "desc": "std::std::numpunct"}, {"name": "std::std::numpunct_byname", "type": "cpp", "path": "cpp\\locale\\numpunct_byname.html", "desc": "std::std::numpunct_byname"}, {"name": "std::std::num_get", "type": "cpp", "path": "cpp\\locale\\num_get.html", "desc": "std::std::num_get"}, {"name": "std::std::num_put", "type": "cpp", "path": "cpp\\locale\\num_put.html", "desc": "std::std::num_put"}, {"name": "std::std::setlocale", "type": "cpp", "path": "cpp\\locale\\setlocale.html", "desc": "std::std::setlocale"}, {"name": "std::std::time_base", "type": "cpp", "path": "cpp\\locale\\time_base.html", "desc": "std::std::time_base"}, {"name": "std::std::time_get", "type": "cpp", "path": "cpp\\locale\\time_get.html", "desc": "std::std::time_get"}, {"name": "std::std::time_get_byname", "type": "cpp", "path": "cpp\\locale\\time_get_byname.html", "desc": "std::std::time_get_byname"}, {"name": "std::std::time_put", "type": "cpp", "path": "cpp\\locale\\time_put.html", "desc": "std::std::time_put"}, {"name": "std::std::time_put_byname", "type": "cpp", "path": "cpp\\locale\\time_put_byname.html", "desc": "std::std::time_put_byname"}, {"name": "std:: (std::locale)std::tolower(std::locale)", "type": "cpp", "path": "cpp\\locale\\tolower.html", "desc": "std:: (std::locale)std::tolower(std::locale)"}, {"name": "std:: (std::locale)std::toupper(std::locale)", "type": "cpp", "path": "cpp\\locale\\toupper.html", "desc": "std:: (std::locale)std::toupper(std::locale)"}, {"name": "std::std::use_facet", "type": "cpp", "path": "cpp\\locale\\use_facet.html", "desc": "std::std::use_facet"}, {"name": "std::std::wbuffer_convert", "type": "cpp", "path": "cpp\\locale\\wbuffer_convert.html", "desc": "std::std::wbuffer_convert"}, {"name": "std::std::wstring_convert", "type": "cpp", "path": "cpp\\locale\\wstring_convert.html", "desc": "std::std::wstring_convert"}, {"name": "std::codecvt<InternT,ExternT,StateT>::std::codecvt<InternT,ExternT,StateT>::always_noconv, do_always_noconv", "type": "cpp", "path": "cpp\\locale\\codecvt\\always_noconv.html", "desc": "std::codecvt<InternT,ExternT,StateT>::std::codecvt<InternT,ExternT,StateT>::always_noconv, do_always_noconv"}, {"name": "std::codecvt<InternT,ExternT,StateT>::std::codecvt<InternT,ExternT,StateT>::codecvt", "type": "cpp", "path": "cpp\\locale\\codecvt\\codecvt.html", "desc": "std::codecvt<InternT,ExternT,StateT>::std::codecvt<InternT,ExternT,StateT>::codecvt"}, {"name": "std::codecvt<InternT,ExternT,StateT>::std::codecvt<InternT,ExternT,StateT>::encoding, do_encoding", "type": "cpp", "path": "cpp\\locale\\codecvt\\encoding.html", "desc": "std::codecvt<InternT,ExternT,StateT>::std::codecvt<InternT,ExternT,StateT>::encoding, do_encoding"}, {"name": "std::codecvt<InternT,ExternT,StateT>:: std::codecvt<InternT,ExternT,StateT>::std::codecvt<InternT,ExternT,StateT>::in, std::codecvt<InternT,ExternT,StateT>::do_in", "type": "cpp", "path": "cpp\\locale\\codecvt\\in.html", "desc": "std::codecvt<InternT,ExternT,StateT>:: std::codecvt<InternT,ExternT,StateT>::std::codecvt<InternT,ExternT,StateT>::in, std::codecvt<InternT,ExternT,StateT>::do_in"}, {"name": "std::codecvt<InternT,ExternT,StateT>::std::codecvt<InternT,ExternT,StateT>::length, do_length", "type": "cpp", "path": "cpp\\locale\\codecvt\\length.html", "desc": "std::codecvt<InternT,ExternT,StateT>::std::codecvt<InternT,ExternT,StateT>::length, do_length"}, {"name": "std::codecvt<InternT,ExternT,StateT>::std::codecvt<InternT,ExternT,StateT>::max_length, do_max_length", "type": "cpp", "path": "cpp\\locale\\codecvt\\max_length.html", "desc": "std::codecvt<InternT,ExternT,StateT>::std::codecvt<InternT,ExternT,StateT>::max_length, do_max_length"}, {"name": "std::codecvt<InternT,ExternT,StateT>:: std::codecvt<InternT,ExternT,StateT>::std::codecvt<InternT,ExternT,StateT>::out, std::codecvt<InternT,ExternT,StateT>::do_out", "type": "cpp", "path": "cpp\\locale\\codecvt\\out.html", "desc": "std::codecvt<InternT,ExternT,StateT>:: std::codecvt<InternT,ExternT,StateT>::std::codecvt<InternT,ExternT,StateT>::out, std::codecvt<InternT,ExternT,StateT>::do_out"}, {"name": "std::codecvt<InternT,ExternT,StateT>::std::codecvt<InternT,ExternT,StateT>::unshift, do_unshift", "type": "cpp", "path": "cpp\\locale\\codecvt\\unshift.html", "desc": "std::codecvt<InternT,ExternT,StateT>::std::codecvt<InternT,ExternT,StateT>::unshift, do_unshift"}, {"name": "std::codecvt<InternT,ExternT,StateT>::std::codecvt<InternT,ExternT,StateT>::~codecvt", "type": "cpp", "path": "cpp\\locale\\codecvt\\~codecvt.html", "desc": "std::codecvt<InternT,ExternT,StateT>::std::codecvt<InternT,ExternT,StateT>::~codecvt"}, {"name": "std::collate<CharT>::std::collate<CharT>::collate", "type": "cpp", "path": "cpp\\locale\\collate\\collate.html", "desc": "std::collate<CharT>::std::collate<CharT>::collate"}, {"name": "std::collate<CharT>:: std::collate<CharT>::std::collate<CharT>::compare, std::collate<CharT>::do_compare", "type": "cpp", "path": "cpp\\locale\\collate\\compare.html", "desc": "std::collate<CharT>:: std::collate<CharT>::std::collate<CharT>::compare, std::collate<CharT>::do_compare"}, {"name": "std::collate<CharT>:: std::collate<CharT>::std::collate<CharT>::hash, std::collate<CharT>::do_hash", "type": "cpp", "path": "cpp\\locale\\collate\\hash.html", "desc": "std::collate<CharT>:: std::collate<CharT>::std::collate<CharT>::hash, std::collate<CharT>::do_hash"}, {"name": "std::collate<CharT>::std::collate<CharT>::transform, do_transform", "type": "cpp", "path": "cpp\\locale\\collate\\transform.html", "desc": "std::collate<CharT>::std::collate<CharT>::transform, do_transform"}, {"name": "std::collate<CharT>::std::collate<CharT>::~collate", "type": "cpp", "path": "cpp\\locale\\collate\\~collate.html", "desc": "std::collate<CharT>::std::collate<CharT>::~collate"}, {"name": "std::ctype<CharT>::std::ctype<CharT>::ctype", "type": "cpp", "path": "cpp\\locale\\ctype\\ctype.html", "desc": "std::ctype<CharT>::std::ctype<CharT>::ctype"}, {"name": "std::ctype<CharT>:: std::ctype<CharT>::std::ctype<CharT>::is, std::ctype<CharT>::do_is", "type": "cpp", "path": "cpp\\locale\\ctype\\is.html", "desc": "std::ctype<CharT>:: std::ctype<CharT>::std::ctype<CharT>::is, std::ctype<CharT>::do_is"}, {"name": "std::ctype<CharT>::std::ctype<CharT>::narrow, do_narrow", "type": "cpp", "path": "cpp\\locale\\ctype\\narrow.html", "desc": "std::ctype<CharT>::std::ctype<CharT>::narrow, do_narrow"}, {"name": "std::ctype<CharT>:: std::ctype<CharT>::std::ctype<CharT>::scan_is, std::ctype<CharT>::do_scan_is", "type": "cpp", "path": "cpp\\locale\\ctype\\scan_is.html", "desc": "std::ctype<CharT>:: std::ctype<CharT>::std::ctype<CharT>::scan_is, std::ctype<CharT>::do_scan_is"}, {"name": "std::ctype<CharT>:: std::ctype<CharT>::std::ctype<CharT>::scan_not, std::ctype<CharT>::do_scan_not", "type": "cpp", "path": "cpp\\locale\\ctype\\scan_not.html", "desc": "std::ctype<CharT>:: std::ctype<CharT>::std::ctype<CharT>::scan_not, std::ctype<CharT>::do_scan_not"}, {"name": "std::ctype<CharT>:: std::ctype<CharT>::std::ctype<CharT>::tolower, std::ctype<CharT>::do_tolower", "type": "cpp", "path": "cpp\\locale\\ctype\\tolower.html", "desc": "std::ctype<CharT>:: std::ctype<CharT>::std::ctype<CharT>::tolower, std::ctype<CharT>::do_tolower"}, {"name": "std::ctype<CharT>:: std::ctype<CharT>::std::ctype<CharT>::toupper, std::ctype<CharT>::do_toupper", "type": "cpp", "path": "cpp\\locale\\ctype\\toupper.html", "desc": "std::ctype<CharT>:: std::ctype<CharT>::std::ctype<CharT>::toupper, std::ctype<CharT>::do_toupper"}, {"name": "std::ctype<CharT>::std::ctype<CharT>::widen, do_widen", "type": "cpp", "path": "cpp\\locale\\ctype\\widen.html", "desc": "std::ctype<CharT>::std::ctype<CharT>::widen, do_widen"}, {"name": "std::ctype<CharT>::std::ctype<CharT>::~ctype", "type": "cpp", "path": "cpp\\locale\\ctype\\~ctype.html", "desc": "std::ctype<CharT>::std::ctype<CharT>::~ctype"}, {"name": "std::ctype<char>:: <char>std::ctype<char>::classic_table", "type": "cpp", "path": "cpp\\locale\\ctype_char\\classic_table.html", "desc": "std::ctype<char>:: <char>std::ctype<char>::classic_table"}, {"name": "std::ctype<char>:: <char>std::ctype<char>::ctype", "type": "cpp", "path": "cpp\\locale\\ctype_char\\ctype.html", "desc": "std::ctype<char>:: <char>std::ctype<char>::ctype"}, {"name": "std::ctype<char>:: <char>std::ctype<char>::is", "type": "cpp", "path": "cpp\\locale\\ctype_char\\is.html", "desc": "std::ctype<char>:: <char>std::ctype<char>::is"}, {"name": "std::ctype<char>:: <char>std::ctype<char>::scan_is", "type": "cpp", "path": "cpp\\locale\\ctype_char\\scan_is.html", "desc": "std::ctype<char>:: <char>std::ctype<char>::scan_is"}, {"name": "std::ctype<char>:: <char>std::ctype<char>::scan_not", "type": "cpp", "path": "cpp\\locale\\ctype_char\\scan_not.html", "desc": "std::ctype<char>:: <char>std::ctype<char>::scan_not"}, {"name": "std::ctype<char>:: <char>std::ctype<char>::table", "type": "cpp", "path": "cpp\\locale\\ctype_char\\table.html", "desc": "std::ctype<char>:: <char>std::ctype<char>::table"}, {"name": "std::ctype<char>:: <char>std::ctype<char>::~ctype", "type": "cpp", "path": "cpp\\locale\\ctype_char\\~ctype.html", "desc": "std::ctype<char>:: <char>std::ctype<char>::~ctype"}, {"name": "std::locale::std::locale::classic", "type": "cpp", "path": "cpp\\locale\\locale\\classic.html", "desc": "std::locale::std::locale::classic"}, {"name": "std::locale::std::locale::combine", "type": "cpp", "path": "cpp\\locale\\locale\\combine.html", "desc": "std::locale::std::locale::combine"}, {"name": "std::locale::std::locale::facet", "type": "cpp", "path": "cpp\\locale\\locale\\facet.html", "desc": "std::locale::std::locale::facet"}, {"name": "std::locale::std::locale::global", "type": "cpp", "path": "cpp\\locale\\locale\\global.html", "desc": "std::locale::std::locale::global"}, {"name": "std::locale::std::locale::id", "type": "cpp", "path": "cpp\\locale\\locale\\id.html", "desc": "std::locale::std::locale::id"}, {"name": "std::locale::std::locale::locale", "type": "cpp", "path": "cpp\\locale\\locale\\locale.html", "desc": "std::locale::std::locale::locale"}, {"name": "std::locale::std::locale::name", "type": "cpp", "path": "cpp\\locale\\locale\\name.html", "desc": "std::locale::std::locale::name"}, {"name": "std::locale::std::locale::operator()", "type": "cpp", "path": "cpp\\locale\\locale\\operator().html", "desc": "std::locale::std::locale::operator()"}, {"name": "std::locale::std::locale::operator=", "type": "cpp", "path": "cpp\\locale\\locale\\operator=.html", "desc": "std::locale::std::locale::operator="}, {"name": "std::locale::std::locale::operator==, operator!=", "type": "cpp", "path": "cpp\\locale\\locale\\operator_cmp.html", "desc": "std::locale::std::locale::operator==, operator!="}, {"name": "std::locale::std::locale::~locale", "type": "cpp", "path": "cpp\\locale\\locale\\~locale.html", "desc": "std::locale::std::locale::~locale"}, {"name": "std::locale::facet::std::locale::facet::facet", "type": "cpp", "path": "cpp\\locale\\locale\\facet\\facet.html", "desc": "std::locale::facet::std::locale::facet::facet"}, {"name": "std::locale::id::std::locale::id::id", "type": "cpp", "path": "cpp\\locale\\locale\\id\\id.html", "desc": "std::locale::id::std::locale::id::id"}, {"name": "std::messages<CharT>:: std::messages<CharT>::std::messages<CharT>::close, std::messages<CharT>::do_close", "type": "cpp", "path": "cpp\\locale\\messages\\close.html", "desc": "std::messages<CharT>:: std::messages<CharT>::std::messages<CharT>::close, std::messages<CharT>::do_close"}, {"name": "std::messages<CharT>:: std::messages<CharT>::std::messages<CharT>::get, std::messages<CharT>::do_get", "type": "cpp", "path": "cpp\\locale\\messages\\get.html", "desc": "std::messages<CharT>:: std::messages<CharT>::std::messages<CharT>::get, std::messages<CharT>::do_get"}, {"name": "std::messages<CharT>::std::messages<CharT>::messages", "type": "cpp", "path": "cpp\\locale\\messages\\messages.html", "desc": "std::messages<CharT>::std::messages<CharT>::messages"}, {"name": "std::messages<CharT>:: std::messages<CharT>::std::messages<CharT>::open, std::messages<CharT>::do_open", "type": "cpp", "path": "cpp\\locale\\messages\\open.html", "desc": "std::messages<CharT>:: std::messages<CharT>::std::messages<CharT>::open, std::messages<CharT>::do_open"}, {"name": "std::messages<CharT>::std::messages<CharT>::~messages", "type": "cpp", "path": "cpp\\locale\\messages\\~messages.html", "desc": "std::messages<CharT>::std::messages<CharT>::~messages"}, {"name": "std::moneypunct<CharT,International>::std::moneypunct<CharT,International>::curr_symbol, do_curr_symbol", "type": "cpp", "path": "cpp\\locale\\moneypunct\\curr_symbol.html", "desc": "std::moneypunct<CharT,International>::std::moneypunct<CharT,International>::curr_symbol, do_curr_symbol"}, {"name": "std::moneypunct<CharT,International>::std::moneypunct<CharT,International>::decimal_point, do_decimal_point", "type": "cpp", "path": "cpp\\locale\\moneypunct\\decimal_point.html", "desc": "std::moneypunct<CharT,International>::std::moneypunct<CharT,International>::decimal_point, do_decimal_point"}, {"name": "std::moneypunct<CharT,International>::std::moneypunct<CharT,International>::frac_digits, do_frac_digits", "type": "cpp", "path": "cpp\\locale\\moneypunct\\frac_digits.html", "desc": "std::moneypunct<CharT,International>::std::moneypunct<CharT,International>::frac_digits, do_frac_digits"}, {"name": "std::moneypunct<CharT,International>::std::moneypunct<CharT,International>::grouping, do_grouping", "type": "cpp", "path": "cpp\\locale\\moneypunct\\grouping.html", "desc": "std::moneypunct<CharT,International>::std::moneypunct<CharT,International>::grouping, do_grouping"}, {"name": "std::moneypunct<CharT,International>::std::moneypunct<CharT,International>::moneypunct", "type": "cpp", "path": "cpp\\locale\\moneypunct\\moneypunct.html", "desc": "std::moneypunct<CharT,International>::std::moneypunct<CharT,International>::moneypunct"}, {"name": "std::moneypunct<CharT,International>::std::moneypunct<CharT,International>::positive_sign, do_positive_sign, negative_sign, do_negative_sign", "type": "cpp", "path": "cpp\\locale\\moneypunct\\positive_sign.html", "desc": "std::moneypunct<CharT,International>::std::moneypunct<CharT,International>::positive_sign, do_positive_sign, negative_sign, do_negative_sign"}, {"name": "std::moneypunct<CharT,International>::std::moneypunct<CharT,International>::pos_format, do_pos_format, neg_format, do_neg_format", "type": "cpp", "path": "cpp\\locale\\moneypunct\\pos_format.html", "desc": "std::moneypunct<CharT,International>::std::moneypunct<CharT,International>::pos_format, do_pos_format, neg_format, do_neg_format"}, {"name": "std::moneypunct<CharT,International>::std::moneypunct<CharT,International>::thousands_sep, do_thousands_sep", "type": "cpp", "path": "cpp\\locale\\moneypunct\\thousands_sep.html", "desc": "std::moneypunct<CharT,International>::std::moneypunct<CharT,International>::thousands_sep, do_thousands_sep"}, {"name": "std::moneypunct<CharT,International>::std::moneypunct<CharT,International>::~moneypunct", "type": "cpp", "path": "cpp\\locale\\moneypunct\\~moneypunct.html", "desc": "std::moneypunct<CharT,International>::std::moneypunct<CharT,International>::~moneypunct"}, {"name": "std::money_get<CharT,InputIt>::std::money_get<CharT,InputIt>::get, do_get", "type": "cpp", "path": "cpp\\locale\\money_get\\get.html", "desc": "std::money_get<CharT,InputIt>::std::money_get<CharT,InputIt>::get, do_get"}, {"name": "std::money_get<CharT,InputIt>::std::money_get<CharT,InputIt>::money_get", "type": "cpp", "path": "cpp\\locale\\money_get\\money_get.html", "desc": "std::money_get<CharT,InputIt>::std::money_get<CharT,InputIt>::money_get"}, {"name": "std::money_get<CharT,InputIt>::std::money_get<CharT,InputIt>::~money_get", "type": "cpp", "path": "cpp\\locale\\money_get\\~money_get.html", "desc": "std::money_get<CharT,InputIt>::std::money_get<CharT,InputIt>::~money_get"}, {"name": "std::money_put<CharT,OutputIt>::std::money_put<CharT,OutputIt>::money_put", "type": "cpp", "path": "cpp\\locale\\money_put\\money_put.html", "desc": "std::money_put<CharT,OutputIt>::std::money_put<CharT,OutputIt>::money_put"}, {"name": "std::money_put<CharT,OutputIt>::std::money_put<CharT,OutputIt>::put, do_put", "type": "cpp", "path": "cpp\\locale\\money_put\\put.html", "desc": "std::money_put<CharT,OutputIt>::std::money_put<CharT,OutputIt>::put, do_put"}, {"name": "std::money_put<CharT,OutputIt>::std::money_put<CharT,OutputIt>::~money_put", "type": "cpp", "path": "cpp\\locale\\money_put\\~money_put.html", "desc": "std::money_put<CharT,OutputIt>::std::money_put<CharT,OutputIt>::~money_put"}, {"name": "std::numpunct<CharT>::std::numpunct<CharT>::decimal_point, do_decimal_point", "type": "cpp", "path": "cpp\\locale\\numpunct\\decimal_point.html", "desc": "std::numpunct<CharT>::std::numpunct<CharT>::decimal_point, do_decimal_point"}, {"name": "std::numpunct<CharT>:: std::numpunct<CharT>::std::numpunct<CharT>::grouping, std::numpunct<CharT>::do_grouping", "type": "cpp", "path": "cpp\\locale\\numpunct\\grouping.html", "desc": "std::numpunct<CharT>:: std::numpunct<CharT>::std::numpunct<CharT>::grouping, std::numpunct<CharT>::do_grouping"}, {"name": "std::numpunct<CharT>::std::numpunct<CharT>::numpunct", "type": "cpp", "path": "cpp\\locale\\numpunct\\numpunct.html", "desc": "std::numpunct<CharT>::std::numpunct<CharT>::numpunct"}, {"name": "std::numpunct<CharT>::std::numpunct<CharT>::thousands_sep, do_thousands_sep", "type": "cpp", "path": "cpp\\locale\\numpunct\\thousands_sep.html", "desc": "std::numpunct<CharT>::std::numpunct<CharT>::thousands_sep, do_thousands_sep"}, {"name": "std::numpunct<CharT>::std::numpunct<CharT>::truename, do_truename, falsename, do_falsename", "type": "cpp", "path": "cpp\\locale\\numpunct\\truefalsename.html", "desc": "std::numpunct<CharT>::std::numpunct<CharT>::truename, do_truename, falsename, do_falsename"}, {"name": "std::numpunct<CharT>::std::numpunct<CharT>::~numpunct", "type": "cpp", "path": "cpp\\locale\\numpunct\\~numpunct.html", "desc": "std::numpunct<CharT>::std::numpunct<CharT>::~numpunct"}, {"name": "std::num_get<CharT,InputIt>:: std::num_get<CharT,InputIt>::std::num_get<CharT,InputIt>::get, std::num_get<CharT,InputIt>::do_get", "type": "cpp", "path": "cpp\\locale\\num_get\\get.html", "desc": "std::num_get<CharT,InputIt>:: std::num_get<CharT,InputIt>::std::num_get<CharT,InputIt>::get, std::num_get<CharT,InputIt>::do_get"}, {"name": "std::num_get<CharT,InputIt>::std::num_get<CharT,InputIt>::num_get", "type": "cpp", "path": "cpp\\locale\\num_get\\num_get.html", "desc": "std::num_get<CharT,InputIt>::std::num_get<CharT,InputIt>::num_get"}, {"name": "std::num_get<CharT,InputIt>::std::num_get<CharT,InputIt>::~num_get", "type": "cpp", "path": "cpp\\locale\\num_get\\~num_get.html", "desc": "std::num_get<CharT,InputIt>::std::num_get<CharT,InputIt>::~num_get"}, {"name": "std::num_put<CharT,OutputIt>::std::num_put<CharT,OutputIt>::num_put", "type": "cpp", "path": "cpp\\locale\\num_put\\num_put.html", "desc": "std::num_put<CharT,OutputIt>::std::num_put<CharT,OutputIt>::num_put"}, {"name": "std::num_put<CharT,OutputIt>:: std::num_put<CharT,OutputIt>::std::num_put<CharT,OutputIt>::put, std::num_put<CharT,OutputIt>::do_put", "type": "cpp", "path": "cpp\\locale\\num_put\\put.html", "desc": "std::num_put<CharT,OutputIt>:: std::num_put<CharT,OutputIt>::std::num_put<CharT,OutputIt>::put, std::num_put<CharT,OutputIt>::do_put"}, {"name": "std::num_put<CharT,OutputIt>::std::num_put<CharT,OutputIt>::~num_put", "type": "cpp", "path": "cpp\\locale\\num_put\\~num_put.html", "desc": "std::num_put<CharT,OutputIt>::std::num_put<CharT,OutputIt>::~num_put"}, {"name": "std::time_get<CharT,InputIt>:: std::time_get<CharT,InputIt>::std::time_get<CharT,InputIt>::date_order, std::time_get<CharT,InputIt>::do_date_order", "type": "cpp", "path": "cpp\\locale\\time_get\\date_order.html", "desc": "std::time_get<CharT,InputIt>:: std::time_get<CharT,InputIt>::std::time_get<CharT,InputIt>::date_order, std::time_get<CharT,InputIt>::do_date_order"}, {"name": "std::time_get<CharT,InputIt>:: std::time_get<CharT,InputIt>::std::time_get<CharT,InputIt>::get, std::time_get<CharT,InputIt>::do_get", "type": "cpp", "path": "cpp\\locale\\time_get\\get.html", "desc": "std::time_get<CharT,InputIt>:: std::time_get<CharT,InputIt>::std::time_get<CharT,InputIt>::get, std::time_get<CharT,InputIt>::do_get"}, {"name": "std::time_get<CharT,InputIt>:: std::time_get<CharT,InputIt>::std::time_get<CharT,InputIt>::get_date, std::time_get<CharT,InputIt>::do_get_date", "type": "cpp", "path": "cpp\\locale\\time_get\\get_date.html", "desc": "std::time_get<CharT,InputIt>:: std::time_get<CharT,InputIt>::std::time_get<CharT,InputIt>::get_date, std::time_get<CharT,InputIt>::do_get_date"}, {"name": "std::time_get<CharT,InputIt>:: std::time_get<CharT,InputIt>::std::time_get<CharT,InputIt>::get_monthname, std::time_get<CharT,InputIt>::do_get_monthname", "type": "cpp", "path": "cpp\\locale\\time_get\\get_monthname.html", "desc": "std::time_get<CharT,InputIt>:: std::time_get<CharT,InputIt>::std::time_get<CharT,InputIt>::get_monthname, std::time_get<CharT,InputIt>::do_get_monthname"}, {"name": "std::time_get<CharT,InputIt>:: std::time_get<CharT,InputIt>::std::time_get<CharT,InputIt>::get_time, std::time_get<CharT,InputIt>::do_get_time", "type": "cpp", "path": "cpp\\locale\\time_get\\get_time.html", "desc": "std::time_get<CharT,InputIt>:: std::time_get<CharT,InputIt>::std::time_get<CharT,InputIt>::get_time, std::time_get<CharT,InputIt>::do_get_time"}, {"name": "std::time_get<CharT,InputIt>:: std::time_get<CharT,InputIt>::std::time_get<CharT,InputIt>::get_weekday, std::time_get<CharT,InputIt>::do_get_weekday", "type": "cpp", "path": "cpp\\locale\\time_get\\get_weekday.html", "desc": "std::time_get<CharT,InputIt>:: std::time_get<CharT,InputIt>::std::time_get<CharT,InputIt>::get_weekday, std::time_get<CharT,InputIt>::do_get_weekday"}, {"name": "std::time_get<CharT,InputIt>:: std::time_get<CharT,InputIt>::std::time_get<CharT,InputIt>::get_year, std::time_get<CharT,InputIt>::do_get_year", "type": "cpp", "path": "cpp\\locale\\time_get\\get_year.html", "desc": "std::time_get<CharT,InputIt>:: std::time_get<CharT,InputIt>::std::time_get<CharT,InputIt>::get_year, std::time_get<CharT,InputIt>::do_get_year"}, {"name": "std::time_get<CharT,InputIt>::std::time_get<CharT,InputIt>::time_get", "type": "cpp", "path": "cpp\\locale\\time_get\\time_get.html", "desc": "std::time_get<CharT,InputIt>::std::time_get<CharT,InputIt>::time_get"}, {"name": "std::time_get<CharT,InputIt>::std::time_get<CharT,InputIt>::~time_get", "type": "cpp", "path": "cpp\\locale\\time_get\\~time_get.html", "desc": "std::time_get<CharT,InputIt>::std::time_get<CharT,InputIt>::~time_get"}, {"name": "std::time_put<CharT,OutputIt>:: std::time_put<CharT,OutputIt>::std::time_put<CharT,OutputIt>::put, std::time_put<CharT,OutputIt>::do_put", "type": "cpp", "path": "cpp\\locale\\time_put\\put.html", "desc": "std::time_put<CharT,OutputIt>:: std::time_put<CharT,OutputIt>::std::time_put<CharT,OutputIt>::put, std::time_put<CharT,OutputIt>::do_put"}, {"name": "std::time_put<CharT,OutputIt>::std::time_put<CharT,OutputIt>::time_put", "type": "cpp", "path": "cpp\\locale\\time_put\\time_put.html", "desc": "std::time_put<CharT,OutputIt>::std::time_put<CharT,OutputIt>::time_put"}, {"name": "std::time_put<CharT,OutputIt>::std::time_put<CharT,OutputIt>::~time_put", "type": "cpp", "path": "cpp\\locale\\time_put\\~time_put.html", "desc": "std::time_put<CharT,OutputIt>::std::time_put<CharT,OutputIt>::~time_put"}, {"name": "std::wbuffer_convert<Codecvt,Elem,Tr>::std::wbuffer_convert<Codecvt,Elem,Tr>::rdbuf", "type": "cpp", "path": "cpp\\locale\\wbuffer_convert\\rdbuf.html", "desc": "std::wbuffer_convert<Codecvt,Elem,Tr>::std::wbuffer_convert<Codecvt,Elem,Tr>::rdbuf"}, {"name": "std::wbuffer_convert<Codecvt,Elem,Tr>::std::wbuffer_convert<Codecvt,Elem,Tr>::state", "type": "cpp", "path": "cpp\\locale\\wbuffer_convert\\state.html", "desc": "std::wbuffer_convert<Codecvt,Elem,Tr>::std::wbuffer_convert<Codecvt,Elem,Tr>::state"}, {"name": "std::wbuffer_convert<Codecvt,Elem,Tr>::std::wbuffer_convert<Codecvt,Elem,Tr>::wbuffer_convert", "type": "cpp", "path": "cpp\\locale\\wbuffer_convert\\wbuffer_convert.html", "desc": "std::wbuffer_convert<Codecvt,Elem,Tr>::std::wbuffer_convert<Codecvt,Elem,Tr>::wbuffer_convert"}, {"name": "std::wbuffer_convert<Codecvt,Elem,Tr>::std::wbuffer_convert<Codecvt,Elem,Tr>::~wbuffer_convert", "type": "cpp", "path": "cpp\\locale\\wbuffer_convert\\~wbuffer_convert.html", "desc": "std::wbuffer_convert<Codecvt,Elem,Tr>::std::wbuffer_convert<Codecvt,Elem,Tr>::~wbuffer_convert"}, {"name": "std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>::std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>::converted", "type": "cpp", "path": "cpp\\locale\\wstring_convert\\converted.html", "desc": "std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>::std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>::converted"}, {"name": "std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>::std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>::from_bytes", "type": "cpp", "path": "cpp\\locale\\wstring_convert\\from_bytes.html", "desc": "std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>::std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>::from_bytes"}, {"name": "std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>::std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>::state", "type": "cpp", "path": "cpp\\locale\\wstring_convert\\state.html", "desc": "std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>::std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>::state"}, {"name": "std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>::std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>::to_bytes", "type": "cpp", "path": "cpp\\locale\\wstring_convert\\to_bytes.html", "desc": "std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>::std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>::to_bytes"}, {"name": "std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>::std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>::wstring_convert", "type": "cpp", "path": "cpp\\locale\\wstring_convert\\wstring_convert.html", "desc": "std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>::std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>::wstring_convert"}, {"name": "std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>::std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>:: ~wstring_convert", "type": "cpp", "path": "cpp\\locale\\wstring_convert\\~wstring_convert.html", "desc": "std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>::std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>:: ~wstring_convert"}, {"name": "std::std::addressof", "type": "cpp", "path": "cpp\\memory\\addressof.html", "desc": "std::std::addressof"}, {"name": "std::std::align", "type": "cpp", "path": "cpp\\memory\\align.html", "desc": "std::std::align"}, {"name": "std::std::allocation_result", "type": "cpp", "path": "cpp\\memory\\allocation_result.html", "desc": "std::std::allocation_result"}, {"name": "std::std::allocator", "type": "cpp", "path": "cpp\\memory\\allocator.html", "desc": "std::std::allocator"}, {"name": "std::std::allocator_arg", "type": "cpp", "path": "cpp\\memory\\allocator_arg.html", "desc": "std::std::allocator_arg"}, {"name": "std::std::allocator_arg_t", "type": "cpp", "path": "cpp\\memory\\allocator_arg_t.html", "desc": "std::std::allocator_arg_t"}, {"name": "std::std::allocator_traits", "type": "cpp", "path": "cpp\\memory\\allocator_traits.html", "desc": "std::std::allocator_traits"}, {"name": "std::std::assume_aligned", "type": "cpp", "path": "cpp\\memory\\assume_aligned.html", "desc": "std::std::assume_aligned"}, {"name": "std::std::auto_ptr", "type": "cpp", "path": "cpp\\memory\\auto_ptr.html", "desc": "std::std::auto_ptr"}, {"name": "std::std::bad_weak_ptr", "type": "cpp", "path": "cpp\\memory\\bad_weak_ptr.html", "desc": "std::std::bad_weak_ptr"}, {"name": "C \u5185\u5b58\u7ba1\u7406\u5e93", "type": "cpp", "path": "cpp\\memory\\c.html", "desc": "C \u5185\u5b58\u7ba1\u7406\u5e93"}, {"name": "std::std::construct_at", "type": "cpp", "path": "cpp\\memory\\construct_at.html", "desc": "std::std::construct_at"}, {"name": "std::std::default_delete", "type": "cpp", "path": "cpp\\memory\\default_delete.html", "desc": "std::std::default_delete"}, {"name": "std::std::destroy", "type": "cpp", "path": "cpp\\memory\\destroy.html", "desc": "std::std::destroy"}, {"name": "std::std::destroy_at", "type": "cpp", "path": "cpp\\memory\\destroy_at.html", "desc": "std::std::destroy_at"}, {"name": "std::std::destroy_n", "type": "cpp", "path": "cpp\\memory\\destroy_n.html", "desc": "std::std::destroy_n"}, {"name": "std::std::enable_shared_from_this", "type": "cpp", "path": "cpp\\memory\\enable_shared_from_this.html", "desc": "std::std::enable_shared_from_this"}, {"name": "std::pmr::std::pmr::get_default_resource", "type": "cpp", "path": "cpp\\memory\\get_default_resource.html", "desc": "std::pmr::std::pmr::get_default_resource"}, {"name": "std::std::get_temporary_buffer", "type": "cpp", "path": "cpp\\memory\\get_temporary_buffer.html", "desc": "std::std::get_temporary_buffer"}, {"name": "std::std::inout_ptr_t", "type": "cpp", "path": "cpp\\memory\\inout_ptr_t.html", "desc": "std::std::inout_ptr_t"}, {"name": "std::std::make_obj_using_allocator", "type": "cpp", "path": "cpp\\memory\\make_obj_using_allocator.html", "desc": "std::std::make_obj_using_allocator"}, {"name": "std::pmr::std::pmr::memory_resource", "type": "cpp", "path": "cpp\\memory\\memory_resource.html", "desc": "std::pmr::std::pmr::memory_resource"}, {"name": "std::pmr::std::pmr::monotonic_buffer_resource", "type": "cpp", "path": "cpp\\memory\\monotonic_buffer_resource.html", "desc": "std::pmr::std::pmr::monotonic_buffer_resource"}, {"name": "\u4f4e\u5c42\u5185\u5b58\u7ba1\u7406", "type": "cpp", "path": "cpp\\memory\\new.html", "desc": "\u4f4e\u5c42\u5185\u5b58\u7ba1\u7406"}, {"name": "std::pmr::std::pmr::new_delete_resource", "type": "cpp", "path": "cpp\\memory\\new_delete_resource.html", "desc": "std::pmr::std::pmr::new_delete_resource"}, {"name": "std::pmr::std::pmr::null_memory_resource", "type": "cpp", "path": "cpp\\memory\\null_memory_resource.html", "desc": "std::pmr::std::pmr::null_memory_resource"}, {"name": "std::std::out_ptr_t", "type": "cpp", "path": "cpp\\memory\\out_ptr_t.html", "desc": "std::std::out_ptr_t"}, {"name": "std::std::owner_less", "type": "cpp", "path": "cpp\\memory\\owner_less.html", "desc": "std::std::owner_less"}, {"name": "std::std::owner_less", "type": "cpp", "path": "cpp\\memory\\owner_less_void.html", "desc": "std::std::owner_less"}, {"name": "std::std::pointer_traits", "type": "cpp", "path": "cpp\\memory\\pointer_traits.html", "desc": "std::std::pointer_traits"}, {"name": "std::pmr::std::pmr::polymorphic_allocator", "type": "cpp", "path": "cpp\\memory\\polymorphic_allocator.html", "desc": "std::pmr::std::pmr::polymorphic_allocator"}, {"name": "std::pmr::std::pmr::pool_options", "type": "cpp", "path": "cpp\\memory\\pool_options.html", "desc": "std::pmr::std::pmr::pool_options"}, {"name": "std::std::raw_storage_iterator", "type": "cpp", "path": "cpp\\memory\\raw_storage_iterator.html", "desc": "std::std::raw_storage_iterator"}, {"name": "std::std::return_temporary_buffer", "type": "cpp", "path": "cpp\\memory\\return_temporary_buffer.html", "desc": "std::std::return_temporary_buffer"}, {"name": "std::std::scoped_allocator_adaptor", "type": "cpp", "path": "cpp\\memory\\scoped_allocator_adaptor.html", "desc": "std::std::scoped_allocator_adaptor"}, {"name": "std::pmr::std::pmr::set_default_resource", "type": "cpp", "path": "cpp\\memory\\set_default_resource.html", "desc": "std::pmr::std::pmr::set_default_resource"}, {"name": "std::std::shared_ptr", "type": "cpp", "path": "cpp\\memory\\shared_ptr.html", "desc": "std::std::shared_ptr"}, {"name": "std:: std::std::start_lifetime_as, std::start_lifetime_as_array", "type": "cpp", "path": "cpp\\memory\\start_lifetime_as.html", "desc": "std:: std::std::start_lifetime_as, std::start_lifetime_as_array"}, {"name": "std::pmr::std::pmr::synchronized_pool_resource", "type": "cpp", "path": "cpp\\memory\\synchronized_pool_resource.html", "desc": "std::pmr::std::pmr::synchronized_pool_resource"}, {"name": "std::std::to_address", "type": "cpp", "path": "cpp\\memory\\to_address.html", "desc": "std::std::to_address"}, {"name": "std::std::uninitialized_construct_using_allocator", "type": "cpp", "path": "cpp\\memory\\uninitialized_construct_using_allocator.html", "desc": "std::std::uninitialized_construct_using_allocator"}, {"name": "std::std::uninitialized_copy", "type": "cpp", "path": "cpp\\memory\\uninitialized_copy.html", "desc": "std::std::uninitialized_copy"}, {"name": "std::std::uninitialized_copy_n", "type": "cpp", "path": "cpp\\memory\\uninitialized_copy_n.html", "desc": "std::std::uninitialized_copy_n"}, {"name": "std::std::uninitialized_default_construct", "type": "cpp", "path": "cpp\\memory\\uninitialized_default_construct.html", "desc": "std::std::uninitialized_default_construct"}, {"name": "std::std::uninitialized_default_construct_n", "type": "cpp", "path": "cpp\\memory\\uninitialized_default_construct_n.html", "desc": "std::std::uninitialized_default_construct_n"}, {"name": "std::std::uninitialized_fill", "type": "cpp", "path": "cpp\\memory\\uninitialized_fill.html", "desc": "std::std::uninitialized_fill"}, {"name": "std::std::uninitialized_fill_n", "type": "cpp", "path": "cpp\\memory\\uninitialized_fill_n.html", "desc": "std::std::uninitialized_fill_n"}, {"name": "std::std::uninitialized_move", "type": "cpp", "path": "cpp\\memory\\uninitialized_move.html", "desc": "std::std::uninitialized_move"}, {"name": "std::std::uninitialized_move_n", "type": "cpp", "path": "cpp\\memory\\uninitialized_move_n.html", "desc": "std::std::uninitialized_move_n"}, {"name": "std::std::uninitialized_value_construct", "type": "cpp", "path": "cpp\\memory\\uninitialized_value_construct.html", "desc": "std::std::uninitialized_value_construct"}, {"name": "std::std::uninitialized_value_construct_n", "type": "cpp", "path": "cpp\\memory\\uninitialized_value_construct_n.html", "desc": "std::std::uninitialized_value_construct_n"}, {"name": "std::std::unique_ptr", "type": "cpp", "path": "cpp\\memory\\unique_ptr.html", "desc": "std::std::unique_ptr"}, {"name": "std::pmr::std::pmr::unsynchronized_pool_resource", "type": "cpp", "path": "cpp\\memory\\unsynchronized_pool_resource.html", "desc": "std::pmr::std::pmr::unsynchronized_pool_resource"}, {"name": "std::std::uses_allocator", "type": "cpp", "path": "cpp\\memory\\uses_allocator.html", "desc": "std::std::uses_allocator"}, {"name": "std::std::uses_allocator_construction_args", "type": "cpp", "path": "cpp\\memory\\uses_allocator_construction_args.html", "desc": "std::std::uses_allocator_construction_args"}, {"name": "voidify", "type": "cpp", "path": "cpp\\memory\\voidify.html", "desc": "voidify"}, {"name": "std::std::weak_ptr", "type": "cpp", "path": "cpp\\memory\\weak_ptr.html", "desc": "std::std::weak_ptr"}, {"name": "std::allocator<T>::std::allocator<T>::address", "type": "cpp", "path": "cpp\\memory\\allocator\\address.html", "desc": "std::allocator<T>::std::allocator<T>::address"}, {"name": "std::allocator<T>::std::allocator<T>::allocate", "type": "cpp", "path": "cpp\\memory\\allocator\\allocate.html", "desc": "std::allocator<T>::std::allocator<T>::allocate"}, {"name": "std::allocator<T>::std::allocator<T>::allocate_at_least", "type": "cpp", "path": "cpp\\memory\\allocator\\allocate_at_least.html", "desc": "std::allocator<T>::std::allocator<T>::allocate_at_least"}, {"name": "std::allocator<T>::std::allocator<T>::allocator", "type": "cpp", "path": "cpp\\memory\\allocator\\allocator.html", "desc": "std::allocator<T>::std::allocator<T>::allocator"}, {"name": "std::allocator<T>::std::allocator<T>::construct", "type": "cpp", "path": "cpp\\memory\\allocator\\construct.html", "desc": "std::allocator<T>::std::allocator<T>::construct"}, {"name": "std::allocator<T>::std::allocator<T>::deallocate", "type": "cpp", "path": "cpp\\memory\\allocator\\deallocate.html", "desc": "std::allocator<T>::std::allocator<T>::deallocate"}, {"name": "std::allocator<T>::std::allocator<T>::destroy", "type": "cpp", "path": "cpp\\memory\\allocator\\destroy.html", "desc": "std::allocator<T>::std::allocator<T>::destroy"}, {"name": "std::allocator<T>::std::allocator<T>::max_size", "type": "cpp", "path": "cpp\\memory\\allocator\\max_size.html", "desc": "std::allocator<T>::std::allocator<T>::max_size"}, {"name": "(std::allocator)operator==,!=(std::allocator)", "type": "cpp", "path": "cpp\\memory\\allocator\\operator_cmp.html", "desc": "(std::allocator)operator==,!=(std::allocator)"}, {"name": "std::allocator<T>::std::allocator<T>::~allocator", "type": "cpp", "path": "cpp\\memory\\allocator\\~allocator.html", "desc": "std::allocator<T>::std::allocator<T>::~allocator"}, {"name": "std::allocator_traits<Alloc>::std::allocator_traits<Alloc>::allocate", "type": "cpp", "path": "cpp\\memory\\allocator_traits\\allocate.html", "desc": "std::allocator_traits<Alloc>::std::allocator_traits<Alloc>::allocate"}, {"name": "std::allocator_traits<Alloc>::std::allocator_traits<Alloc>::allocate", "type": "cpp", "path": "cpp\\memory\\allocator_traits\\allocate_at_least.html", "desc": "std::allocator_traits<Alloc>::std::allocator_traits<Alloc>::allocate"}, {"name": "std::allocator_traits<Alloc>::std::allocator_traits<Alloc>::construct", "type": "cpp", "path": "cpp\\memory\\allocator_traits\\construct.html", "desc": "std::allocator_traits<Alloc>::std::allocator_traits<Alloc>::construct"}, {"name": "std::allocator_traits<Alloc>::std::allocator_traits<Alloc>::deallocate", "type": "cpp", "path": "cpp\\memory\\allocator_traits\\deallocate.html", "desc": "std::allocator_traits<Alloc>::std::allocator_traits<Alloc>::deallocate"}, {"name": "std::allocator_traits<Alloc>::std::allocator_traits<Alloc>::destroy", "type": "cpp", "path": "cpp\\memory\\allocator_traits\\destroy.html", "desc": "std::allocator_traits<Alloc>::std::allocator_traits<Alloc>::destroy"}, {"name": "std::allocator_traits<Alloc>::std::allocator_traits<Alloc>::max_size", "type": "cpp", "path": "cpp\\memory\\allocator_traits\\max_size.html", "desc": "std::allocator_traits<Alloc>::std::allocator_traits<Alloc>::max_size"}, {"name": "std::allocator_traits<Alloc>::std::allocator_traits<Alloc>::select_on_container_copy_construction", "type": "cpp", "path": "cpp\\memory\\allocator_traits\\select_on_container_copy_construction.html", "desc": "std::allocator_traits<Alloc>::std::allocator_traits<Alloc>::select_on_container_copy_construction"}, {"name": "std::auto_ptr<T>::std::auto_ptr<T>::auto_ptr", "type": "cpp", "path": "cpp\\memory\\auto_ptr\\auto_ptr.html", "desc": "std::auto_ptr<T>::std::auto_ptr<T>::auto_ptr"}, {"name": "std::auto_ptr<T>::std::auto_ptr<T>::get", "type": "cpp", "path": "cpp\\memory\\auto_ptr\\get.html", "desc": "std::auto_ptr<T>::std::auto_ptr<T>::get"}, {"name": "std::auto_ptr<T>:: std::auto_ptr<T>::std::auto_ptr<T>::operator*, std::auto_ptr<T>::operator->", "type": "cpp", "path": "cpp\\memory\\auto_ptr\\operator%2A.html", "desc": "std::auto_ptr<T>:: std::auto_ptr<T>::std::auto_ptr<T>::operator*, std::auto_ptr<T>::operator->"}, {"name": "std::auto_ptr<T>::std::auto_ptr<T>::operator=", "type": "cpp", "path": "cpp\\memory\\auto_ptr\\operator=.html", "desc": "std::auto_ptr<T>::std::auto_ptr<T>::operator="}, {"name": "std::auto_ptr<T>::std::auto_ptr<T>::operator auto_ptr<Y>", "type": "cpp", "path": "cpp\\memory\\auto_ptr\\operator_auto_ptr.html", "desc": "std::auto_ptr<T>::std::auto_ptr<T>::operator auto_ptr<Y>"}, {"name": "std::auto_ptr<T>::std::auto_ptr<T>::release", "type": "cpp", "path": "cpp\\memory\\auto_ptr\\release.html", "desc": "std::auto_ptr<T>::std::auto_ptr<T>::release"}, {"name": "std::auto_ptr<T>::std::auto_ptr<T>::reset", "type": "cpp", "path": "cpp\\memory\\auto_ptr\\reset.html", "desc": "std::auto_ptr<T>::std::auto_ptr<T>::reset"}, {"name": "std::auto_ptr<T>::std::auto_ptr<T>::~auto_ptr", "type": "cpp", "path": "cpp\\memory\\auto_ptr\\~auto_ptr.html", "desc": "std::auto_ptr<T>::std::auto_ptr<T>::~auto_ptr"}, {"name": "std::std::aligned_alloc", "type": "cpp", "path": "cpp\\memory\\c\\aligned_alloc.html", "desc": "std::std::aligned_alloc"}, {"name": "std::std::calloc", "type": "cpp", "path": "cpp\\memory\\c\\calloc.html", "desc": "std::std::calloc"}, {"name": "std::std::free", "type": "cpp", "path": "cpp\\memory\\c\\free.html", "desc": "std::std::free"}, {"name": "std::std::malloc", "type": "cpp", "path": "cpp\\memory\\c\\malloc.html", "desc": "std::std::malloc"}, {"name": "std::std::realloc", "type": "cpp", "path": "cpp\\memory\\c\\realloc.html", "desc": "std::std::realloc"}, {"name": "std::enable_shared_from_this<T>::std::enable_shared_from_this<T>::enable_shared_from_this", "type": "cpp", "path": "cpp\\memory\\enable_shared_from_this\\enable_shared_from_this.html", "desc": "std::enable_shared_from_this<T>::std::enable_shared_from_this<T>::enable_shared_from_this"}, {"name": "std::enable_shared_from_this<T>::std::enable_shared_from_this<T>::operator=", "type": "cpp", "path": "cpp\\memory\\enable_shared_from_this\\operator=.html", "desc": "std::enable_shared_from_this<T>::std::enable_shared_from_this<T>::operator="}, {"name": "std::enable_shared_from_this<T>::std::enable_shared_from_this<T>::shared_from_this", "type": "cpp", "path": "cpp\\memory\\enable_shared_from_this\\shared_from_this.html", "desc": "std::enable_shared_from_this<T>::std::enable_shared_from_this<T>::shared_from_this"}, {"name": "std::enable_shared_from_this<T>::std::enable_shared_from_this<T>::weak_from_this", "type": "cpp", "path": "cpp\\memory\\enable_shared_from_this\\weak_from_this.html", "desc": "std::enable_shared_from_this<T>::std::enable_shared_from_this<T>::weak_from_this"}, {"name": "std::enable_shared_from_this<T>::std::enable_shared_from_this<T>::~enable_shared_from_this", "type": "cpp", "path": "cpp\\memory\\enable_shared_from_this\\~enable_shared_from_this.html", "desc": "std::enable_shared_from_this<T>::std::enable_shared_from_this<T>::~enable_shared_from_this"}, {"name": "std::std::declare_no_pointers", "type": "cpp", "path": "cpp\\memory\\gc\\declare_no_pointers.html", "desc": "std::std::declare_no_pointers"}, {"name": "std::std::declare_reachable", "type": "cpp", "path": "cpp\\memory\\gc\\declare_reachable.html", "desc": "std::std::declare_reachable"}, {"name": "std::std::get_pointer_safety", "type": "cpp", "path": "cpp\\memory\\gc\\get_pointer_safety.html", "desc": "std::std::get_pointer_safety"}, {"name": "std::std::pointer_safety", "type": "cpp", "path": "cpp\\memory\\gc\\pointer_safety.html", "desc": "std::std::pointer_safety"}, {"name": "std::std::undeclare_no_pointers", "type": "cpp", "path": "cpp\\memory\\gc\\undeclare_no_pointers.html", "desc": "std::std::undeclare_no_pointers"}, {"name": "std::std::undeclare_reachable", "type": "cpp", "path": "cpp\\memory\\gc\\undeclare_reachable.html", "desc": "std::std::undeclare_reachable"}, {"name": "std::std::inout_ptr", "type": "cpp", "path": "cpp\\memory\\inout_ptr_t\\inout_ptr.html", "desc": "std::std::inout_ptr"}, {"name": "std::inout_ptr_t<Smart,Pointer,Args...>::std::inout_ptr_t<Smart,Pointer,Args...>::inout_ptr_t", "type": "cpp", "path": "cpp\\memory\\inout_ptr_t\\inout_ptr_t.html", "desc": "std::inout_ptr_t<Smart,Pointer,Args...>::std::inout_ptr_t<Smart,Pointer,Args...>::inout_ptr_t"}, {"name": "std::inout_ptr_t<Smart,Pointer,Args...>:: std::inout_ptr_t<Smart,Pointer,Args...>::std::inout_ptr_t<Smart,Pointer,Args...>::operator Pointer*, std::inout_ptr_t<Smart,Pointer,Args...>::operator void**", "type": "cpp", "path": "cpp\\memory\\inout_ptr_t\\operator_ptr.html", "desc": "std::inout_ptr_t<Smart,Pointer,Args...>:: std::inout_ptr_t<Smart,Pointer,Args...>::std::inout_ptr_t<Smart,Pointer,Args...>::operator Pointer*, std::inout_ptr_t<Smart,Pointer,Args...>::operator void**"}, {"name": "std::inout_ptr_t<Smart,Pointer,Args...>::std::inout_ptr_t<Smart,Pointer,Args...>::~inout_ptr_t", "type": "cpp", "path": "cpp\\memory\\inout_ptr_t\\~inout_ptr_t.html", "desc": "std::inout_ptr_t<Smart,Pointer,Args...>::std::inout_ptr_t<Smart,Pointer,Args...>::~inout_ptr_t"}, {"name": "std::pmr::memory_resource::std::pmr::memory_resource::allocate", "type": "cpp", "path": "cpp\\memory\\memory_resource\\allocate.html", "desc": "std::pmr::memory_resource::std::pmr::memory_resource::allocate"}, {"name": "std::pmr::memory_resource::std::pmr::memory_resource::deallocate", "type": "cpp", "path": "cpp\\memory\\memory_resource\\deallocate.html", "desc": "std::pmr::memory_resource::std::pmr::memory_resource::deallocate"}, {"name": "std::pmr::memory_resource::std::pmr::memory_resource::do_allocate", "type": "cpp", "path": "cpp\\memory\\memory_resource\\do_allocate.html", "desc": "std::pmr::memory_resource::std::pmr::memory_resource::do_allocate"}, {"name": "std::pmr::memory_resource::std::pmr::memory_resource::do_deallocate", "type": "cpp", "path": "cpp\\memory\\memory_resource\\do_deallocate.html", "desc": "std::pmr::memory_resource::std::pmr::memory_resource::do_deallocate"}, {"name": "std::pmr::memory_resource::std::pmr::memory_resource::do_is_equal", "type": "cpp", "path": "cpp\\memory\\memory_resource\\do_is_equal.html", "desc": "std::pmr::memory_resource::std::pmr::memory_resource::do_is_equal"}, {"name": "std::pmr::memory_resource::std::pmr::memory_resource::is_equal", "type": "cpp", "path": "cpp\\memory\\memory_resource\\is_equal.html", "desc": "std::pmr::memory_resource::std::pmr::memory_resource::is_equal"}, {"name": "std::pmr::memory_resource::std::pmr::memory_resource::memory_resource", "type": "cpp", "path": "cpp\\memory\\memory_resource\\memory_resource.html", "desc": "std::pmr::memory_resource::std::pmr::memory_resource::memory_resource"}, {"name": "std::pmr:: std::pmr::std::pmr::operator==, std::pmr::operator!=", "type": "cpp", "path": "cpp\\memory\\memory_resource\\operator_eq.html", "desc": "std::pmr:: std::pmr::std::pmr::operator==, std::pmr::operator!="}, {"name": "std::pmr::monotonic_buffer_resource::std::pmr::monotonic_buffer_resource::do_allocate", "type": "cpp", "path": "cpp\\memory\\monotonic_buffer_resource\\do_allocate.html", "desc": "std::pmr::monotonic_buffer_resource::std::pmr::monotonic_buffer_resource::do_allocate"}, {"name": "std::pmr::monotonic_buffer_resource::std::pmr::monotonic_buffer_resource::do_deallocate", "type": "cpp", "path": "cpp\\memory\\monotonic_buffer_resource\\do_deallocate.html", "desc": "std::pmr::monotonic_buffer_resource::std::pmr::monotonic_buffer_resource::do_deallocate"}, {"name": "std::pmr::monotonic_buffer_resource::std::pmr::monotonic_buffer_resource::do_is_equal", "type": "cpp", "path": "cpp\\memory\\monotonic_buffer_resource\\do_is_equal.html", "desc": "std::pmr::monotonic_buffer_resource::std::pmr::monotonic_buffer_resource::do_is_equal"}, {"name": "std::pmr::monotonic_buffer_resource::std::pmr::monotonic_buffer_resource::monotonic_buffer_resource", "type": "cpp", "path": "cpp\\memory\\monotonic_buffer_resource\\monotonic_buffer_resource.html", "desc": "std::pmr::monotonic_buffer_resource::std::pmr::monotonic_buffer_resource::monotonic_buffer_resource"}, {"name": "std::pmr::monotonic_buffer_resource::std::pmr::monotonic_buffer_resource::release", "type": "cpp", "path": "cpp\\memory\\monotonic_buffer_resource\\release.html", "desc": "std::pmr::monotonic_buffer_resource::std::pmr::monotonic_buffer_resource::release"}, {"name": "std::pmr::monotonic_buffer_resource::std::pmr::monotonic_buffer_resource::upstream_resource", "type": "cpp", "path": "cpp\\memory\\monotonic_buffer_resource\\upstream_resource.html", "desc": "std::pmr::monotonic_buffer_resource::std::pmr::monotonic_buffer_resource::upstream_resource"}, {"name": "std::pmr::monotonic_buffer_resource::std::pmr::monotonic_buffer_resource::~monotonic_buffer_resource", "type": "cpp", "path": "cpp\\memory\\monotonic_buffer_resource\\~monotonic_buffer_resource.html", "desc": "std::pmr::monotonic_buffer_resource::std::pmr::monotonic_buffer_resource::~monotonic_buffer_resource"}, {"name": "std::std::align_val_t", "type": "cpp", "path": "cpp\\memory\\new\\align_val_t.html", "desc": "std::std::align_val_t"}, {"name": "std::std::bad_alloc", "type": "cpp", "path": "cpp\\memory\\new\\bad_alloc.html", "desc": "std::std::bad_alloc"}, {"name": "std::std::bad_array_new_length", "type": "cpp", "path": "cpp\\memory\\new\\bad_array_new_length.html", "desc": "std::std::bad_array_new_length"}, {"name": "std:: std::std::destroying_delete_t, std::destroying_delete", "type": "cpp", "path": "cpp\\memory\\new\\destroying_delete.html", "desc": "std:: std::std::destroying_delete_t, std::destroying_delete"}, {"name": "std:: std::std::destroying_delete_t, std::destroying_delete", "type": "cpp", "path": "cpp\\memory\\new\\destroying_delete_t.html", "desc": "std:: std::std::destroying_delete_t, std::destroying_delete"}, {"name": "std::std::get_new_handler", "type": "cpp", "path": "cpp\\memory\\new\\get_new_handler.html", "desc": "std::std::get_new_handler"}, {"name": "std::std::new_handler", "type": "cpp", "path": "cpp\\memory\\new\\new_handler.html", "desc": "std::std::new_handler"}, {"name": "std::std::nothrow", "type": "cpp", "path": "cpp\\memory\\new\\nothrow.html", "desc": "std::std::nothrow"}, {"name": "std::std::nothrow_t", "type": "cpp", "path": "cpp\\memory\\new\\nothrow_t.html", "desc": "std::std::nothrow_t"}, {"name": "operator , operatoroperator delete, operator delete[]", "type": "cpp", "path": "cpp\\memory\\new\\operator_delete.html", "desc": "operator , operatoroperator delete, operator delete[]"}, {"name": "operator , operatoroperator new, operator new[]", "type": "cpp", "path": "cpp\\memory\\new\\operator_new.html", "desc": "operator , operatoroperator new, operator new[]"}, {"name": "std::std::set_new_handler", "type": "cpp", "path": "cpp\\memory\\new\\set_new_handler.html", "desc": "std::std::set_new_handler"}, {"name": "std::out_ptr_t<Smart,Pointer,Args...>:: std::out_ptr_t<Smart,Pointer,Args...>::std::out_ptr_t<Smart,Pointer,Args...>::operator Pointer*, std::out_ptr_t<Smart,Pointer,Args...>::operator void**", "type": "cpp", "path": "cpp\\memory\\out_ptr_t\\operator_ptr.html", "desc": "std::out_ptr_t<Smart,Pointer,Args...>:: std::out_ptr_t<Smart,Pointer,Args...>::std::out_ptr_t<Smart,Pointer,Args...>::operator Pointer*, std::out_ptr_t<Smart,Pointer,Args...>::operator void**"}, {"name": "std::std::out_ptr", "type": "cpp", "path": "cpp\\memory\\out_ptr_t\\out_ptr.html", "desc": "std::std::out_ptr"}, {"name": "std::out_ptr_t<Smart,Pointer,Args...>::std::out_ptr_t<Smart,Pointer,Args...>::out_ptr_t", "type": "cpp", "path": "cpp\\memory\\out_ptr_t\\out_ptr_t.html", "desc": "std::out_ptr_t<Smart,Pointer,Args...>::std::out_ptr_t<Smart,Pointer,Args...>::out_ptr_t"}, {"name": "std::out_ptr_t<Smart,Pointer,Args...>::std::out_ptr_t<Smart,Pointer,Args...>::~out_ptr_t", "type": "cpp", "path": "cpp\\memory\\out_ptr_t\\~out_ptr_t.html", "desc": "std::out_ptr_t<Smart,Pointer,Args...>::std::out_ptr_t<Smart,Pointer,Args...>::~out_ptr_t"}, {"name": "std::pointer_traits<Ptr>::std::pointer_traits<Ptr>::pointer_to", "type": "cpp", "path": "cpp\\memory\\pointer_traits\\pointer_to.html", "desc": "std::pointer_traits<Ptr>::std::pointer_traits<Ptr>::pointer_to"}, {"name": "std::pointer_traits<Ptr>::std::pointer_traits<Ptr>::to_address", "type": "cpp", "path": "cpp\\memory\\pointer_traits\\to_address.html", "desc": "std::pointer_traits<Ptr>::std::pointer_traits<Ptr>::to_address"}, {"name": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::allocate", "type": "cpp", "path": "cpp\\memory\\polymorphic_allocator\\allocate.html", "desc": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::allocate"}, {"name": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::allocate_bytes", "type": "cpp", "path": "cpp\\memory\\polymorphic_allocator\\allocate_bytes.html", "desc": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::allocate_bytes"}, {"name": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::allocate_object", "type": "cpp", "path": "cpp\\memory\\polymorphic_allocator\\allocate_object.html", "desc": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::allocate_object"}, {"name": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::construct", "type": "cpp", "path": "cpp\\memory\\polymorphic_allocator\\construct.html", "desc": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::construct"}, {"name": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::deallocate", "type": "cpp", "path": "cpp\\memory\\polymorphic_allocator\\deallocate.html", "desc": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::deallocate"}, {"name": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::deallocate_bytes", "type": "cpp", "path": "cpp\\memory\\polymorphic_allocator\\deallocate_bytes.html", "desc": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::deallocate_bytes"}, {"name": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::deallocate_object", "type": "cpp", "path": "cpp\\memory\\polymorphic_allocator\\deallocate_object.html", "desc": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::deallocate_object"}, {"name": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::deallocate_object", "type": "cpp", "path": "cpp\\memory\\polymorphic_allocator\\delete_object.html", "desc": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::deallocate_object"}, {"name": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::destroy", "type": "cpp", "path": "cpp\\memory\\polymorphic_allocator\\destroy.html", "desc": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::destroy"}, {"name": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::new_object", "type": "cpp", "path": "cpp\\memory\\polymorphic_allocator\\new_object.html", "desc": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::new_object"}, {"name": "std::pmr:: std::pmr::std::pmr::operator==, std::pmr::operator!=", "type": "cpp", "path": "cpp\\memory\\polymorphic_allocator\\operator_eq.html", "desc": "std::pmr:: std::pmr::std::pmr::operator==, std::pmr::operator!="}, {"name": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::polymorphic_allocator", "type": "cpp", "path": "cpp\\memory\\polymorphic_allocator\\polymorphic_allocator.html", "desc": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::polymorphic_allocator"}, {"name": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::resource", "type": "cpp", "path": "cpp\\memory\\polymorphic_allocator\\resource.html", "desc": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>::resource"}, {"name": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>:: select_on_container_copy_construction", "type": "cpp", "path": "cpp\\memory\\polymorphic_allocator\\select_on_container_copy_construction.html", "desc": "std::pmr::polymorphic_allocator<T>::std::pmr::polymorphic_allocator<T>:: select_on_container_copy_construction"}, {"name": "std::ranges::std::ranges::construct_at", "type": "cpp", "path": "cpp\\memory\\ranges\\construct_at.html", "desc": "std::ranges::std::ranges::construct_at"}, {"name": "std::ranges::std::ranges::destroy", "type": "cpp", "path": "cpp\\memory\\ranges\\destroy.html", "desc": "std::ranges::std::ranges::destroy"}, {"name": "std::ranges::std::ranges::destroy_at", "type": "cpp", "path": "cpp\\memory\\ranges\\destroy_at.html", "desc": "std::ranges::std::ranges::destroy_at"}, {"name": "std::ranges::std::ranges::destroy_n", "type": "cpp", "path": "cpp\\memory\\ranges\\destroy_n.html", "desc": "std::ranges::std::ranges::destroy_n"}, {"name": "no-throw-input-iterator, no-throw-forward-iterator, no-throw-sentinel-for, no-throw-input-range, no-throw-forward-range", "type": "cpp", "path": "cpp\\memory\\ranges\\nothrow_concepts.html", "desc": "no-throw-input-iterator, no-throw-forward-iterator, no-throw-sentinel-for, no-throw-input-range, no-throw-forward-range"}, {"name": "std::ranges:: std::ranges::std::ranges::uninitialized_copy, std::ranges::uninitialized_copy_result", "type": "cpp", "path": "cpp\\memory\\ranges\\uninitialized_copy.html", "desc": "std::ranges:: std::ranges::std::ranges::uninitialized_copy, std::ranges::uninitialized_copy_result"}, {"name": "std::ranges:: std::ranges::std::ranges::uninitialized_copy_n, std::ranges::uninitialized_copy_n_result", "type": "cpp", "path": "cpp\\memory\\ranges\\uninitialized_copy_n.html", "desc": "std::ranges:: std::ranges::std::ranges::uninitialized_copy_n, std::ranges::uninitialized_copy_n_result"}, {"name": "std::ranges::std::ranges::uninitialized_default_construct", "type": "cpp", "path": "cpp\\memory\\ranges\\uninitialized_default_construct.html", "desc": "std::ranges::std::ranges::uninitialized_default_construct"}, {"name": "std::ranges::std::ranges::uninitialized_default_construct_n", "type": "cpp", "path": "cpp\\memory\\ranges\\uninitialized_default_construct_n.html", "desc": "std::ranges::std::ranges::uninitialized_default_construct_n"}, {"name": "std::ranges::std::ranges::uninitialized_fill", "type": "cpp", "path": "cpp\\memory\\ranges\\uninitialized_fill.html", "desc": "std::ranges::std::ranges::uninitialized_fill"}, {"name": "std::ranges::std::ranges::uninitialized_fill_n", "type": "cpp", "path": "cpp\\memory\\ranges\\uninitialized_fill_n.html", "desc": "std::ranges::std::ranges::uninitialized_fill_n"}, {"name": "std::ranges:: std::ranges::std::ranges::uninitialized_move, std::ranges::uninitialized_move_result", "type": "cpp", "path": "cpp\\memory\\ranges\\uninitialized_move.html", "desc": "std::ranges:: std::ranges::std::ranges::uninitialized_move, std::ranges::uninitialized_move_result"}, {"name": "std::ranges:: std::ranges::std::ranges::uninitialized_move_n, std::ranges::uninitialized_move_n_result", "type": "cpp", "path": "cpp\\memory\\ranges\\uninitialized_move_n.html", "desc": "std::ranges:: std::ranges::std::ranges::uninitialized_move_n, std::ranges::uninitialized_move_n_result"}, {"name": "std::ranges::std::ranges::uninitialized_value_construct", "type": "cpp", "path": "cpp\\memory\\ranges\\uninitialized_value_construct.html", "desc": "std::ranges::std::ranges::uninitialized_value_construct"}, {"name": "std::ranges::std::ranges::uninitialized_value_construct_n", "type": "cpp", "path": "cpp\\memory\\ranges\\uninitialized_value_construct_n.html", "desc": "std::ranges::std::ranges::uninitialized_value_construct_n"}, {"name": "std::raw_storage_iterator<OutputIt,T>::std::raw_storage_iterator<OutputIt,T>::base", "type": "cpp", "path": "cpp\\memory\\raw_storage_iterator\\base.html", "desc": "std::raw_storage_iterator<OutputIt,T>::std::raw_storage_iterator<OutputIt,T>::base"}, {"name": "std::raw_storage_iterator<OutputIt,T>::std::raw_storage_iterator<OutputIt,T>::operator*", "type": "cpp", "path": "cpp\\memory\\raw_storage_iterator\\operator%2A.html", "desc": "std::raw_storage_iterator<OutputIt,T>::std::raw_storage_iterator<OutputIt,T>::operator*"}, {"name": "std::raw_storage_iterator<OutputIt,T>::std::raw_storage_iterator<OutputIt,T>::operator=", "type": "cpp", "path": "cpp\\memory\\raw_storage_iterator\\operator=.html", "desc": "std::raw_storage_iterator<OutputIt,T>::std::raw_storage_iterator<OutputIt,T>::operator="}, {"name": "std::raw_storage_iterator<OutputIt,T>:: (int)std::raw_storage_iterator<OutputIt,T>::operator++, operator++(int)", "type": "cpp", "path": "cpp\\memory\\raw_storage_iterator\\operator_arith.html", "desc": "std::raw_storage_iterator<OutputIt,T>:: (int)std::raw_storage_iterator<OutputIt,T>::operator++, operator++(int)"}, {"name": "std::raw_storage_iterator<OutputIt,T>::std::raw_storage_iterator<OutputIt,T>::raw_storage_iterator", "type": "cpp", "path": "cpp\\memory\\raw_storage_iterator\\raw_storage_iterator.html", "desc": "std::raw_storage_iterator<OutputIt,T>::std::raw_storage_iterator<OutputIt,T>::raw_storage_iterator"}, {"name": "std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::allocate", "type": "cpp", "path": "cpp\\memory\\scoped_allocator_adaptor\\allocate.html", "desc": "std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::allocate"}, {"name": "std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::construct", "type": "cpp", "path": "cpp\\memory\\scoped_allocator_adaptor\\construct.html", "desc": "std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::construct"}, {"name": "std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::deallocate", "type": "cpp", "path": "cpp\\memory\\scoped_allocator_adaptor\\deallocate.html", "desc": "std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::deallocate"}, {"name": "std::scoped_allocator_adaptor \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\memory\\scoped_allocator_adaptor\\deduction_guides.html", "desc": "std::scoped_allocator_adaptor \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::destroy", "type": "cpp", "path": "cpp\\memory\\scoped_allocator_adaptor\\destroy.html", "desc": "std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::destroy"}, {"name": "std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::inner_allocator", "type": "cpp", "path": "cpp\\memory\\scoped_allocator_adaptor\\inner_allocator.html", "desc": "std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::inner_allocator"}, {"name": "std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::max_size", "type": "cpp", "path": "cpp\\memory\\scoped_allocator_adaptor\\max_size.html", "desc": "std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::max_size"}, {"name": "std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::operator=", "type": "cpp", "path": "cpp\\memory\\scoped_allocator_adaptor\\operator=.html", "desc": "std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::operator="}, {"name": "operator==,!=(std::scoped_allocator_adaptor)", "type": "cpp", "path": "cpp\\memory\\scoped_allocator_adaptor\\operator_cmp.html", "desc": "operator==,!=(std::scoped_allocator_adaptor)"}, {"name": "std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::outer_allocator", "type": "cpp", "path": "cpp\\memory\\scoped_allocator_adaptor\\outer_allocator.html", "desc": "std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::outer_allocator"}, {"name": "std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>:: scoped_allocator_adaptor", "type": "cpp", "path": "cpp\\memory\\scoped_allocator_adaptor\\scoped_allocator_adaptor.html", "desc": "std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>:: scoped_allocator_adaptor"}, {"name": "std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>:: select_on_container_copy_construction", "type": "cpp", "path": "cpp\\memory\\scoped_allocator_adaptor\\select_on_container_copy_construction.html", "desc": "std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>:: select_on_container_copy_construction"}, {"name": "std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>:: ~scoped_allocator_adaptor", "type": "cpp", "path": "cpp\\memory\\scoped_allocator_adaptor\\~scoped_allocator_adaptor.html", "desc": "std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>:: ~scoped_allocator_adaptor"}, {"name": "std:: std::std::allocate_shared, std::allocate_shared_for_overwrite", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\allocate_shared.html", "desc": "std:: std::std::allocate_shared, std::allocate_shared_for_overwrite"}, {"name": "std:: <std::shared_ptr>std::atomic_...<std::shared_ptr>", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\atomic.html", "desc": "std:: <std::shared_ptr>std::atomic_...<std::shared_ptr>"}, {"name": "std::std::atomic<std::shared_ptr>", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\atomic2.html", "desc": "std::std::atomic<std::shared_ptr>"}, {"name": "std::shared_ptr \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\deduction_guides.html", "desc": "std::shared_ptr \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::shared_ptr<T>::std::shared_ptr<T>::get", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\get.html", "desc": "std::shared_ptr<T>::std::shared_ptr<T>::get"}, {"name": "std::std::get_deleter", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\get_deleter.html", "desc": "std::std::get_deleter"}, {"name": "std::std::hash(std::shared_ptr)", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\hash.html", "desc": "std::std::hash(std::shared_ptr)"}, {"name": "std:: std::std::make_shared, std::make_shared_for_overwrite", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\make_shared.html", "desc": "std:: std::std::make_shared, std::make_shared_for_overwrite"}, {"name": "std::shared_ptr<T>:: std::shared_ptr<T>::std::shared_ptr<T>::operator*, std::shared_ptr<T>::operator->", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\operator%2A.html", "desc": "std::shared_ptr<T>:: std::shared_ptr<T>::std::shared_ptr<T>::operator*, std::shared_ptr<T>::operator->"}, {"name": "std::shared_ptr<T>::std::shared_ptr<T>::operator=", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\operator=.html", "desc": "std::shared_ptr<T>::std::shared_ptr<T>::operator="}, {"name": "std::shared_ptr<T>::std::shared_ptr<T>::operator[]", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\operator_at.html", "desc": "std::shared_ptr<T>::std::shared_ptr<T>::operator[]"}, {"name": "std::shared_ptr<T>::std::shared_ptr<T>::operator bool", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\operator_bool.html", "desc": "std::shared_ptr<T>::std::shared_ptr<T>::operator bool"}, {"name": "operator==, !=, <, <=, >, >=, <=> (std::shared_ptr)", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\operator_cmp.html", "desc": "operator==, !=, <, <=, >, >=, <=> (std::shared_ptr)"}, {"name": "std::shared_ptr<T>::std::shared_ptr<T>::operator<<", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\operator_ltlt.html", "desc": "std::shared_ptr<T>::std::shared_ptr<T>::operator<<"}, {"name": "std::shared_ptr<T>::std::shared_ptr<T>::owner_before", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\owner_before.html", "desc": "std::shared_ptr<T>::std::shared_ptr<T>::owner_before"}, {"name": "std:: std:: std:: std::std::static_pointer_cast, std::dynamic_pointer_cast, std::const_pointer_cast, std::reinterpret_pointer_cast", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\pointer_cast.html", "desc": "std:: std:: std:: std::std::static_pointer_cast, std::dynamic_pointer_cast, std::const_pointer_cast, std::reinterpret_pointer_cast"}, {"name": "std::shared_ptr<T>::std::shared_ptr<T>::reset", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\reset.html", "desc": "std::shared_ptr<T>::std::shared_ptr<T>::reset"}, {"name": "std::shared_ptr<T>::std::shared_ptr<T>::shared_ptr", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\shared_ptr.html", "desc": "std::shared_ptr<T>::std::shared_ptr<T>::shared_ptr"}, {"name": "std::shared_ptr<T>::std::shared_ptr<T>::swap", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\swap.html", "desc": "std::shared_ptr<T>::std::shared_ptr<T>::swap"}, {"name": "std::std::swap(std::shared_ptr)", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\swap2.html", "desc": "std::std::swap(std::shared_ptr)"}, {"name": "std::shared_ptr<T>::std::shared_ptr<T>::unique", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\unique.html", "desc": "std::shared_ptr<T>::std::shared_ptr<T>::unique"}, {"name": "std::shared_ptr<T>::std::shared_ptr<T>::use_count", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\use_count.html", "desc": "std::shared_ptr<T>::std::shared_ptr<T>::use_count"}, {"name": "std::shared_ptr<T>::std::shared_ptr<T>::~shared_ptr", "type": "cpp", "path": "cpp\\memory\\shared_ptr\\~shared_ptr.html", "desc": "std::shared_ptr<T>::std::shared_ptr<T>::~shared_ptr"}, {"name": "std::pmr::synchronized_pool_resource::std::pmr::synchronized_pool_resource::do_allocate", "type": "cpp", "path": "cpp\\memory\\synchronized_pool_resource\\do_allocate.html", "desc": "std::pmr::synchronized_pool_resource::std::pmr::synchronized_pool_resource::do_allocate"}, {"name": "std::pmr::synchronized_pool_resource::std::pmr::synchronized_pool_resource::do_deallocate", "type": "cpp", "path": "cpp\\memory\\synchronized_pool_resource\\do_deallocate.html", "desc": "std::pmr::synchronized_pool_resource::std::pmr::synchronized_pool_resource::do_deallocate"}, {"name": "std::pmr::synchronized_pool_resource::std::pmr::synchronized_pool_resource::do_is_equal", "type": "cpp", "path": "cpp\\memory\\synchronized_pool_resource\\do_is_equal.html", "desc": "std::pmr::synchronized_pool_resource::std::pmr::synchronized_pool_resource::do_is_equal"}, {"name": "std::pmr::synchronized_pool_resource::std::pmr::synchronized_pool_resource::options", "type": "cpp", "path": "cpp\\memory\\synchronized_pool_resource\\options.html", "desc": "std::pmr::synchronized_pool_resource::std::pmr::synchronized_pool_resource::options"}, {"name": "std::pmr::synchronized_pool_resource::std::pmr::synchronized_pool_resource::release", "type": "cpp", "path": "cpp\\memory\\synchronized_pool_resource\\release.html", "desc": "std::pmr::synchronized_pool_resource::std::pmr::synchronized_pool_resource::release"}, {"name": "std::pmr::synchronized_pool_resource::std::pmr::synchronized_pool_resource::synchronized_pool_resource", "type": "cpp", "path": "cpp\\memory\\synchronized_pool_resource\\synchronized_pool_resource.html", "desc": "std::pmr::synchronized_pool_resource::std::pmr::synchronized_pool_resource::synchronized_pool_resource"}, {"name": "std::pmr::synchronized_pool_resource::std::pmr::synchronized_pool_resource::upstream_resource", "type": "cpp", "path": "cpp\\memory\\synchronized_pool_resource\\upstream_resource.html", "desc": "std::pmr::synchronized_pool_resource::std::pmr::synchronized_pool_resource::upstream_resource"}, {"name": "std::pmr::synchronized_pool_resource::std::pmr::synchronized_pool_resource::~synchronized_pool_resource", "type": "cpp", "path": "cpp\\memory\\synchronized_pool_resource\\~synchronized_pool_resource.html", "desc": "std::pmr::synchronized_pool_resource::std::pmr::synchronized_pool_resource::~synchronized_pool_resource"}, {"name": "std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::get", "type": "cpp", "path": "cpp\\memory\\unique_ptr\\get.html", "desc": "std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::get"}, {"name": "std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::get_deleter", "type": "cpp", "path": "cpp\\memory\\unique_ptr\\get_deleter.html", "desc": "std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::get_deleter"}, {"name": "std::std::hash<std::unique_ptr>", "type": "cpp", "path": "cpp\\memory\\unique_ptr\\hash.html", "desc": "std::std::hash<std::unique_ptr>"}, {"name": "std:: std::std::make_unique, std::make_unique_for_overwrite", "type": "cpp", "path": "cpp\\memory\\unique_ptr\\make_unique.html", "desc": "std:: std::std::make_unique, std::make_unique_for_overwrite"}, {"name": "std::unique_ptr<T,Deleter>:: std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::operator*, std::unique_ptr<T,Deleter>::operator->", "type": "cpp", "path": "cpp\\memory\\unique_ptr\\operator%2A.html", "desc": "std::unique_ptr<T,Deleter>:: std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::operator*, std::unique_ptr<T,Deleter>::operator->"}, {"name": "std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::operator=", "type": "cpp", "path": "cpp\\memory\\unique_ptr\\operator=.html", "desc": "std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::operator="}, {"name": "std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::operator[]", "type": "cpp", "path": "cpp\\memory\\unique_ptr\\operator_at.html", "desc": "std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::operator[]"}, {"name": "std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::operator bool", "type": "cpp", "path": "cpp\\memory\\unique_ptr\\operator_bool.html", "desc": "std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::operator bool"}, {"name": "operator==,!=,<,<=,>,>=,<=>(std::unique_ptr)", "type": "cpp", "path": "cpp\\memory\\unique_ptr\\operator_cmp.html", "desc": "operator==,!=,<,<=,>,>=,<=>(std::unique_ptr)"}, {"name": "std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::operator<<", "type": "cpp", "path": "cpp\\memory\\unique_ptr\\operator_ltlt.html", "desc": "std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::operator<<"}, {"name": "std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::release", "type": "cpp", "path": "cpp\\memory\\unique_ptr\\release.html", "desc": "std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::release"}, {"name": "std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::reset", "type": "cpp", "path": "cpp\\memory\\unique_ptr\\reset.html", "desc": "std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::reset"}, {"name": "std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::swap", "type": "cpp", "path": "cpp\\memory\\unique_ptr\\swap.html", "desc": "std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::swap"}, {"name": "std::std::swap(std::unique_ptr)", "type": "cpp", "path": "cpp\\memory\\unique_ptr\\swap2.html", "desc": "std::std::swap(std::unique_ptr)"}, {"name": "std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::unique_ptr", "type": "cpp", "path": "cpp\\memory\\unique_ptr\\unique_ptr.html", "desc": "std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::unique_ptr"}, {"name": "std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::~unique_ptr", "type": "cpp", "path": "cpp\\memory\\unique_ptr\\~unique_ptr.html", "desc": "std::unique_ptr<T,Deleter>::std::unique_ptr<T,Deleter>::~unique_ptr"}, {"name": "std::pmr::unsynchronized_pool_resource::std::pmr::unsynchronized_pool_resource::do_allocate", "type": "cpp", "path": "cpp\\memory\\unsynchronized_pool_resource\\do_allocate.html", "desc": "std::pmr::unsynchronized_pool_resource::std::pmr::unsynchronized_pool_resource::do_allocate"}, {"name": "std::pmr::unsynchronized_pool_resource::std::pmr::unsynchronized_pool_resource::do_deallocate", "type": "cpp", "path": "cpp\\memory\\unsynchronized_pool_resource\\do_deallocate.html", "desc": "std::pmr::unsynchronized_pool_resource::std::pmr::unsynchronized_pool_resource::do_deallocate"}, {"name": "std::pmr::unsynchronized_pool_resource::std::pmr::unsynchronized_pool_resource::do_is_equal", "type": "cpp", "path": "cpp\\memory\\unsynchronized_pool_resource\\do_is_equal.html", "desc": "std::pmr::unsynchronized_pool_resource::std::pmr::unsynchronized_pool_resource::do_is_equal"}, {"name": "std::pmr::unsynchronized_pool_resource::std::pmr::unsynchronized_pool_resource::options", "type": "cpp", "path": "cpp\\memory\\unsynchronized_pool_resource\\options.html", "desc": "std::pmr::unsynchronized_pool_resource::std::pmr::unsynchronized_pool_resource::options"}, {"name": "std::pmr::unsynchronized_pool_resource::std::pmr::unsynchronized_pool_resource::release", "type": "cpp", "path": "cpp\\memory\\unsynchronized_pool_resource\\release.html", "desc": "std::pmr::unsynchronized_pool_resource::std::pmr::unsynchronized_pool_resource::release"}, {"name": "std::pmr::unsynchronized_pool_resource::std::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource", "type": "cpp", "path": "cpp\\memory\\unsynchronized_pool_resource\\unsynchronized_pool_resource.html", "desc": "std::pmr::unsynchronized_pool_resource::std::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource"}, {"name": "std::pmr::unsynchronized_pool_resource::std::pmr::unsynchronized_pool_resource::upstream_resource", "type": "cpp", "path": "cpp\\memory\\unsynchronized_pool_resource\\upstream_resource.html", "desc": "std::pmr::unsynchronized_pool_resource::std::pmr::unsynchronized_pool_resource::upstream_resource"}, {"name": "std::pmr::unsynchronized_pool_resource::std::pmr::unsynchronized_pool_resource::~unsynchronized_pool_resource", "type": "cpp", "path": "cpp\\memory\\unsynchronized_pool_resource\\~unsynchronized_pool_resource.html", "desc": "std::pmr::unsynchronized_pool_resource::std::pmr::unsynchronized_pool_resource::~unsynchronized_pool_resource"}, {"name": "std::std::atomic(std::weak_ptr)", "type": "cpp", "path": "cpp\\memory\\weak_ptr\\atomic2.html", "desc": "std::std::atomic(std::weak_ptr)"}, {"name": "std::weak_ptr \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\memory\\weak_ptr\\deduction_guides.html", "desc": "std::weak_ptr \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::weak_ptr<T>::std::weak_ptr<T>::expired", "type": "cpp", "path": "cpp\\memory\\weak_ptr\\expired.html", "desc": "std::weak_ptr<T>::std::weak_ptr<T>::expired"}, {"name": "std::weak_ptr<T>::std::weak_ptr<T>::lock", "type": "cpp", "path": "cpp\\memory\\weak_ptr\\lock.html", "desc": "std::weak_ptr<T>::std::weak_ptr<T>::lock"}, {"name": "std::weak_ptr<T>::std::weak_ptr<T>::operator=", "type": "cpp", "path": "cpp\\memory\\weak_ptr\\operator=.html", "desc": "std::weak_ptr<T>::std::weak_ptr<T>::operator="}, {"name": "std::weak_ptr<T>::std::weak_ptr<T>::owner_before", "type": "cpp", "path": "cpp\\memory\\weak_ptr\\owner_before.html", "desc": "std::weak_ptr<T>::std::weak_ptr<T>::owner_before"}, {"name": "std::weak_ptr<T>::std::weak_ptr<T>::reset", "type": "cpp", "path": "cpp\\memory\\weak_ptr\\reset.html", "desc": "std::weak_ptr<T>::std::weak_ptr<T>::reset"}, {"name": "std::weak_ptr<T>::std::weak_ptr<T>::swap", "type": "cpp", "path": "cpp\\memory\\weak_ptr\\swap.html", "desc": "std::weak_ptr<T>::std::weak_ptr<T>::swap"}, {"name": "std::std::swap(std::weak_ptr)", "type": "cpp", "path": "cpp\\memory\\weak_ptr\\swap2.html", "desc": "std::std::swap(std::weak_ptr)"}, {"name": "std::weak_ptr<T>::std::weak_ptr<T>::use_count", "type": "cpp", "path": "cpp\\memory\\weak_ptr\\use_count.html", "desc": "std::weak_ptr<T>::std::weak_ptr<T>::use_count"}, {"name": "std::weak_ptr<T>::std::weak_ptr<T>::weak_ptr", "type": "cpp", "path": "cpp\\memory\\weak_ptr\\weak_ptr.html", "desc": "std::weak_ptr<T>::std::weak_ptr<T>::weak_ptr"}, {"name": "std::weak_ptr<T>::std::weak_ptr<T>::~weak_ptr", "type": "cpp", "path": "cpp\\memory\\weak_ptr\\~weak_ptr.html", "desc": "std::weak_ptr<T>::std::weak_ptr<T>::~weak_ptr"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5206\u914d\u5668 (Allocator)C++ \u5177\u540d\u8981\u6c42\uff1a\u5206\u914d\u5668 (Allocator)", "type": "cpp", "path": "cpp\\named_req\\Allocator.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5206\u914d\u5668 (Allocator)C++ \u5177\u540d\u8981\u6c42\uff1a\u5206\u914d\u5668 (Allocator)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u77e5\u5206\u914d\u5668\u5bb9\u5668 (AllocatorAwareContainer)C++ \u5177\u540d\u8981\u6c42\uff1a\u77e5\u5206\u914d\u5668\u5bb9\u5668 (AllocatorAwareContainer)", "type": "cpp", "path": "cpp\\named_req\\AllocatorAwareContainer.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u77e5\u5206\u914d\u5668\u5bb9\u5668 (AllocatorAwareContainer)C++ \u5177\u540d\u8981\u6c42\uff1a\u77e5\u5206\u914d\u5668\u5bb9\u5668 (AllocatorAwareContainer)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5173\u8054\u5bb9\u5668 (AssociativeContainer)C++ \u5177\u540d\u8981\u6c42\uff1a\u5173\u8054\u5bb9\u5668 (AssociativeContainer)", "type": "cpp", "path": "cpp\\named_req\\AssociativeContainer.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5173\u8054\u5bb9\u5668 (AssociativeContainer)C++ \u5177\u540d\u8981\u6c42\uff1a\u5173\u8054\u5bb9\u5668 (AssociativeContainer)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u57fa\u672c\u683c\u5f0f\u5316\u5668 (BasicFormatter) (C++20 \u8d77)C++ \u5177\u540d\u8981\u6c42\uff1a\u57fa\u672c\u683c\u5f0f\u5316\u5668 (BasicFormatter) (C++20 \u8d77)", "type": "cpp", "path": "cpp\\named_req\\BasicFormatter.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u57fa\u672c\u683c\u5f0f\u5316\u5668 (BasicFormatter) (C++20 \u8d77)C++ \u5177\u540d\u8981\u6c42\uff1a\u57fa\u672c\u683c\u5f0f\u5316\u5668 (BasicFormatter) (C++20 \u8d77)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u57fa\u672c\u53ef\u9501\u5b9a (BasicLockable)C++ \u5177\u540d\u8981\u6c42\uff1a\u57fa\u672c\u53ef\u9501\u5b9a (BasicLockable)", "type": "cpp", "path": "cpp\\named_req\\BasicLockable.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u57fa\u672c\u53ef\u9501\u5b9a (BasicLockable)C++ \u5177\u540d\u8981\u6c42\uff1a\u57fa\u672c\u53ef\u9501\u5b9a (BasicLockable)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u8001\u5f0f\u53cc\u5411\u8fed\u4ee3\u5668 (LegacyBidirectionalIterator)C++ \u5177\u540d\u8981\u6c42\uff1a\u8001\u5f0f\u53cc\u5411\u8fed\u4ee3\u5668 (LegacyBidirectionalIterator)", "type": "cpp", "path": "cpp\\named_req\\BidirectionalIterator.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u8001\u5f0f\u53cc\u5411\u8fed\u4ee3\u5668 (LegacyBidirectionalIterator)C++ \u5177\u540d\u8981\u6c42\uff1a\u8001\u5f0f\u53cc\u5411\u8fed\u4ee3\u5668 (LegacyBidirectionalIterator)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u4e8c\u5143\u8c13\u8bcd (BinaryPredicate)C++ \u5177\u540d\u8981\u6c42\uff1a\u4e8c\u5143\u8c13\u8bcd (BinaryPredicate)", "type": "cpp", "path": "cpp\\named_req\\BinaryPredicate.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u4e8c\u5143\u8c13\u8bcd (BinaryPredicate)C++ \u5177\u540d\u8981\u6c42\uff1a\u4e8c\u5143\u8c13\u8bcd (BinaryPredicate)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u4e8c\u5143\u7c7b\u578b\u7279\u6027 (BinaryTypeTrait)C++ \u5177\u540d\u8981\u6c42\uff1a\u4e8c\u5143\u7c7b\u578b\u7279\u6027 (BinaryTypeTrait)", "type": "cpp", "path": "cpp\\named_req\\BinaryTypeTrait.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u4e8c\u5143\u7c7b\u578b\u7279\u6027 (BinaryTypeTrait)C++ \u5177\u540d\u8981\u6c42\uff1a\u4e8c\u5143\u7c7b\u578b\u7279\u6027 (BinaryTypeTrait)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u4f4d\u63a9\u7801\u7c7b\u578b (BitmaskType)C++ \u5177\u540d\u8981\u6c42\uff1a\u4f4d\u63a9\u7801\u7c7b\u578b (BitmaskType)", "type": "cpp", "path": "cpp\\named_req\\BitmaskType.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u4f4d\u63a9\u7801\u7c7b\u578b (BitmaskType)C++ \u5177\u540d\u8981\u6c42\uff1a\u4f4d\u63a9\u7801\u7c7b\u578b (BitmaskType)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u8c03\u7528 (Callable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u8c03\u7528 (Callable)", "type": "cpp", "path": "cpp\\named_req\\Callable.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u8c03\u7528 (Callable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u8c03\u7528 (Callable)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5b57\u7b26\u7279\u6027 (CharTraits)C++ \u5177\u540d\u8981\u6c42\uff1a\u5b57\u7b26\u7279\u6027 (CharTraits)", "type": "cpp", "path": "cpp\\named_req\\CharTraits.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5b57\u7b26\u7279\u6027 (CharTraits)C++ \u5177\u540d\u8981\u6c42\uff1a\u5b57\u7b26\u7279\u6027 (CharTraits)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u65f6\u949f (Clock)C++ \u5177\u540d\u8981\u6c42\uff1a\u65f6\u949f (Clock)", "type": "cpp", "path": "cpp\\named_req\\Clock.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u65f6\u949f (Clock)C++ \u5177\u540d\u8981\u6c42\uff1a\u65f6\u949f (Clock)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u6bd4\u8f83 (Compare)C++ \u5177\u540d\u8981\u6c42\uff1a\u6bd4\u8f83 (Compare)", "type": "cpp", "path": "cpp\\named_req\\Compare.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u6bd4\u8f83 (Compare)C++ \u5177\u540d\u8981\u6c42\uff1a\u6bd4\u8f83 (Compare)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5e38\u91cf\u8868\u8fbe\u5f0f\u8fed\u4ee3\u5668 (ConstexprIterator)C++ \u5177\u540d\u8981\u6c42\uff1a\u5e38\u91cf\u8868\u8fbe\u5f0f\u8fed\u4ee3\u5668 (ConstexprIterator)", "type": "cpp", "path": "cpp\\named_req\\ConstexprIterator.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5e38\u91cf\u8868\u8fbe\u5f0f\u8fed\u4ee3\u5668 (ConstexprIterator)C++ \u5177\u540d\u8981\u6c42\uff1a\u5e38\u91cf\u8868\u8fbe\u5f0f\u8fed\u4ee3\u5668 (ConstexprIterator)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5bb9\u5668 (Container)C++ \u5177\u540d\u8981\u6c42\uff1a\u5bb9\u5668 (Container)", "type": "cpp", "path": "cpp\\named_req\\Container.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5bb9\u5668 (Container)C++ \u5177\u540d\u8981\u6c42\uff1a\u5bb9\u5668 (Container)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u8fde\u7eed\u5bb9\u5668 (ContiguousContainer)C++ \u5177\u540d\u8981\u6c42\uff1a\u8fde\u7eed\u5bb9\u5668 (ContiguousContainer)", "type": "cpp", "path": "cpp\\named_req\\ContiguousContainer.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u8fde\u7eed\u5bb9\u5668 (ContiguousContainer)C++ \u5177\u540d\u8981\u6c42\uff1a\u8fde\u7eed\u5bb9\u5668 (ContiguousContainer)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u8001\u5f0f\u8fde\u7eed\u8fed\u4ee3\u5668 (LegacyContiguousIterator)C++ \u5177\u540d\u8981\u6c42\uff1a\u8001\u5f0f\u8fde\u7eed\u8fed\u4ee3\u5668 (LegacyContiguousIterator)", "type": "cpp", "path": "cpp\\named_req\\ContiguousIterator.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u8001\u5f0f\u8fde\u7eed\u8fed\u4ee3\u5668 (LegacyContiguousIterator)C++ \u5177\u540d\u8981\u6c42\uff1a\u8001\u5f0f\u8fde\u7eed\u8fed\u4ee3\u5668 (LegacyContiguousIterator)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u590d\u5236\u8d4b\u503c (CopyAssignable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u590d\u5236\u8d4b\u503c (CopyAssignable)", "type": "cpp", "path": "cpp\\named_req\\CopyAssignable.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u590d\u5236\u8d4b\u503c (CopyAssignable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u590d\u5236\u8d4b\u503c (CopyAssignable)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u590d\u5236\u6784\u9020 (CopyConstructible)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u590d\u5236\u6784\u9020 (CopyConstructible)", "type": "cpp", "path": "cpp\\named_req\\CopyConstructible.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u590d\u5236\u6784\u9020 (CopyConstructible)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u590d\u5236\u6784\u9020 (CopyConstructible)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u590d\u5236\u63d2\u5165 (CopyInsertable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u590d\u5236\u63d2\u5165 (CopyInsertable)", "type": "cpp", "path": "cpp\\named_req\\CopyInsertable.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u590d\u5236\u63d2\u5165 (CopyInsertable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u590d\u5236\u63d2\u5165 (CopyInsertable)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u9ed8\u8ba4\u6784\u9020 (DefaultConstructible)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u9ed8\u8ba4\u6784\u9020 (DefaultConstructible)", "type": "cpp", "path": "cpp\\named_req\\DefaultConstructible.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u9ed8\u8ba4\u6784\u9020 (DefaultConstructible)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u9ed8\u8ba4\u6784\u9020 (DefaultConstructible)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u9ed8\u8ba4\u63d2\u5165 (DefaultInsertable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u9ed8\u8ba4\u63d2\u5165 (DefaultInsertable)", "type": "cpp", "path": "cpp\\named_req\\DefaultInsertable.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u9ed8\u8ba4\u63d2\u5165 (DefaultInsertable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u9ed8\u8ba4\u63d2\u5165 (DefaultInsertable)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u6790\u6784 (Destructible)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u6790\u6784 (Destructible)", "type": "cpp", "path": "cpp\\named_req\\Destructible.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u6790\u6784 (Destructible)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u6790\u6784 (Destructible)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u5c31\u4f4d\u6784\u9020 (EmplaceConstructible) (C++11 \u8d77)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u5c31\u4f4d\u6784\u9020 (EmplaceConstructible) (C++11 \u8d77)", "type": "cpp", "path": "cpp\\named_req\\EmplaceConstructible.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u5c31\u4f4d\u6784\u9020 (EmplaceConstructible) (C++11 \u8d77)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u5c31\u4f4d\u6784\u9020 (EmplaceConstructible) (C++11 \u8d77)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u76f8\u7b49\u6bd4\u8f83 (EqualityComparable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u76f8\u7b49\u6bd4\u8f83 (EqualityComparable)", "type": "cpp", "path": "cpp\\named_req\\EqualityComparable.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u76f8\u7b49\u6bd4\u8f83 (EqualityComparable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u76f8\u7b49\u6bd4\u8f83 (EqualityComparable)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u64e6\u9664 (Erasable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u64e6\u9664 (Erasable)", "type": "cpp", "path": "cpp\\named_req\\Erasable.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u64e6\u9664 (Erasable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u64e6\u9664 (Erasable)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u6709\u683c\u5f0f\u8f93\u5165\u51fd\u6570 (FormattedInputFunction)C++ \u5177\u540d\u8981\u6c42\uff1a\u6709\u683c\u5f0f\u8f93\u5165\u51fd\u6570 (FormattedInputFunction)", "type": "cpp", "path": "cpp\\named_req\\FormattedInputFunction.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u6709\u683c\u5f0f\u8f93\u5165\u51fd\u6570 (FormattedInputFunction)C++ \u5177\u540d\u8981\u6c42\uff1a\u6709\u683c\u5f0f\u8f93\u5165\u51fd\u6570 (FormattedInputFunction)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u6709\u683c\u5f0f\u8f93\u51fa\u51fd\u6570 (FormattedOutputFunction)C++ \u5177\u540d\u8981\u6c42\uff1a\u6709\u683c\u5f0f\u8f93\u51fa\u51fd\u6570 (FormattedOutputFunction)", "type": "cpp", "path": "cpp\\named_req\\FormattedOutputFunction.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u6709\u683c\u5f0f\u8f93\u51fa\u51fd\u6570 (FormattedOutputFunction)C++ \u5177\u540d\u8981\u6c42\uff1a\u6709\u683c\u5f0f\u8f93\u51fa\u51fd\u6570 (FormattedOutputFunction)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u683c\u5f0f\u5316\u5668 (Formatter)C++ \u5177\u540d\u8981\u6c42\uff1a\u683c\u5f0f\u5316\u5668 (Formatter)", "type": "cpp", "path": "cpp\\named_req\\Formatter.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u683c\u5f0f\u5316\u5668 (Formatter)C++ \u5177\u540d\u8981\u6c42\uff1a\u683c\u5f0f\u5316\u5668 (Formatter)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u8001\u5f0f\u5411\u524d\u8fed\u4ee3\u5668 (LegacyForwardIterator)C++ \u5177\u540d\u8981\u6c42\uff1a\u8001\u5f0f\u5411\u524d\u8fed\u4ee3\u5668 (LegacyForwardIterator)", "type": "cpp", "path": "cpp\\named_req\\ForwardIterator.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u8001\u5f0f\u5411\u524d\u8fed\u4ee3\u5668 (LegacyForwardIterator)C++ \u5177\u540d\u8981\u6c42\uff1a\u8001\u5f0f\u5411\u524d\u8fed\u4ee3\u5668 (LegacyForwardIterator)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u51fd\u6570\u5bf9\u8c61 (FunctionObject)C++ \u5177\u540d\u8981\u6c42\uff1a\u51fd\u6570\u5bf9\u8c61 (FunctionObject)", "type": "cpp", "path": "cpp\\named_req\\FunctionObject.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u51fd\u6570\u5bf9\u8c61 (FunctionObject)C++ \u5177\u540d\u8981\u6c42\uff1a\u51fd\u6570\u5bf9\u8c61 (FunctionObject)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u6563\u5217 (Hash)C++ \u5177\u540d\u8981\u6c42\uff1a\u6563\u5217 (Hash)", "type": "cpp", "path": "cpp\\named_req\\Hash.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u6563\u5217 (Hash)C++ \u5177\u540d\u8981\u6c42\uff1a\u6563\u5217 (Hash)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u9690\u5f0f\u751f\u5b58\u671f\u7c7b\u578b (ImplicitLifetimeType)C++ \u5177\u540d\u8981\u6c42\uff1a\u9690\u5f0f\u751f\u5b58\u671f\u7c7b\u578b (ImplicitLifetimeType)", "type": "cpp", "path": "cpp\\named_req\\ImplicitLifetimeType.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u9690\u5f0f\u751f\u5b58\u671f\u7c7b\u578b (ImplicitLifetimeType)C++ \u5177\u540d\u8981\u6c42\uff1a\u9690\u5f0f\u751f\u5b58\u671f\u7c7b\u578b (ImplicitLifetimeType)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u8001\u5f0f\u8f93\u5165\u8fed\u4ee3\u5668 (LegacyInputIterator)C++ \u5177\u540d\u8981\u6c42\uff1a\u8001\u5f0f\u8f93\u5165\u8fed\u4ee3\u5668 (LegacyInputIterator)", "type": "cpp", "path": "cpp\\named_req\\InputIterator.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u8001\u5f0f\u8f93\u5165\u8fed\u4ee3\u5668 (LegacyInputIterator)C++ \u5177\u540d\u8981\u6c42\uff1a\u8001\u5f0f\u8f93\u5165\u8fed\u4ee3\u5668 (LegacyInputIterator)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u8001\u5f0f\u8fed\u4ee3\u5668 (LegacyIterator)C++ \u5177\u540d\u8981\u6c42\uff1a\u8001\u5f0f\u8fed\u4ee3\u5668 (LegacyIterator)", "type": "cpp", "path": "cpp\\named_req\\Iterator.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u8001\u5f0f\u8fed\u4ee3\u5668 (LegacyIterator)C++ \u5177\u540d\u8981\u6c42\uff1a\u8001\u5f0f\u8fed\u4ee3\u5668 (LegacyIterator)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u5c0f\u4e8e\u6bd4\u8f83 (LessThanComparable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u5c0f\u4e8e\u6bd4\u8f83 (LessThanComparable)", "type": "cpp", "path": "cpp\\named_req\\LessThanComparable.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u5c0f\u4e8e\u6bd4\u8f83 (LessThanComparable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u5c0f\u4e8e\u6bd4\u8f83 (LessThanComparable)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5b57\u9762\u7c7b\u578b (LiteralType)C++ \u5177\u540d\u8981\u6c42\uff1a\u5b57\u9762\u7c7b\u578b (LiteralType)", "type": "cpp", "path": "cpp\\named_req\\LiteralType.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5b57\u9762\u7c7b\u578b (LiteralType)C++ \u5177\u540d\u8981\u6c42\uff1a\u5b57\u9762\u7c7b\u578b (LiteralType)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u9501\u5b9a (Lockable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u9501\u5b9a (Lockable)", "type": "cpp", "path": "cpp\\named_req\\Lockable.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u9501\u5b9a (Lockable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u9501\u5b9a (Lockable)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u79fb\u52a8\u8d4b\u503c (MoveAssignable) (C++11 \u8d77)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u79fb\u52a8\u8d4b\u503c (MoveAssignable) (C++11 \u8d77)", "type": "cpp", "path": "cpp\\named_req\\MoveAssignable.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u79fb\u52a8\u8d4b\u503c (MoveAssignable) (C++11 \u8d77)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u79fb\u52a8\u8d4b\u503c (MoveAssignable) (C++11 \u8d77)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u79fb\u52a8\u6784\u9020 (MoveConstructible) (C++11 \u8d77)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u79fb\u52a8\u6784\u9020 (MoveConstructible) (C++11 \u8d77)", "type": "cpp", "path": "cpp\\named_req\\MoveConstructible.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u79fb\u52a8\u6784\u9020 (MoveConstructible) (C++11 \u8d77)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u79fb\u52a8\u6784\u9020 (MoveConstructible) (C++11 \u8d77)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u79fb\u52a8\u63d2\u5165 (MoveInsertable) (C++11 \u8d77)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u79fb\u52a8\u63d2\u5165 (MoveInsertable) (C++11 \u8d77)", "type": "cpp", "path": "cpp\\named_req\\MoveInsertable.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u79fb\u52a8\u63d2\u5165 (MoveInsertable) (C++11 \u8d77)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u79fb\u52a8\u63d2\u5165 (MoveInsertable) (C++11 \u8d77)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u4e92\u65a5\u4f53 (Mutex)C++ \u5177\u540d\u8981\u6c42\uff1a\u4e92\u65a5\u4f53 (Mutex)", "type": "cpp", "path": "cpp\\named_req\\Mutex.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u4e92\u65a5\u4f53 (Mutex)C++ \u5177\u540d\u8981\u6c42\uff1a\u4e92\u65a5\u4f53 (Mutex)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u7a7a\u6307\u9488 (NullablePointer) (C++11 \u8d77)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u7a7a\u6307\u9488 (NullablePointer) (C++11 \u8d77)", "type": "cpp", "path": "cpp\\named_req\\NullablePointer.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u7a7a\u6307\u9488 (NullablePointer) (C++11 \u8d77)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u7a7a\u6307\u9488 (NullablePointer) (C++11 \u8d77)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u6570\u503c\u7c7b\u578b (NumericType)C++ \u5177\u540d\u8981\u6c42\uff1a\u6570\u503c\u7c7b\u578b (NumericType)", "type": "cpp", "path": "cpp\\named_req\\NumericType.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u6570\u503c\u7c7b\u578b (NumericType)C++ \u5177\u540d\u8981\u6c42\uff1a\u6570\u503c\u7c7b\u578b (NumericType)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u8001\u5f0f\u8f93\u51fa\u8fed\u4ee3\u5668 (LegacyOutputIterator)C++ \u5177\u540d\u8981\u6c42\uff1a\u8001\u5f0f\u8f93\u51fa\u8fed\u4ee3\u5668 (LegacyOutputIterator)", "type": "cpp", "path": "cpp\\named_req\\OutputIterator.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u8001\u5f0f\u8f93\u51fa\u8fed\u4ee3\u5668 (LegacyOutputIterator)C++ \u5177\u540d\u8981\u6c42\uff1a\u8001\u5f0f\u8f93\u51fa\u8fed\u4ee3\u5668 (LegacyOutputIterator)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u7b80\u65e7\u6570\u636e\u7c7b\u578b (PODType)C++ \u5177\u540d\u8981\u6c42\uff1a\u7b80\u65e7\u6570\u636e\u7c7b\u578b (PODType)", "type": "cpp", "path": "cpp\\named_req\\PODType.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u7b80\u65e7\u6570\u636e\u7c7b\u578b (PODType)C++ \u5177\u540d\u8981\u6c42\uff1a\u7b80\u65e7\u6570\u636e\u7c7b\u578b (PODType)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u8c13\u8bcd (Predicate)C++ \u5177\u540d\u8981\u6c42\uff1a\u8c13\u8bcd (Predicate)", "type": "cpp", "path": "cpp\\named_req\\Predicate.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u8c13\u8bcd (Predicate)C++ \u5177\u540d\u8981\u6c42\uff1a\u8c13\u8bcd (Predicate)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u8001\u5f0f\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668 (LegacyRandomAccessIterator)C++ \u5177\u540d\u8981\u6c42\uff1a\u8001\u5f0f\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668 (LegacyRandomAccessIterator)", "type": "cpp", "path": "cpp\\named_req\\RandomAccessIterator.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u8001\u5f0f\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668 (LegacyRandomAccessIterator)C++ \u5177\u540d\u8981\u6c42\uff1a\u8001\u5f0f\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668 (LegacyRandomAccessIterator)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u968f\u673a\u6570\u5206\u5e03 (RandomNumberDistribution)C++ \u5177\u540d\u8981\u6c42\uff1a\u968f\u673a\u6570\u5206\u5e03 (RandomNumberDistribution)", "type": "cpp", "path": "cpp\\named_req\\RandomNumberDistribution.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u968f\u673a\u6570\u5206\u5e03 (RandomNumberDistribution)C++ \u5177\u540d\u8981\u6c42\uff1a\u968f\u673a\u6570\u5206\u5e03 (RandomNumberDistribution)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u968f\u673a\u6570\u5f15\u64ce (RandomNumberEngine)C++ \u5177\u540d\u8981\u6c42\uff1a\u968f\u673a\u6570\u5f15\u64ce (RandomNumberEngine)", "type": "cpp", "path": "cpp\\named_req\\RandomNumberEngine.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u968f\u673a\u6570\u5f15\u64ce (RandomNumberEngine)C++ \u5177\u540d\u8981\u6c42\uff1a\u968f\u673a\u6570\u5f15\u64ce (RandomNumberEngine)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u968f\u673a\u6570\u5f15\u64ce\u9002\u914d\u5668 (RandomNumberEngineAdaptor)C++ \u5177\u540d\u8981\u6c42\uff1a\u968f\u673a\u6570\u5f15\u64ce\u9002\u914d\u5668 (RandomNumberEngineAdaptor)", "type": "cpp", "path": "cpp\\named_req\\RandomNumberEngineAdaptor.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u968f\u673a\u6570\u5f15\u64ce\u9002\u914d\u5668 (RandomNumberEngineAdaptor)C++ \u5177\u540d\u8981\u6c42\uff1a\u968f\u673a\u6570\u5f15\u64ce\u9002\u914d\u5668 (RandomNumberEngineAdaptor)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u8303\u56f4\u9002\u914d\u5668\u95ed\u5305\u5bf9\u8c61 (RangeAdaptorClosureObject) (C++20 \u8d77)C++ \u5177\u540d\u8981\u6c42\uff1a\u8303\u56f4\u9002\u914d\u5668\u95ed\u5305\u5bf9\u8c61 (RangeAdaptorClosureObject) (C++20 \u8d77)", "type": "cpp", "path": "cpp\\named_req\\RangeAdaptorClosureObject.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u8303\u56f4\u9002\u914d\u5668\u95ed\u5305\u5bf9\u8c61 (RangeAdaptorClosureObject) (C++20 \u8d77)C++ \u5177\u540d\u8981\u6c42\uff1a\u8303\u56f4\u9002\u914d\u5668\u95ed\u5305\u5bf9\u8c61 (RangeAdaptorClosureObject) (C++20 \u8d77)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u8303\u56f4\u9002\u914d\u5668\u5bf9\u8c61 (RangeAdaptorObject) (C++20 \u8d77)C++ \u5177\u540d\u8981\u6c42\uff1a\u8303\u56f4\u9002\u914d\u5668\u5bf9\u8c61 (RangeAdaptorObject) (C++20 \u8d77)", "type": "cpp", "path": "cpp\\named_req\\RangeAdaptorObject.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u8303\u56f4\u9002\u914d\u5668\u5bf9\u8c61 (RangeAdaptorObject) (C++20 \u8d77)C++ \u5177\u540d\u8981\u6c42\uff1a\u8303\u56f4\u9002\u914d\u5668\u5bf9\u8c61 (RangeAdaptorObject) (C++20 \u8d77)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u6b63\u5219\u8868\u8fbe\u5f0f\u7279\u6027 (RegexTraits)C++ \u5177\u540d\u8981\u6c42\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u7279\u6027 (RegexTraits)", "type": "cpp", "path": "cpp\\named_req\\RegexTraits.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u6b63\u5219\u8868\u8fbe\u5f0f\u7279\u6027 (RegexTraits)C++ \u5177\u540d\u8981\u6c42\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u7279\u6027 (RegexTraits)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u9006\u5bb9\u5668 (ReversibleContainer)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u9006\u5bb9\u5668 (ReversibleContainer)", "type": "cpp", "path": "cpp\\named_req\\ReversibleContainer.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u9006\u5bb9\u5668 (ReversibleContainer)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u9006\u5bb9\u5668 (ReversibleContainer)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u6807\u91cf\u7c7b\u578b (ScalarType)C++ \u5177\u540d\u8981\u6c42\uff1a\u6807\u91cf\u7c7b\u578b (ScalarType)", "type": "cpp", "path": "cpp\\named_req\\ScalarType.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u6807\u91cf\u7c7b\u578b (ScalarType)C++ \u5177\u540d\u8981\u6c42\uff1a\u6807\u91cf\u7c7b\u578b (ScalarType)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u79cd\u5b50\u5e8f\u5217 (SeedSequence)C++ \u5177\u540d\u8981\u6c42\uff1a\u79cd\u5b50\u5e8f\u5217 (SeedSequence)", "type": "cpp", "path": "cpp\\named_req\\SeedSequence.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u79cd\u5b50\u5e8f\u5217 (SeedSequence)C++ \u5177\u540d\u8981\u6c42\uff1a\u79cd\u5b50\u5e8f\u5217 (SeedSequence)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5e8f\u5217\u5bb9\u5668 (SequenceContainer)C++ \u5177\u540d\u8981\u6c42\uff1a\u5e8f\u5217\u5bb9\u5668 (SequenceContainer)", "type": "cpp", "path": "cpp\\named_req\\SequenceContainer.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5e8f\u5217\u5bb9\u5668 (SequenceContainer)C++ \u5177\u540d\u8981\u6c42\uff1a\u5e8f\u5217\u5bb9\u5668 (SequenceContainer)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u5171\u4eab\u9501\u5b9a (SharedLockable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u5171\u4eab\u9501\u5b9a (SharedLockable)", "type": "cpp", "path": "cpp\\named_req\\SharedLockable.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u5171\u4eab\u9501\u5b9a (SharedLockable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u5171\u4eab\u9501\u5b9a (SharedLockable)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5171\u4eab\u4e92\u65a5\u4f53 (SharedMutex)C++ \u5177\u540d\u8981\u6c42\uff1a\u5171\u4eab\u4e92\u65a5\u4f53 (SharedMutex)", "type": "cpp", "path": "cpp\\named_req\\SharedMutex.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5171\u4eab\u4e92\u65a5\u4f53 (SharedMutex)C++ \u5177\u540d\u8981\u6c42\uff1a\u5171\u4eab\u4e92\u65a5\u4f53 (SharedMutex)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u5171\u4eab\u5b9a\u65f6\u9501\u5b9a (SharedTimedLockable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u5171\u4eab\u5b9a\u65f6\u9501\u5b9a (SharedTimedLockable)", "type": "cpp", "path": "cpp\\named_req\\SharedTimedLockable.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u5171\u4eab\u5b9a\u65f6\u9501\u5b9a (SharedTimedLockable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u5171\u4eab\u5b9a\u65f6\u9501\u5b9a (SharedTimedLockable)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5171\u4eab\u5b9a\u65f6\u4e92\u65a5\u4f53 (SharedTimedMutex)C++ \u5177\u540d\u8981\u6c42\uff1a\u5171\u4eab\u5b9a\u65f6\u4e92\u65a5\u4f53 (SharedTimedMutex)", "type": "cpp", "path": "cpp\\named_req\\SharedTimedMutex.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5171\u4eab\u5b9a\u65f6\u4e92\u65a5\u4f53 (SharedTimedMutex)C++ \u5177\u540d\u8981\u6c42\uff1a\u5171\u4eab\u5b9a\u65f6\u4e92\u65a5\u4f53 (SharedTimedMutex)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u6807\u51c6\u5e03\u5c40\u7c7b\u578b (StandardLayoutType)C++ \u5177\u540d\u8981\u6c42\uff1a\u6807\u51c6\u5e03\u5c40\u7c7b\u578b (StandardLayoutType)", "type": "cpp", "path": "cpp\\named_req\\StandardLayoutType.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u6807\u51c6\u5e03\u5c40\u7c7b\u578b (StandardLayoutType)C++ \u5177\u540d\u8981\u6c42\uff1a\u6807\u51c6\u5e03\u5c40\u7c7b\u578b (StandardLayoutType)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u4ea4\u6362 (Swappable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u4ea4\u6362 (Swappable)", "type": "cpp", "path": "cpp\\named_req\\Swappable.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u4ea4\u6362 (Swappable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u4ea4\u6362 (Swappable)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u5b9a\u65f6\u9501\u5b9a (TimedLockable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u5b9a\u65f6\u9501\u5b9a (TimedLockable)", "type": "cpp", "path": "cpp\\named_req\\TimedLockable.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u5b9a\u65f6\u9501\u5b9a (TimedLockable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u5b9a\u65f6\u9501\u5b9a (TimedLockable)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5b9a\u65f6\u4e92\u65a5\u4f53 (TimedMutex)C++ \u5177\u540d\u8981\u6c42\uff1a\u5b9a\u65f6\u4e92\u65a5\u4f53 (TimedMutex)", "type": "cpp", "path": "cpp\\named_req\\TimedMutex.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5b9a\u65f6\u4e92\u65a5\u4f53 (TimedMutex)C++ \u5177\u540d\u8981\u6c42\uff1a\u5b9a\u65f6\u4e92\u65a5\u4f53 (TimedMutex)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53d8\u6362\u7279\u6027 (TransformationTrait)C++ \u5177\u540d\u8981\u6c42\uff1a\u53d8\u6362\u7279\u6027 (TransformationTrait)", "type": "cpp", "path": "cpp\\named_req\\TransformationTrait.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53d8\u6362\u7279\u6027 (TransformationTrait)C++ \u5177\u540d\u8981\u6c42\uff1a\u53d8\u6362\u7279\u6027 (TransformationTrait)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5e73\u51e1\u65f6\u949f (TrivialClock)C++ \u5177\u540d\u8981\u6c42\uff1a\u5e73\u51e1\u65f6\u949f (TrivialClock)", "type": "cpp", "path": "cpp\\named_req\\TrivialClock.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5e73\u51e1\u65f6\u949f (TrivialClock)C++ \u5177\u540d\u8981\u6c42\uff1a\u5e73\u51e1\u65f6\u949f (TrivialClock)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u5e73\u51e1\u590d\u5236 (TriviallyCopyable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u5e73\u51e1\u590d\u5236 (TriviallyCopyable)", "type": "cpp", "path": "cpp\\named_req\\TriviallyCopyable.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u53ef\u5e73\u51e1\u590d\u5236 (TriviallyCopyable)C++ \u5177\u540d\u8981\u6c42\uff1a\u53ef\u5e73\u51e1\u590d\u5236 (TriviallyCopyable)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5e73\u51e1\u7c7b\u578b (TrivialType)C++ \u5177\u540d\u8981\u6c42\uff1a\u5e73\u51e1\u7c7b\u578b (TrivialType)", "type": "cpp", "path": "cpp\\named_req\\TrivialType.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5e73\u51e1\u7c7b\u578b (TrivialType)C++ \u5177\u540d\u8981\u6c42\uff1a\u5e73\u51e1\u7c7b\u578b (TrivialType)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u4e00\u5143\u7c7b\u578b\u7279\u6027 (UnaryTypeTrait)C++ \u5177\u540d\u8981\u6c42\uff1a\u4e00\u5143\u7c7b\u578b\u7279\u6027 (UnaryTypeTrait)", "type": "cpp", "path": "cpp\\named_req\\UnaryTypeTrait.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u4e00\u5143\u7c7b\u578b\u7279\u6027 (UnaryTypeTrait)C++ \u5177\u540d\u8981\u6c42\uff1a\u4e00\u5143\u7c7b\u578b\u7279\u6027 (UnaryTypeTrait)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u65e0\u683c\u5f0f\u8f93\u5165\u51fd\u6570 (UnformattedInputFunction)C++ \u5177\u540d\u8981\u6c42\uff1a\u65e0\u683c\u5f0f\u8f93\u5165\u51fd\u6570 (UnformattedInputFunction)", "type": "cpp", "path": "cpp\\named_req\\UnformattedInputFunction.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u65e0\u683c\u5f0f\u8f93\u5165\u51fd\u6570 (UnformattedInputFunction)C++ \u5177\u540d\u8981\u6c42\uff1a\u65e0\u683c\u5f0f\u8f93\u5165\u51fd\u6570 (UnformattedInputFunction)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u65e0\u683c\u5f0f\u8f93\u51fa\u51fd\u6570 (UnformattedOutputFunction)C++ \u5177\u540d\u8981\u6c42\uff1a\u65e0\u683c\u5f0f\u8f93\u51fa\u51fd\u6570 (UnformattedOutputFunction)", "type": "cpp", "path": "cpp\\named_req\\UnformattedOutputFunction.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u65e0\u683c\u5f0f\u8f93\u51fa\u51fd\u6570 (UnformattedOutputFunction)C++ \u5177\u540d\u8981\u6c42\uff1a\u65e0\u683c\u5f0f\u8f93\u51fa\u51fd\u6570 (UnformattedOutputFunction)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5747\u5300\u968f\u673a\u4f4d\u751f\u6210\u5668 (UniformRandomBitGenerator)C++ \u5177\u540d\u8981\u6c42\uff1a\u5747\u5300\u968f\u673a\u4f4d\u751f\u6210\u5668 (UniformRandomBitGenerator)", "type": "cpp", "path": "cpp\\named_req\\UniformRandomBitGenerator.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u5747\u5300\u968f\u673a\u4f4d\u751f\u6210\u5668 (UniformRandomBitGenerator)C++ \u5177\u540d\u8981\u6c42\uff1a\u5747\u5300\u968f\u673a\u4f4d\u751f\u6210\u5668 (UniformRandomBitGenerator)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u65e0\u5e8f\u5173\u8054\u5bb9\u5668 (UnorderedAssociativeContainer)C++ \u5177\u540d\u8981\u6c42\uff1a\u65e0\u5e8f\u5173\u8054\u5bb9\u5668 (UnorderedAssociativeContainer)", "type": "cpp", "path": "cpp\\named_req\\UnorderedAssociativeContainer.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u65e0\u5e8f\u5173\u8054\u5bb9\u5668 (UnorderedAssociativeContainer)C++ \u5177\u540d\u8981\u6c42\uff1a\u65e0\u5e8f\u5173\u8054\u5bb9\u5668 (UnorderedAssociativeContainer)"}, {"name": "C++ \u5177\u540d\u8981\u6c42\uff1a \u503c\u53ef\u4ea4\u6362 (ValueSwappable)C++ \u5177\u540d\u8981\u6c42\uff1a\u503c\u53ef\u4ea4\u6362 (ValueSwappable)", "type": "cpp", "path": "cpp\\named_req\\ValueSwappable.html", "desc": "C++ \u5177\u540d\u8981\u6c42\uff1a \u503c\u53ef\u4ea4\u6362 (ValueSwappable)C++ \u5177\u540d\u8981\u6c42\uff1a\u503c\u53ef\u4ea4\u6362 (ValueSwappable)"}, {"name": "std::std::bit_cast", "type": "cpp", "path": "cpp\\numeric\\bit_cast.html", "desc": "std::std::bit_cast"}, {"name": "std::std::bit_ceil", "type": "cpp", "path": "cpp\\numeric\\bit_ceil.html", "desc": "std::std::bit_ceil"}, {"name": "std::std::bit_floor", "type": "cpp", "path": "cpp\\numeric\\bit_floor.html", "desc": "std::std::bit_floor"}, {"name": "std::std::bit_width", "type": "cpp", "path": "cpp\\numeric\\bit_width.html", "desc": "std::std::bit_width"}, {"name": "std::std::byteswap", "type": "cpp", "path": "cpp\\numeric\\byteswap.html", "desc": "std::std::byteswap"}, {"name": "std::std::complex", "type": "cpp", "path": "cpp\\numeric\\complex.html", "desc": "std::std::complex"}, {"name": "\u6570\u5b66\u5e38\u6570", "type": "cpp", "path": "cpp\\numeric\\constants.html", "desc": "\u6570\u5b66\u5e38\u6570"}, {"name": "std::std::countl_one", "type": "cpp", "path": "cpp\\numeric\\countl_one.html", "desc": "std::std::countl_one"}, {"name": "std::std::countl_zero", "type": "cpp", "path": "cpp\\numeric\\countl_zero.html", "desc": "std::std::countl_zero"}, {"name": "std::std::countr_one", "type": "cpp", "path": "cpp\\numeric\\countr_one.html", "desc": "std::std::countr_one"}, {"name": "std::std::countr_zero", "type": "cpp", "path": "cpp\\numeric\\countr_zero.html", "desc": "std::std::countr_zero"}, {"name": "\u6d6e\u70b9\u73af\u5883", "type": "cpp", "path": "cpp\\numeric\\fenv.html", "desc": "\u6d6e\u70b9\u73af\u5883"}, {"name": "std::std::gcd", "type": "cpp", "path": "cpp\\numeric\\gcd.html", "desc": "std::std::gcd"}, {"name": "std::std::has_single_bit", "type": "cpp", "path": "cpp\\numeric\\has_single_bit.html", "desc": "std::std::has_single_bit"}, {"name": "std::std::lcm", "type": "cpp", "path": "cpp\\numeric\\lcm.html", "desc": "std::std::lcm"}, {"name": "std::std::lerp", "type": "cpp", "path": "cpp\\numeric\\lerp.html", "desc": "std::std::lerp"}, {"name": "\u5e38\u7528\u6570\u5b66\u51fd\u6570", "type": "cpp", "path": "cpp\\numeric\\math.html", "desc": "\u5e38\u7528\u6570\u5b66\u51fd\u6570"}, {"name": "std::std::midpoint", "type": "cpp", "path": "cpp\\numeric\\midpoint.html", "desc": "std::std::midpoint"}, {"name": "std::std::popcount", "type": "cpp", "path": "cpp\\numeric\\popcount.html", "desc": "std::std::popcount"}, {"name": "\u4f2a\u968f\u673a\u6570\u751f\u6210", "type": "cpp", "path": "cpp\\numeric\\random.html", "desc": "\u4f2a\u968f\u673a\u6570\u751f\u6210"}, {"name": "\u7f16\u8bd1\u65f6\u6709\u7406\u6570\u7b97\u672f", "type": "cpp", "path": "cpp\\numeric\\ratio.html", "desc": "\u7f16\u8bd1\u65f6\u6709\u7406\u6570\u7b97\u672f"}, {"name": "std::std::rotl", "type": "cpp", "path": "cpp\\numeric\\rotl.html", "desc": "std::std::rotl"}, {"name": "std::std::rotr", "type": "cpp", "path": "cpp\\numeric\\rotr.html", "desc": "std::std::rotr"}, {"name": "\u6570\u5b66\u7279\u6b8a\u51fd\u6570", "type": "cpp", "path": "cpp\\numeric\\special_functions.html", "desc": "\u6570\u5b66\u7279\u6b8a\u51fd\u6570"}, {"name": "std::std::valarray", "type": "cpp", "path": "cpp\\numeric\\valarray.html", "desc": "std::std::valarray"}, {"name": "std:: (std::complex)std::abs(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\abs.html", "desc": "std:: (std::complex)std::abs(std::complex)"}, {"name": "std:: (std::complex)std::acos(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\acos.html", "desc": "std:: (std::complex)std::acos(std::complex)"}, {"name": "std:: (std::complex)std::acosh(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\acosh.html", "desc": "std:: (std::complex)std::acosh(std::complex)"}, {"name": "std::std::arg(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\arg.html", "desc": "std::std::arg(std::complex)"}, {"name": "std::std::asin(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\asin.html", "desc": "std::std::asin(std::complex)"}, {"name": "std:: (std::complex)std::asinh(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\asinh.html", "desc": "std:: (std::complex)std::asinh(std::complex)"}, {"name": "std:: (std::complex)std::atan(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\atan.html", "desc": "std:: (std::complex)std::atan(std::complex)"}, {"name": "std:: (std::complex)std::atanh(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\atanh.html", "desc": "std:: (std::complex)std::atanh(std::complex)"}, {"name": "std::complex<T>::std::complex<T>::complex", "type": "cpp", "path": "cpp\\numeric\\complex\\complex.html", "desc": "std::complex<T>::std::complex<T>::complex"}, {"name": "std:: (std::complex)std::conj(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\conj.html", "desc": "std:: (std::complex)std::conj(std::complex)"}, {"name": "std:: (std::complex)std::cos(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\cos.html", "desc": "std:: (std::complex)std::cos(std::complex)"}, {"name": "std:: (std::complex)std::cosh(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\cosh.html", "desc": "std:: (std::complex)std::cosh(std::complex)"}, {"name": "std::std::exp(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\exp.html", "desc": "std::std::exp(std::complex)"}, {"name": "std::complex<T>::std::complex<T>::imag", "type": "cpp", "path": "cpp\\numeric\\complex\\imag.html", "desc": "std::complex<T>::std::complex<T>::imag"}, {"name": "std:: (std::complex)std::imag(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\imag2.html", "desc": "std:: (std::complex)std::imag(std::complex)"}, {"name": "std::std::log(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\log.html", "desc": "std::std::log(std::complex)"}, {"name": "std::std::log10(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\log10.html", "desc": "std::std::log10(std::complex)"}, {"name": "std:: (std::complex)std::norm(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\norm.html", "desc": "std:: (std::complex)std::norm(std::complex)"}, {"name": "std::literals::complex_literals::std::literals::complex_literals::operator\"\"i, operator\"\"if, operator\"\"il", "type": "cpp", "path": "cpp\\numeric\\complex\\operator%22%22i.html", "desc": "std::literals::complex_literals::std::literals::complex_literals::operator\"\"i, operator\"\"if, operator\"\"il"}, {"name": "std::complex<T>::std::complex<T>::operator=", "type": "cpp", "path": "cpp\\numeric\\complex\\operator=.html", "desc": "std::complex<T>::std::complex<T>::operator="}, {"name": "std::complex<T>::std::complex<T>::operator+=,-=,*=,/=", "type": "cpp", "path": "cpp\\numeric\\complex\\operator_arith.html", "desc": "std::complex<T>::std::complex<T>::operator+=,-=,*=,/="}, {"name": "std::complex<T>:: (unary) (unary)std::complex<T>::operator+(unary), operator-(unary)", "type": "cpp", "path": "cpp\\numeric\\complex\\operator_arith2.html", "desc": "std::complex<T>:: (unary) (unary)std::complex<T>::operator+(unary), operator-(unary)"}, {"name": "(std::complex)operator+,-,*,/ (std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\operator_arith3.html", "desc": "(std::complex)operator+,-,*,/ (std::complex)"}, {"name": "(std::complex)operator==,!=(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\operator_cmp.html", "desc": "(std::complex)operator==,!=(std::complex)"}, {"name": "(std::complex)operator<<,>>(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\operator_ltltgtgt.html", "desc": "(std::complex)operator<<,>>(std::complex)"}, {"name": "std::std::polar(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\polar.html", "desc": "std::std::polar(std::complex)"}, {"name": "std::std::pow(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\pow.html", "desc": "std::std::pow(std::complex)"}, {"name": "std:: (std::complex)std::proj(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\proj.html", "desc": "std:: (std::complex)std::proj(std::complex)"}, {"name": "std::complex<T>::std::complex<T>::real", "type": "cpp", "path": "cpp\\numeric\\complex\\real.html", "desc": "std::complex<T>::std::complex<T>::real"}, {"name": "std:: (std::complex)std::real(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\real2.html", "desc": "std:: (std::complex)std::real(std::complex)"}, {"name": "std:: (std::complex)std::sin(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\sin.html", "desc": "std:: (std::complex)std::sin(std::complex)"}, {"name": "std:: (std::complex)std::sinh(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\sinh.html", "desc": "std:: (std::complex)std::sinh(std::complex)"}, {"name": "std::std::sqrt(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\sqrt.html", "desc": "std::std::sqrt(std::complex)"}, {"name": "std:: (std::complex)std::tan(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\tan.html", "desc": "std:: (std::complex)std::tan(std::complex)"}, {"name": "std:: (std::complex)std::tanh(std::complex)", "type": "cpp", "path": "cpp\\numeric\\complex\\tanh.html", "desc": "std:: (std::complex)std::tanh(std::complex)"}, {"name": "std::std::feclearexcept", "type": "cpp", "path": "cpp\\numeric\\fenv\\feclearexcept.html", "desc": "std::std::feclearexcept"}, {"name": "std:: std::std::fegetenv, std::fesetenv", "type": "cpp", "path": "cpp\\numeric\\fenv\\feenv.html", "desc": "std:: std::std::fegetenv, std::fesetenv"}, {"name": "std:: std::std::fegetexceptflag, std::fesetexceptflag", "type": "cpp", "path": "cpp\\numeric\\fenv\\feexceptflag.html", "desc": "std:: std::std::fegetexceptflag, std::fesetexceptflag"}, {"name": "std::std::feholdexcept", "type": "cpp", "path": "cpp\\numeric\\fenv\\feholdexcept.html", "desc": "std::std::feholdexcept"}, {"name": "std::std::feraiseexcept", "type": "cpp", "path": "cpp\\numeric\\fenv\\feraiseexcept.html", "desc": "std::std::feraiseexcept"}, {"name": "std:: std::std::fegetround, std::fesetround", "type": "cpp", "path": "cpp\\numeric\\fenv\\feround.html", "desc": "std:: std::std::fegetround, std::fesetround"}, {"name": "std::std::fetestexcept", "type": "cpp", "path": "cpp\\numeric\\fenv\\fetestexcept.html", "desc": "std::std::fetestexcept"}, {"name": "std::std::feupdateenv", "type": "cpp", "path": "cpp\\numeric\\fenv\\feupdateenv.html", "desc": "std::std::feupdateenv"}, {"name": "FE_DFL_ENV", "type": "cpp", "path": "cpp\\numeric\\fenv\\FE_DFL_ENV.html", "desc": "FE_DFL_ENV"}, {"name": "FE_DIVBYZERO, FE_INEXACT, FE_INVALID, FE_OVERFLOW, FE_UNDERFLOW, FE_ALL_EXCEPT", "type": "cpp", "path": "cpp\\numeric\\fenv\\FE_exceptions.html", "desc": "FE_DIVBYZERO, FE_INEXACT, FE_INVALID, FE_OVERFLOW, FE_UNDERFLOW, FE_ALL_EXCEPT"}, {"name": "FE_DOWNWARD, FE_TONEAREST, FE_TOWARDZERO, FE_UPWARD", "type": "cpp", "path": "cpp\\numeric\\fenv\\FE_round.html", "desc": "FE_DOWNWARD, FE_TONEAREST, FE_TOWARDZERO, FE_UPWARD"}, {"name": "std:: std:: std:: std::std::abs, std::labs, std::llabs, std::imaxabs", "type": "cpp", "path": "cpp\\numeric\\math\\abs.html", "desc": "std:: std:: std:: std::std::abs, std::labs, std::llabs, std::imaxabs"}, {"name": "std:: std:: std::std::acos, std::acosf, std::acosl", "type": "cpp", "path": "cpp\\numeric\\math\\acos.html", "desc": "std:: std:: std::std::acos, std::acosf, std::acosl"}, {"name": "std:: std:: std::std::acosh, std::acoshf, std::acoshl", "type": "cpp", "path": "cpp\\numeric\\math\\acosh.html", "desc": "std:: std:: std::std::acosh, std::acoshf, std::acoshl"}, {"name": "std:: std:: std::std::asin, std::asinf, std::asinl", "type": "cpp", "path": "cpp\\numeric\\math\\asin.html", "desc": "std:: std:: std::std::asin, std::asinf, std::asinl"}, {"name": "std:: std:: std::std::asinh, std::asinhf, std::asinhl", "type": "cpp", "path": "cpp\\numeric\\math\\asinh.html", "desc": "std:: std:: std::std::asinh, std::asinhf, std::asinhl"}, {"name": "std:: std:: std::std::atan, std::atanf, std::atanl", "type": "cpp", "path": "cpp\\numeric\\math\\atan.html", "desc": "std:: std:: std::std::atan, std::atanf, std::atanl"}, {"name": "std:: std:: std::std::atan2, std::atan2f, std::atan2l", "type": "cpp", "path": "cpp\\numeric\\math\\atan2.html", "desc": "std:: std:: std::std::atan2, std::atan2f, std::atan2l"}, {"name": "std:: std:: std::std::atanh, std::atanh, std::atanhl", "type": "cpp", "path": "cpp\\numeric\\math\\atanh.html", "desc": "std:: std:: std::std::atanh, std::atanh, std::atanhl"}, {"name": "std:: std:: std::std::cbrt, std::cbrtf, std::cbrtl", "type": "cpp", "path": "cpp\\numeric\\math\\cbrt.html", "desc": "std:: std:: std::std::cbrt, std::cbrtf, std::cbrtl"}, {"name": "std:: std:: std::std::ceil, std::ceilf, std::ceill", "type": "cpp", "path": "cpp\\numeric\\math\\ceil.html", "desc": "std:: std:: std::std::ceil, std::ceilf, std::ceill"}, {"name": "std:: std:: std::std::copysign, std::copysignf, std::copysignl", "type": "cpp", "path": "cpp\\numeric\\math\\copysign.html", "desc": "std:: std:: std::std::copysign, std::copysignf, std::copysignl"}, {"name": "std:: std:: std::std::cos, std::cosf, std::cosl", "type": "cpp", "path": "cpp\\numeric\\math\\cos.html", "desc": "std:: std:: std::std::cos, std::cosf, std::cosl"}, {"name": "std:: std:: std::std::cosh, std::coshf, std::coshl", "type": "cpp", "path": "cpp\\numeric\\math\\cosh.html", "desc": "std:: std:: std::std::cosh, std::coshf, std::coshl"}, {"name": "std:: std:: std:: std::std::div, std::ldiv, std::lldiv, std::imaxdiv", "type": "cpp", "path": "cpp\\numeric\\math\\div.html", "desc": "std:: std:: std:: std::std::div, std::ldiv, std::lldiv, std::imaxdiv"}, {"name": "std:: std:: std::std::erf, std::erff, std::erfl", "type": "cpp", "path": "cpp\\numeric\\math\\erf.html", "desc": "std:: std:: std::std::erf, std::erff, std::erfl"}, {"name": "std:: std:: std::std::erfc, std::erfcf, std::erfcl", "type": "cpp", "path": "cpp\\numeric\\math\\erfc.html", "desc": "std:: std:: std::std::erfc, std::erfcf, std::erfcl"}, {"name": "std:: std:: std::std::exp, std::expf, std::expl", "type": "cpp", "path": "cpp\\numeric\\math\\exp.html", "desc": "std:: std:: std::std::exp, std::expf, std::expl"}, {"name": "std:: std:: std::std::exp2, std::exp2f, std::exp2l", "type": "cpp", "path": "cpp\\numeric\\math\\exp2.html", "desc": "std:: std:: std::std::exp2, std::exp2f, std::exp2l"}, {"name": "std:: std:: std::std::expm1, std::expm1f, std::expm1l", "type": "cpp", "path": "cpp\\numeric\\math\\expm1.html", "desc": "std:: std:: std::std::expm1, std::expm1f, std::expm1l"}, {"name": "std:: (float) std:: std:: std::std::abs(float), std::fabs, std::fabsf, std::fabsl", "type": "cpp", "path": "cpp\\numeric\\math\\fabs.html", "desc": "std:: (float) std:: std:: std::std::abs(float), std::fabs, std::fabsf, std::fabsl"}, {"name": "std:: std:: std::std::fdim, std::fdimf, std::fdiml", "type": "cpp", "path": "cpp\\numeric\\math\\fdim.html", "desc": "std:: std:: std::std::fdim, std::fdimf, std::fdiml"}, {"name": "std:: std:: std::std::floor, std::floorf, std::floorl", "type": "cpp", "path": "cpp\\numeric\\math\\floor.html", "desc": "std:: std:: std::std::floor, std::floorf, std::floorl"}, {"name": "std:: std:: std::std::fma, std::fmaf, std::fmal", "type": "cpp", "path": "cpp\\numeric\\math\\fma.html", "desc": "std:: std:: std::std::fma, std::fmaf, std::fmal"}, {"name": "std:: std:: std::std::fmax, std::fmaxf, std::fmaxl", "type": "cpp", "path": "cpp\\numeric\\math\\fmax.html", "desc": "std:: std:: std::std::fmax, std::fmaxf, std::fmaxl"}, {"name": "std:: std:: std::std::fmin, std::fminf, std::fminl", "type": "cpp", "path": "cpp\\numeric\\math\\fmin.html", "desc": "std:: std:: std::std::fmin, std::fminf, std::fminl"}, {"name": "std:: std:: std::std::fmod, std::fmodf, std::fmodl", "type": "cpp", "path": "cpp\\numeric\\math\\fmod.html", "desc": "std:: std:: std::std::fmod, std::fmodf, std::fmodl"}, {"name": "std::std::fpclassify", "type": "cpp", "path": "cpp\\numeric\\math\\fpclassify.html", "desc": "std::std::fpclassify"}, {"name": "FP_NORMAL, FP_SUBNORMAL, FP_ZERO, FP_INFINITE, FP_NAN", "type": "cpp", "path": "cpp\\numeric\\math\\FP_categories.html", "desc": "FP_NORMAL, FP_SUBNORMAL, FP_ZERO, FP_INFINITE, FP_NAN"}, {"name": "std:: std:: std::std::frexp, std::frexpf, std::frexpl", "type": "cpp", "path": "cpp\\numeric\\math\\frexp.html", "desc": "std:: std:: std::std::frexp, std::frexpf, std::frexpl"}, {"name": "HUGE_VALF, HUGE_VAL, HUGE_VALL", "type": "cpp", "path": "cpp\\numeric\\math\\HUGE_VAL.html", "desc": "HUGE_VALF, HUGE_VAL, HUGE_VALL"}, {"name": "std:: std:: std::std::hypot, std::hypotf, std::hypotl", "type": "cpp", "path": "cpp\\numeric\\math\\hypot.html", "desc": "std:: std:: std::std::hypot, std::hypotf, std::hypotl"}, {"name": "std:: std:: std::std::ilogb, std::ilogbf, std::ilogbl", "type": "cpp", "path": "cpp\\numeric\\math\\ilogb.html", "desc": "std:: std:: std::std::ilogb, std::ilogbf, std::ilogbl"}, {"name": "INFINITY", "type": "cpp", "path": "cpp\\numeric\\math\\INFINITY.html", "desc": "INFINITY"}, {"name": "std::std::isfinite", "type": "cpp", "path": "cpp\\numeric\\math\\isfinite.html", "desc": "std::std::isfinite"}, {"name": "std::std::isgreater", "type": "cpp", "path": "cpp\\numeric\\math\\isgreater.html", "desc": "std::std::isgreater"}, {"name": "std::std::isgreaterequal", "type": "cpp", "path": "cpp\\numeric\\math\\isgreaterequal.html", "desc": "std::std::isgreaterequal"}, {"name": "std::std::isinf", "type": "cpp", "path": "cpp\\numeric\\math\\isinf.html", "desc": "std::std::isinf"}, {"name": "std::std::isless", "type": "cpp", "path": "cpp\\numeric\\math\\isless.html", "desc": "std::std::isless"}, {"name": "std::std::islessequal", "type": "cpp", "path": "cpp\\numeric\\math\\islessequal.html", "desc": "std::std::islessequal"}, {"name": "std::std::islessgreater", "type": "cpp", "path": "cpp\\numeric\\math\\islessgreater.html", "desc": "std::std::islessgreater"}, {"name": "std::std::isnan", "type": "cpp", "path": "cpp\\numeric\\math\\isnan.html", "desc": "std::std::isnan"}, {"name": "std::std::isnormal", "type": "cpp", "path": "cpp\\numeric\\math\\isnormal.html", "desc": "std::std::isnormal"}, {"name": "std::std::isunordered", "type": "cpp", "path": "cpp\\numeric\\math\\isunordered.html", "desc": "std::std::isunordered"}, {"name": "std:: std:: std::std::ldexp, std::ldexpf, std::ldexpl", "type": "cpp", "path": "cpp\\numeric\\math\\ldexp.html", "desc": "std:: std:: std::std::ldexp, std::ldexpf, std::ldexpl"}, {"name": "std:: std:: std::std::lgamma, std::lgammaf, std::lgammal", "type": "cpp", "path": "cpp\\numeric\\math\\lgamma.html", "desc": "std:: std:: std::std::lgamma, std::lgammaf, std::lgammal"}, {"name": "std:: std:: std::std::log, std::logf, std::logl", "type": "cpp", "path": "cpp\\numeric\\math\\log.html", "desc": "std:: std:: std::std::log, std::logf, std::logl"}, {"name": "std:: std:: std::std::log10, std::log10f, std::log10l", "type": "cpp", "path": "cpp\\numeric\\math\\log10.html", "desc": "std:: std:: std::std::log10, std::log10f, std::log10l"}, {"name": "std:: std:: std::std::log1p, std::log1pf, std::log1pl", "type": "cpp", "path": "cpp\\numeric\\math\\log1p.html", "desc": "std:: std:: std::std::log1p, std::log1pf, std::log1pl"}, {"name": "std:: std:: std::std::log2, std::log2f, std::log2l", "type": "cpp", "path": "cpp\\numeric\\math\\log2.html", "desc": "std:: std:: std::std::log2, std::log2f, std::log2l"}, {"name": "std:: std:: std::std::logb, std::logbf, std::logbl", "type": "cpp", "path": "cpp\\numeric\\math\\logb.html", "desc": "std:: std:: std::std::logb, std::logbf, std::logbl"}, {"name": "MATH_ERRNO, MATH_ERREXCEPT, math_errhandling", "type": "cpp", "path": "cpp\\numeric\\math\\math_errhandling.html", "desc": "MATH_ERRNO, MATH_ERREXCEPT, math_errhandling"}, {"name": "std:: std:: std::std::modf, std::modff, std::modfl", "type": "cpp", "path": "cpp\\numeric\\math\\modf.html", "desc": "std:: std:: std::std::modf, std::modff, std::modfl"}, {"name": "NAN", "type": "cpp", "path": "cpp\\numeric\\math\\NAN.html", "desc": "NAN"}, {"name": "std:: std:: std::std::nearbyint, std::nearbyintf, std::nearbyintl", "type": "cpp", "path": "cpp\\numeric\\math\\nearbyint.html", "desc": "std:: std:: std::std::nearbyint, std::nearbyintf, std::nearbyintl"}, {"name": "std:: std:: std:: std:: std:: std::std::nextafter, std::nextafterf, std::nextafterl, std::nexttoward, std::nexttowardf, std::nexttowardl", "type": "cpp", "path": "cpp\\numeric\\math\\nextafter.html", "desc": "std:: std:: std:: std:: std:: std::std::nextafter, std::nextafterf, std::nextafterl, std::nexttoward, std::nexttowardf, std::nexttowardl"}, {"name": "std:: std:: std::std::pow, std::powf, std::powl", "type": "cpp", "path": "cpp\\numeric\\math\\pow.html", "desc": "std:: std:: std::std::pow, std::powf, std::powl"}, {"name": "std:: std:: std::std::remainder, std::remainderf, std::remainderl", "type": "cpp", "path": "cpp\\numeric\\math\\remainder.html", "desc": "std:: std:: std::std::remainder, std::remainderf, std::remainderl"}, {"name": "std:: std:: std::std::remquo, std::remquof, std::remquol", "type": "cpp", "path": "cpp\\numeric\\math\\remquo.html", "desc": "std:: std:: std::std::remquo, std::remquof, std::remquol"}, {"name": "std:: std:: std:: std:: std:: std:: std:: std::std::rint, std::rintf, std::rintl, std::lrint, std::lrintf, std::lrintl, std::llrint, std::llrintf", "type": "cpp", "path": "cpp\\numeric\\math\\rint.html", "desc": "std:: std:: std:: std:: std:: std:: std:: std::std::rint, std::rintf, std::rintl, std::lrint, std::lrintf, std::lrintl, std::llrint, std::llrintf"}, {"name": "std:: std:: std:: std:: std:: std:: std:: std::std::round, std::roundf, std::roundl, std::lround, std::lroundf, std::lroundl, std::llround, std::llroundf", "type": "cpp", "path": "cpp\\numeric\\math\\round.html", "desc": "std:: std:: std:: std:: std:: std:: std:: std::std::round, std::roundf, std::roundl, std::lround, std::lroundf, std::lroundl, std::llround, std::llroundf"}, {"name": "std:: std:: std:: std:: std:: std::std::scalbn, std::scalbnf, std::scalbnl, std::scalbln, std::scalblnf, std::scalblnl", "type": "cpp", "path": "cpp\\numeric\\math\\scalbn.html", "desc": "std:: std:: std:: std:: std:: std::std::scalbn, std::scalbnf, std::scalbnl, std::scalbln, std::scalblnf, std::scalblnl"}, {"name": "std::std::signbit", "type": "cpp", "path": "cpp\\numeric\\math\\signbit.html", "desc": "std::std::signbit"}, {"name": "std:: std:: std::std::sin, std::sinf, std::sinl", "type": "cpp", "path": "cpp\\numeric\\math\\sin.html", "desc": "std:: std:: std::std::sin, std::sinf, std::sinl"}, {"name": "std:: std:: std::std::sinh, std::sinhf, std::sinhl", "type": "cpp", "path": "cpp\\numeric\\math\\sinh.html", "desc": "std:: std:: std::std::sinh, std::sinhf, std::sinhl"}, {"name": "std:: std:: std::std::sqrt, std::sqrtf, std::sqrtl", "type": "cpp", "path": "cpp\\numeric\\math\\sqrt.html", "desc": "std:: std:: std::std::sqrt, std::sqrtf, std::sqrtl"}, {"name": "std:: std:: std::std::tan, std::tanf, std::tanl", "type": "cpp", "path": "cpp\\numeric\\math\\tan.html", "desc": "std:: std:: std::std::tan, std::tanf, std::tanl"}, {"name": "std:: std:: std::std::tanh, std::tanhf, std::tanhl", "type": "cpp", "path": "cpp\\numeric\\math\\tanh.html", "desc": "std:: std:: std::std::tanh, std::tanhf, std::tanhl"}, {"name": "std:: std:: std::std::tgamma, std::tgammaf, std::tgammal", "type": "cpp", "path": "cpp\\numeric\\math\\tgamma.html", "desc": "std:: std:: std::std::tgamma, std::tgammaf, std::tgammal"}, {"name": "std:: std:: std::std::trunc, std::truncf, std::truncl", "type": "cpp", "path": "cpp\\numeric\\math\\trunc.html", "desc": "std:: std:: std::std::trunc, std::truncf, std::truncl"}, {"name": "std::std::bernoulli_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\bernoulli_distribution.html", "desc": "std::std::bernoulli_distribution"}, {"name": "std::std::binomial_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\binomial_distribution.html", "desc": "std::std::binomial_distribution"}, {"name": "std::std::cauchy_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\cauchy_distribution.html", "desc": "std::std::cauchy_distribution"}, {"name": "std::std::chi_squared_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\chi_squared_distribution.html", "desc": "std::std::chi_squared_distribution"}, {"name": "std::std::discard_block_engine", "type": "cpp", "path": "cpp\\numeric\\random\\discard_block_engine.html", "desc": "std::std::discard_block_engine"}, {"name": "std::std::discrete_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\discrete_distribution.html", "desc": "std::std::discrete_distribution"}, {"name": "std::std::exponential_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\exponential_distribution.html", "desc": "std::std::exponential_distribution"}, {"name": "std::std::extreme_value_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\extreme_value_distribution.html", "desc": "std::std::extreme_value_distribution"}, {"name": "std::std::fisher_f_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\fisher_f_distribution.html", "desc": "std::std::fisher_f_distribution"}, {"name": "std::std::gamma_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\gamma_distribution.html", "desc": "std::std::gamma_distribution"}, {"name": "std::std::generate_canonical", "type": "cpp", "path": "cpp\\numeric\\random\\generate_canonical.html", "desc": "std::std::generate_canonical"}, {"name": "std::std::geometric_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\geometric_distribution.html", "desc": "std::std::geometric_distribution"}, {"name": "std::std::independent_bits_engine", "type": "cpp", "path": "cpp\\numeric\\random\\independent_bits_engine.html", "desc": "std::std::independent_bits_engine"}, {"name": "std::std::linear_congruential_engine", "type": "cpp", "path": "cpp\\numeric\\random\\linear_congruential_engine.html", "desc": "std::std::linear_congruential_engine"}, {"name": "std::std::lognormal_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\lognormal_distribution.html", "desc": "std::std::lognormal_distribution"}, {"name": "std::std::mersenne_twister_engine", "type": "cpp", "path": "cpp\\numeric\\random\\mersenne_twister_engine.html", "desc": "std::std::mersenne_twister_engine"}, {"name": "std::std::negative_binomial_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\negative_binomial_distribution.html", "desc": "std::std::negative_binomial_distribution"}, {"name": "std::std::normal_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\normal_distribution.html", "desc": "std::std::normal_distribution"}, {"name": "std::std::piecewise_constant_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\piecewise_constant_distribution.html", "desc": "std::std::piecewise_constant_distribution"}, {"name": "std::std::piecewise_linear_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\piecewise_linear_distribution.html", "desc": "std::std::piecewise_linear_distribution"}, {"name": "std::std::poisson_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\poisson_distribution.html", "desc": "std::std::poisson_distribution"}, {"name": "std::std::rand", "type": "cpp", "path": "cpp\\numeric\\random\\rand.html", "desc": "std::std::rand"}, {"name": "std::std::random_device", "type": "cpp", "path": "cpp\\numeric\\random\\random_device.html", "desc": "std::std::random_device"}, {"name": "RAND_MAX", "type": "cpp", "path": "cpp\\numeric\\random\\RAND_MAX.html", "desc": "RAND_MAX"}, {"name": "std::std::seed_seq", "type": "cpp", "path": "cpp\\numeric\\random\\seed_seq.html", "desc": "std::std::seed_seq"}, {"name": "std::std::shuffle_order_engine", "type": "cpp", "path": "cpp\\numeric\\random\\shuffle_order_engine.html", "desc": "std::std::shuffle_order_engine"}, {"name": "std::std::srand", "type": "cpp", "path": "cpp\\numeric\\random\\srand.html", "desc": "std::std::srand"}, {"name": "std::std::student_t_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\student_t_distribution.html", "desc": "std::std::student_t_distribution"}, {"name": "std::std::subtract_with_carry_engine", "type": "cpp", "path": "cpp\\numeric\\random\\subtract_with_carry_engine.html", "desc": "std::std::subtract_with_carry_engine"}, {"name": "std::std::uniform_int_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\uniform_int_distribution.html", "desc": "std::std::uniform_int_distribution"}, {"name": "std::std::uniform_random_bit_generator", "type": "cpp", "path": "cpp\\numeric\\random\\uniform_random_bit_generator.html", "desc": "std::std::uniform_random_bit_generator"}, {"name": "std::std::uniform_real_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\uniform_real_distribution.html", "desc": "std::std::uniform_real_distribution"}, {"name": "std::std::weibull_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\weibull_distribution.html", "desc": "std::std::weibull_distribution"}, {"name": "std::bernoulli_distribution::std::bernoulli_distribution::bernoulli_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\bernoulli_distribution\\bernoulli_distribution.html", "desc": "std::bernoulli_distribution::std::bernoulli_distribution::bernoulli_distribution"}, {"name": "std::bernoulli_distribution::std::bernoulli_distribution::max", "type": "cpp", "path": "cpp\\numeric\\random\\bernoulli_distribution\\max.html", "desc": "std::bernoulli_distribution::std::bernoulli_distribution::max"}, {"name": "std::bernoulli_distribution::std::bernoulli_distribution::min", "type": "cpp", "path": "cpp\\numeric\\random\\bernoulli_distribution\\min.html", "desc": "std::bernoulli_distribution::std::bernoulli_distribution::min"}, {"name": "std::bernoulli_distribution::std::bernoulli_distribution::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\bernoulli_distribution\\operator().html", "desc": "std::bernoulli_distribution::std::bernoulli_distribution::operator()"}, {"name": "operator==,!=(std::bernoulli_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\bernoulli_distribution\\operator_cmp.html", "desc": "operator==,!=(std::bernoulli_distribution)"}, {"name": "operator<<,>>(std::bernoulli_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\bernoulli_distribution\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::bernoulli_distribution)"}, {"name": "std::bernoulli_distribution::std::bernoulli_distribution::p", "type": "cpp", "path": "cpp\\numeric\\random\\bernoulli_distribution\\p.html", "desc": "std::bernoulli_distribution::std::bernoulli_distribution::p"}, {"name": "std::bernoulli_distribution::std::bernoulli_distribution::param", "type": "cpp", "path": "cpp\\numeric\\random\\bernoulli_distribution\\param.html", "desc": "std::bernoulli_distribution::std::bernoulli_distribution::param"}, {"name": "std::bernoulli_distribution::std::bernoulli_distribution::reset", "type": "cpp", "path": "cpp\\numeric\\random\\bernoulli_distribution\\reset.html", "desc": "std::bernoulli_distribution::std::bernoulli_distribution::reset"}, {"name": "std::binomial_distribution<IntType>::std::binomial_distribution<IntType>::binomial_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\binomial_distribution\\binomial_distribution.html", "desc": "std::binomial_distribution<IntType>::std::binomial_distribution<IntType>::binomial_distribution"}, {"name": "std::binomial_distribution<IntType>::std::binomial_distribution<IntType>::max", "type": "cpp", "path": "cpp\\numeric\\random\\binomial_distribution\\max.html", "desc": "std::binomial_distribution<IntType>::std::binomial_distribution<IntType>::max"}, {"name": "std::binomial_distribution<IntType>::std::binomial_distribution<IntType>::min", "type": "cpp", "path": "cpp\\numeric\\random\\binomial_distribution\\min.html", "desc": "std::binomial_distribution<IntType>::std::binomial_distribution<IntType>::min"}, {"name": "std::binomial_distribution<IntType>::std::binomial_distribution<IntType>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\binomial_distribution\\operator().html", "desc": "std::binomial_distribution<IntType>::std::binomial_distribution<IntType>::operator()"}, {"name": "operator==,!=(std::binomial_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\binomial_distribution\\operator_cmp.html", "desc": "operator==,!=(std::binomial_distribution)"}, {"name": "operator<<,>>(std::binomial_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\binomial_distribution\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::binomial_distribution)"}, {"name": "std::binomial_distribution<IntType>::std::binomial_distribution<IntType>::param", "type": "cpp", "path": "cpp\\numeric\\random\\binomial_distribution\\param.html", "desc": "std::binomial_distribution<IntType>::std::binomial_distribution<IntType>::param"}, {"name": "std::binomial_distribution<IntType>::std::binomial_distribution<IntType>::p, t", "type": "cpp", "path": "cpp\\numeric\\random\\binomial_distribution\\params.html", "desc": "std::binomial_distribution<IntType>::std::binomial_distribution<IntType>::p, t"}, {"name": "std::binomial_distribution<IntType>::std::binomial_distribution<IntType>::reset", "type": "cpp", "path": "cpp\\numeric\\random\\binomial_distribution\\reset.html", "desc": "std::binomial_distribution<IntType>::std::binomial_distribution<IntType>::reset"}, {"name": "std::cauchy_distribution<RealType>::std::cauchy_distribution<RealType>::cauchy_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\cauchy_distribution\\cauchy_distribution.html", "desc": "std::cauchy_distribution<RealType>::std::cauchy_distribution<RealType>::cauchy_distribution"}, {"name": "std::cauchy_distribution<RealType>::std::cauchy_distribution<RealType>::max", "type": "cpp", "path": "cpp\\numeric\\random\\cauchy_distribution\\max.html", "desc": "std::cauchy_distribution<RealType>::std::cauchy_distribution<RealType>::max"}, {"name": "std::cauchy_distribution<RealType>::std::cauchy_distribution<RealType>::min", "type": "cpp", "path": "cpp\\numeric\\random\\cauchy_distribution\\min.html", "desc": "std::cauchy_distribution<RealType>::std::cauchy_distribution<RealType>::min"}, {"name": "std::cauchy_distribution<RealType>::std::cauchy_distribution<RealType>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\cauchy_distribution\\operator().html", "desc": "std::cauchy_distribution<RealType>::std::cauchy_distribution<RealType>::operator()"}, {"name": "operator==,!=(std::cauchy_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\cauchy_distribution\\operator_cmp.html", "desc": "operator==,!=(std::cauchy_distribution)"}, {"name": "operator<<,>>(std::cauchy_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\cauchy_distribution\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::cauchy_distribution)"}, {"name": "std::cauchy_distribution<RealType>::std::cauchy_distribution<RealType>::param", "type": "cpp", "path": "cpp\\numeric\\random\\cauchy_distribution\\param.html", "desc": "std::cauchy_distribution<RealType>::std::cauchy_distribution<RealType>::param"}, {"name": "std::cauchy_distribution<RealType>::std::cauchy_distribution<RealType>::a, b", "type": "cpp", "path": "cpp\\numeric\\random\\cauchy_distribution\\params.html", "desc": "std::cauchy_distribution<RealType>::std::cauchy_distribution<RealType>::a, b"}, {"name": "std::cauchy_distribution<RealType>::std::cauchy_distribution<RealType>::reset", "type": "cpp", "path": "cpp\\numeric\\random\\cauchy_distribution\\reset.html", "desc": "std::cauchy_distribution<RealType>::std::cauchy_distribution<RealType>::reset"}, {"name": "std::chi_squared_distribution<RealType>::std::chi_squared_distribution<RealType>::chi_squared_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\chi_squared_distribution\\chi_squared_distribution.html", "desc": "std::chi_squared_distribution<RealType>::std::chi_squared_distribution<RealType>::chi_squared_distribution"}, {"name": "std::chi_squared_distribution<RealType>::std::chi_squared_distribution<RealType>::max", "type": "cpp", "path": "cpp\\numeric\\random\\chi_squared_distribution\\max.html", "desc": "std::chi_squared_distribution<RealType>::std::chi_squared_distribution<RealType>::max"}, {"name": "std::chi_squared_distribution<RealType>::std::chi_squared_distribution<RealType>::min", "type": "cpp", "path": "cpp\\numeric\\random\\chi_squared_distribution\\min.html", "desc": "std::chi_squared_distribution<RealType>::std::chi_squared_distribution<RealType>::min"}, {"name": "std::chi_squared_distribution<RealType>::std::chi_squared_distribution<RealType>::n", "type": "cpp", "path": "cpp\\numeric\\random\\chi_squared_distribution\\n.html", "desc": "std::chi_squared_distribution<RealType>::std::chi_squared_distribution<RealType>::n"}, {"name": "std::chi_squared_distribution<RealType>::std::chi_squared_distribution<RealType>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\chi_squared_distribution\\operator().html", "desc": "std::chi_squared_distribution<RealType>::std::chi_squared_distribution<RealType>::operator()"}, {"name": "operator==,!=(std::chi_squared_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\chi_squared_distribution\\operator_cmp.html", "desc": "operator==,!=(std::chi_squared_distribution)"}, {"name": "operator<<,>>(std::chi_squared_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\chi_squared_distribution\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::chi_squared_distribution)"}, {"name": "std::chi_squared_distribution<RealType>::std::chi_squared_distribution<RealType>::param", "type": "cpp", "path": "cpp\\numeric\\random\\chi_squared_distribution\\param.html", "desc": "std::chi_squared_distribution<RealType>::std::chi_squared_distribution<RealType>::param"}, {"name": "std::chi_squared_distribution<RealType>::std::chi_squared_distribution<RealType>::reset", "type": "cpp", "path": "cpp\\numeric\\random\\chi_squared_distribution\\reset.html", "desc": "std::chi_squared_distribution<RealType>::std::chi_squared_distribution<RealType>::reset"}, {"name": "std::discard_block_engine<Engine,P,R>::std::discard_block_engine<Engine,P,R>::base", "type": "cpp", "path": "cpp\\numeric\\random\\discard_block_engine\\base.html", "desc": "std::discard_block_engine<Engine,P,R>::std::discard_block_engine<Engine,P,R>::base"}, {"name": "std::discard_block_engine<Engine,P,R>::std::discard_block_engine<Engine,P,R>::discard", "type": "cpp", "path": "cpp\\numeric\\random\\discard_block_engine\\discard.html", "desc": "std::discard_block_engine<Engine,P,R>::std::discard_block_engine<Engine,P,R>::discard"}, {"name": "std::discard_block_engine<Engine,P,R>::std::discard_block_engine<Engine,P,R>::discard_block_engine", "type": "cpp", "path": "cpp\\numeric\\random\\discard_block_engine\\discard_block_engine.html", "desc": "std::discard_block_engine<Engine,P,R>::std::discard_block_engine<Engine,P,R>::discard_block_engine"}, {"name": "std::discard_block_engine<Engine,P,R>::std::discard_block_engine<Engine,P,R>::max", "type": "cpp", "path": "cpp\\numeric\\random\\discard_block_engine\\max.html", "desc": "std::discard_block_engine<Engine,P,R>::std::discard_block_engine<Engine,P,R>::max"}, {"name": "std::discard_block_engine<Engine,P,R>::std::discard_block_engine<Engine,P,R>::min", "type": "cpp", "path": "cpp\\numeric\\random\\discard_block_engine\\min.html", "desc": "std::discard_block_engine<Engine,P,R>::std::discard_block_engine<Engine,P,R>::min"}, {"name": "std::discard_block_engine<Engine,P,R>::std::discard_block_engine<Engine,P,R>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\discard_block_engine\\operator().html", "desc": "std::discard_block_engine<Engine,P,R>::std::discard_block_engine<Engine,P,R>::operator()"}, {"name": "operator==,!=(std::discard_block_engine)", "type": "cpp", "path": "cpp\\numeric\\random\\discard_block_engine\\operator_cmp.html", "desc": "operator==,!=(std::discard_block_engine)"}, {"name": "operator<<,>>(std::discard_block_engine)", "type": "cpp", "path": "cpp\\numeric\\random\\discard_block_engine\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::discard_block_engine)"}, {"name": "std::discard_block_engine<Engine,P,R>::std::discard_block_engine<Engine,P,R>::seed", "type": "cpp", "path": "cpp\\numeric\\random\\discard_block_engine\\seed.html", "desc": "std::discard_block_engine<Engine,P,R>::std::discard_block_engine<Engine,P,R>::seed"}, {"name": "std::discrete_distribution<IntType>::std::discrete_distribution<IntType>::discrete_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\discrete_distribution\\discrete_distribution.html", "desc": "std::discrete_distribution<IntType>::std::discrete_distribution<IntType>::discrete_distribution"}, {"name": "std::discrete_distribution<IntType>::std::discrete_distribution<IntType>::max", "type": "cpp", "path": "cpp\\numeric\\random\\discrete_distribution\\max.html", "desc": "std::discrete_distribution<IntType>::std::discrete_distribution<IntType>::max"}, {"name": "std::discrete_distribution<IntType>::std::discrete_distribution<IntType>::min", "type": "cpp", "path": "cpp\\numeric\\random\\discrete_distribution\\min.html", "desc": "std::discrete_distribution<IntType>::std::discrete_distribution<IntType>::min"}, {"name": "std::discrete_distribution<IntType>::std::discrete_distribution<IntType>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\discrete_distribution\\operator().html", "desc": "std::discrete_distribution<IntType>::std::discrete_distribution<IntType>::operator()"}, {"name": "operator==,!=(std::discrete_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\discrete_distribution\\operator_cmp.html", "desc": "operator==,!=(std::discrete_distribution)"}, {"name": "operator<<,>>(std::discrete_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\discrete_distribution\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::discrete_distribution)"}, {"name": "std::discrete_distribution<IntType>::std::discrete_distribution<IntType>::param", "type": "cpp", "path": "cpp\\numeric\\random\\discrete_distribution\\param.html", "desc": "std::discrete_distribution<IntType>::std::discrete_distribution<IntType>::param"}, {"name": "std::discrete_distribution<IntType>::std::discrete_distribution<IntType>::probabilities", "type": "cpp", "path": "cpp\\numeric\\random\\discrete_distribution\\probabilities.html", "desc": "std::discrete_distribution<IntType>::std::discrete_distribution<IntType>::probabilities"}, {"name": "std::discrete_distribution<IntType>::std::discrete_distribution<IntType>::reset", "type": "cpp", "path": "cpp\\numeric\\random\\discrete_distribution\\reset.html", "desc": "std::discrete_distribution<IntType>::std::discrete_distribution<IntType>::reset"}, {"name": "std::exponential_distribution<RealType>::std::exponential_distribution<RealType>::exponential_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\exponential_distribution\\exponential_distribution.html", "desc": "std::exponential_distribution<RealType>::std::exponential_distribution<RealType>::exponential_distribution"}, {"name": "std::exponential_distribution<RealType>::std::exponential_distribution<RealType>::lambda", "type": "cpp", "path": "cpp\\numeric\\random\\exponential_distribution\\lambda.html", "desc": "std::exponential_distribution<RealType>::std::exponential_distribution<RealType>::lambda"}, {"name": "std::exponential_distribution<RealType>::std::exponential_distribution<RealType>::max", "type": "cpp", "path": "cpp\\numeric\\random\\exponential_distribution\\max.html", "desc": "std::exponential_distribution<RealType>::std::exponential_distribution<RealType>::max"}, {"name": "std::exponential_distribution<RealType>::std::exponential_distribution<RealType>::min", "type": "cpp", "path": "cpp\\numeric\\random\\exponential_distribution\\min.html", "desc": "std::exponential_distribution<RealType>::std::exponential_distribution<RealType>::min"}, {"name": "std::exponential_distribution<RealType>::std::exponential_distribution<RealType>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\exponential_distribution\\operator().html", "desc": "std::exponential_distribution<RealType>::std::exponential_distribution<RealType>::operator()"}, {"name": "operator==,!=(std::exponential_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\exponential_distribution\\operator_cmp.html", "desc": "operator==,!=(std::exponential_distribution)"}, {"name": "operator<<,>>(std::exponential_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\exponential_distribution\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::exponential_distribution)"}, {"name": "std::exponential_distribution<RealType>::std::exponential_distribution<RealType>::param", "type": "cpp", "path": "cpp\\numeric\\random\\exponential_distribution\\param.html", "desc": "std::exponential_distribution<RealType>::std::exponential_distribution<RealType>::param"}, {"name": "std::exponential_distribution<RealType>::std::exponential_distribution<RealType>::reset", "type": "cpp", "path": "cpp\\numeric\\random\\exponential_distribution\\reset.html", "desc": "std::exponential_distribution<RealType>::std::exponential_distribution<RealType>::reset"}, {"name": "std::extreme_value_distribution<RealType>::std::extreme_value_distribution<RealType>::extreme_value_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\extreme_value_distribution\\extreme_value_distribution.html", "desc": "std::extreme_value_distribution<RealType>::std::extreme_value_distribution<RealType>::extreme_value_distribution"}, {"name": "std::extreme_value_distribution<RealType>::std::extreme_value_distribution<RealType>::max", "type": "cpp", "path": "cpp\\numeric\\random\\extreme_value_distribution\\max.html", "desc": "std::extreme_value_distribution<RealType>::std::extreme_value_distribution<RealType>::max"}, {"name": "std::extreme_value_distribution<RealType>::std::extreme_value_distribution<RealType>::min", "type": "cpp", "path": "cpp\\numeric\\random\\extreme_value_distribution\\min.html", "desc": "std::extreme_value_distribution<RealType>::std::extreme_value_distribution<RealType>::min"}, {"name": "std::extreme_value_distribution<RealType>::std::extreme_value_distribution<RealType>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\extreme_value_distribution\\operator().html", "desc": "std::extreme_value_distribution<RealType>::std::extreme_value_distribution<RealType>::operator()"}, {"name": "operator==,!=(std::extreme_value_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\extreme_value_distribution\\operator_cmp.html", "desc": "operator==,!=(std::extreme_value_distribution)"}, {"name": "operator<<,>>(std::extreme_value_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\extreme_value_distribution\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::extreme_value_distribution)"}, {"name": "std::extreme_value_distribution<RealType>::std::extreme_value_distribution<RealType>::param", "type": "cpp", "path": "cpp\\numeric\\random\\extreme_value_distribution\\param.html", "desc": "std::extreme_value_distribution<RealType>::std::extreme_value_distribution<RealType>::param"}, {"name": "std::extreme_value_distribution<RealType>::std::extreme_value_distribution<RealType>::a, b", "type": "cpp", "path": "cpp\\numeric\\random\\extreme_value_distribution\\params.html", "desc": "std::extreme_value_distribution<RealType>::std::extreme_value_distribution<RealType>::a, b"}, {"name": "std::extreme_value_distribution<RealType>::std::extreme_value_distribution<RealType>::reset", "type": "cpp", "path": "cpp\\numeric\\random\\extreme_value_distribution\\reset.html", "desc": "std::extreme_value_distribution<RealType>::std::extreme_value_distribution<RealType>::reset"}, {"name": "std::fisher_f_distribution<RealType>::std::fisher_f_distribution<RealType>::fisher_f_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\fisher_f_distribution\\fisher_f_distribution.html", "desc": "std::fisher_f_distribution<RealType>::std::fisher_f_distribution<RealType>::fisher_f_distribution"}, {"name": "std::fisher_f_distribution<RealType>::std::fisher_f_distribution<RealType>::max", "type": "cpp", "path": "cpp\\numeric\\random\\fisher_f_distribution\\max.html", "desc": "std::fisher_f_distribution<RealType>::std::fisher_f_distribution<RealType>::max"}, {"name": "std::fisher_f_distribution<RealType>::std::fisher_f_distribution<RealType>::min", "type": "cpp", "path": "cpp\\numeric\\random\\fisher_f_distribution\\min.html", "desc": "std::fisher_f_distribution<RealType>::std::fisher_f_distribution<RealType>::min"}, {"name": "std::fisher_f_distribution<RealType>::std::fisher_f_distribution<RealType>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\fisher_f_distribution\\operator().html", "desc": "std::fisher_f_distribution<RealType>::std::fisher_f_distribution<RealType>::operator()"}, {"name": "operator==,!=(std::fisher_f_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\fisher_f_distribution\\operator_cmp.html", "desc": "operator==,!=(std::fisher_f_distribution)"}, {"name": "operator<<,>>(std::fisher_f_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\fisher_f_distribution\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::fisher_f_distribution)"}, {"name": "std::fisher_f_distribution<RealType>::std::fisher_f_distribution<RealType>::param", "type": "cpp", "path": "cpp\\numeric\\random\\fisher_f_distribution\\param.html", "desc": "std::fisher_f_distribution<RealType>::std::fisher_f_distribution<RealType>::param"}, {"name": "std::fisher_f_distribution<RealType>::std::fisher_f_distribution<RealType>::m, n", "type": "cpp", "path": "cpp\\numeric\\random\\fisher_f_distribution\\params.html", "desc": "std::fisher_f_distribution<RealType>::std::fisher_f_distribution<RealType>::m, n"}, {"name": "std::fisher_f_distribution<RealType>::std::fisher_f_distribution<RealType>::reset", "type": "cpp", "path": "cpp\\numeric\\random\\fisher_f_distribution\\reset.html", "desc": "std::fisher_f_distribution<RealType>::std::fisher_f_distribution<RealType>::reset"}, {"name": "std::gamma_distribution<RealType>::std::gamma_distribution<RealType>::gamma_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\gamma_distribution\\gamma_distribution.html", "desc": "std::gamma_distribution<RealType>::std::gamma_distribution<RealType>::gamma_distribution"}, {"name": "std::gamma_distribution<RealType>::std::gamma_distribution<RealType>::max", "type": "cpp", "path": "cpp\\numeric\\random\\gamma_distribution\\max.html", "desc": "std::gamma_distribution<RealType>::std::gamma_distribution<RealType>::max"}, {"name": "std::gamma_distribution<RealType>::std::gamma_distribution<RealType>::min", "type": "cpp", "path": "cpp\\numeric\\random\\gamma_distribution\\min.html", "desc": "std::gamma_distribution<RealType>::std::gamma_distribution<RealType>::min"}, {"name": "std::gamma_distribution<RealType>::std::gamma_distribution<RealType>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\gamma_distribution\\operator().html", "desc": "std::gamma_distribution<RealType>::std::gamma_distribution<RealType>::operator()"}, {"name": "operator==,!=(std::gamma_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\gamma_distribution\\operator_cmp.html", "desc": "operator==,!=(std::gamma_distribution)"}, {"name": "operator<<,>>(std::gamma_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\gamma_distribution\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::gamma_distribution)"}, {"name": "std::gamma_distribution<RealType>::std::gamma_distribution<RealType>::param", "type": "cpp", "path": "cpp\\numeric\\random\\gamma_distribution\\param.html", "desc": "std::gamma_distribution<RealType>::std::gamma_distribution<RealType>::param"}, {"name": "std::gamma_distribution<RealType>::std::gamma_distribution<RealType>::alpha, beta", "type": "cpp", "path": "cpp\\numeric\\random\\gamma_distribution\\params.html", "desc": "std::gamma_distribution<RealType>::std::gamma_distribution<RealType>::alpha, beta"}, {"name": "std::gamma_distribution<RealType>::std::gamma_distribution<RealType>::reset", "type": "cpp", "path": "cpp\\numeric\\random\\gamma_distribution\\reset.html", "desc": "std::gamma_distribution<RealType>::std::gamma_distribution<RealType>::reset"}, {"name": "std::geometric_distribution<IntType>::std::geometric_distribution<IntType>::geometric_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\geometric_distribution\\geometric_distribution.html", "desc": "std::geometric_distribution<IntType>::std::geometric_distribution<IntType>::geometric_distribution"}, {"name": "std::geometric_distribution<IntType>::std::geometric_distribution<IntType>::max", "type": "cpp", "path": "cpp\\numeric\\random\\geometric_distribution\\max.html", "desc": "std::geometric_distribution<IntType>::std::geometric_distribution<IntType>::max"}, {"name": "std::geometric_distribution<IntType>::std::geometric_distribution<IntType>::min", "type": "cpp", "path": "cpp\\numeric\\random\\geometric_distribution\\min.html", "desc": "std::geometric_distribution<IntType>::std::geometric_distribution<IntType>::min"}, {"name": "std::geometric_distribution<IntType>::std::geometric_distribution<IntType>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\geometric_distribution\\operator().html", "desc": "std::geometric_distribution<IntType>::std::geometric_distribution<IntType>::operator()"}, {"name": "operator==,!=(std::geometric_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\geometric_distribution\\operator_cmp.html", "desc": "operator==,!=(std::geometric_distribution)"}, {"name": "operator<<,>>(std::geometric_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\geometric_distribution\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::geometric_distribution)"}, {"name": "std::geometric_distribution<IntType>::std::geometric_distribution<IntType>::p", "type": "cpp", "path": "cpp\\numeric\\random\\geometric_distribution\\p.html", "desc": "std::geometric_distribution<IntType>::std::geometric_distribution<IntType>::p"}, {"name": "std::geometric_distribution<IntType>::std::geometric_distribution<IntType>::param", "type": "cpp", "path": "cpp\\numeric\\random\\geometric_distribution\\param.html", "desc": "std::geometric_distribution<IntType>::std::geometric_distribution<IntType>::param"}, {"name": "std::geometric_distribution<IntType>::std::geometric_distribution<IntType>::reset", "type": "cpp", "path": "cpp\\numeric\\random\\geometric_distribution\\reset.html", "desc": "std::geometric_distribution<IntType>::std::geometric_distribution<IntType>::reset"}, {"name": "std::independent_bits_engine<Engine,W,UIntType>::std::independent_bits_engine<Engine,W,UIntType>::base", "type": "cpp", "path": "cpp\\numeric\\random\\independent_bits_engine\\base.html", "desc": "std::independent_bits_engine<Engine,W,UIntType>::std::independent_bits_engine<Engine,W,UIntType>::base"}, {"name": "std::independent_bits_engine<Engine,W,UIntType>::std::independent_bits_engine<Engine,W,UIntType>::discard", "type": "cpp", "path": "cpp\\numeric\\random\\independent_bits_engine\\discard.html", "desc": "std::independent_bits_engine<Engine,W,UIntType>::std::independent_bits_engine<Engine,W,UIntType>::discard"}, {"name": "std::independent_bits_engine<Engine,W,UIntType>::std::independent_bits_engine<Engine,W,UIntType>::independent_bits_engine", "type": "cpp", "path": "cpp\\numeric\\random\\independent_bits_engine\\independent_bits_engine.html", "desc": "std::independent_bits_engine<Engine,W,UIntType>::std::independent_bits_engine<Engine,W,UIntType>::independent_bits_engine"}, {"name": "std::independent_bits_engine<Engine,W,UIntType>::std::independent_bits_engine<Engine,W,UIntType>::max", "type": "cpp", "path": "cpp\\numeric\\random\\independent_bits_engine\\max.html", "desc": "std::independent_bits_engine<Engine,W,UIntType>::std::independent_bits_engine<Engine,W,UIntType>::max"}, {"name": "std::independent_bits_engine<Engine,W,UIntType>::std::independent_bits_engine<Engine,W,UIntType>::min", "type": "cpp", "path": "cpp\\numeric\\random\\independent_bits_engine\\min.html", "desc": "std::independent_bits_engine<Engine,W,UIntType>::std::independent_bits_engine<Engine,W,UIntType>::min"}, {"name": "std::independent_bits_engine<Engine,W,UIntType>::std::independent_bits_engine<Engine,W,UIntType>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\independent_bits_engine\\operator().html", "desc": "std::independent_bits_engine<Engine,W,UIntType>::std::independent_bits_engine<Engine,W,UIntType>::operator()"}, {"name": "operator==,!=(std::independent_bits_engine)", "type": "cpp", "path": "cpp\\numeric\\random\\independent_bits_engine\\operator_cmp.html", "desc": "operator==,!=(std::independent_bits_engine)"}, {"name": "operator<<,>>(std::independent_bits_engine)", "type": "cpp", "path": "cpp\\numeric\\random\\independent_bits_engine\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::independent_bits_engine)"}, {"name": "std::independent_bits_engine<Engine,W,UIntType>::std::independent_bits_engine<Engine,W,UIntType>::seed", "type": "cpp", "path": "cpp\\numeric\\random\\independent_bits_engine\\seed.html", "desc": "std::independent_bits_engine<Engine,W,UIntType>::std::independent_bits_engine<Engine,W,UIntType>::seed"}, {"name": "std::linear_congruential_engine<UIntType,a,c,m>::std::linear_congruential_engine<UIntType,a,c,m>::discard", "type": "cpp", "path": "cpp\\numeric\\random\\linear_congruential_engine\\discard.html", "desc": "std::linear_congruential_engine<UIntType,a,c,m>::std::linear_congruential_engine<UIntType,a,c,m>::discard"}, {"name": "std::linear_congruential_engine<UIntType,a,c,m>::std::linear_congruential_engine<UIntType,a,c,m>::linear_congruential_engine", "type": "cpp", "path": "cpp\\numeric\\random\\linear_congruential_engine\\linear_congruential_engine.html", "desc": "std::linear_congruential_engine<UIntType,a,c,m>::std::linear_congruential_engine<UIntType,a,c,m>::linear_congruential_engine"}, {"name": "std::linear_congruential_engine<UIntType,a,c,m>::std::linear_congruential_engine<UIntType,a,c,m>::max", "type": "cpp", "path": "cpp\\numeric\\random\\linear_congruential_engine\\max.html", "desc": "std::linear_congruential_engine<UIntType,a,c,m>::std::linear_congruential_engine<UIntType,a,c,m>::max"}, {"name": "std::linear_congruential_engine<UIntType,a,c,m>::std::linear_congruential_engine<UIntType,a,c,m>::min", "type": "cpp", "path": "cpp\\numeric\\random\\linear_congruential_engine\\min.html", "desc": "std::linear_congruential_engine<UIntType,a,c,m>::std::linear_congruential_engine<UIntType,a,c,m>::min"}, {"name": "std::linear_congruential_engine<UIntType,a,c,m>::std::linear_congruential_engine<UIntType,a,c,m>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\linear_congruential_engine\\operator().html", "desc": "std::linear_congruential_engine<UIntType,a,c,m>::std::linear_congruential_engine<UIntType,a,c,m>::operator()"}, {"name": "operator==,!=(std::linear_congruential_engine)", "type": "cpp", "path": "cpp\\numeric\\random\\linear_congruential_engine\\operator_cmp.html", "desc": "operator==,!=(std::linear_congruential_engine)"}, {"name": "operator<<,>>(std::linear_congruential_engine)", "type": "cpp", "path": "cpp\\numeric\\random\\linear_congruential_engine\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::linear_congruential_engine)"}, {"name": "std::linear_congruential_engine<UIntType,a,c,m>::std::linear_congruential_engine<UIntType,a,c,m>::seed", "type": "cpp", "path": "cpp\\numeric\\random\\linear_congruential_engine\\seed.html", "desc": "std::linear_congruential_engine<UIntType,a,c,m>::std::linear_congruential_engine<UIntType,a,c,m>::seed"}, {"name": "std::lognormal_distribution<RealType>::std::lognormal_distribution<RealType>::lognormal_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\lognormal_distribution\\lognormal_distribution.html", "desc": "std::lognormal_distribution<RealType>::std::lognormal_distribution<RealType>::lognormal_distribution"}, {"name": "std::lognormal_distribution<RealType>::std::lognormal_distribution<RealType>::max", "type": "cpp", "path": "cpp\\numeric\\random\\lognormal_distribution\\max.html", "desc": "std::lognormal_distribution<RealType>::std::lognormal_distribution<RealType>::max"}, {"name": "std::lognormal_distribution<RealType>::std::lognormal_distribution<RealType>::min", "type": "cpp", "path": "cpp\\numeric\\random\\lognormal_distribution\\min.html", "desc": "std::lognormal_distribution<RealType>::std::lognormal_distribution<RealType>::min"}, {"name": "std::lognormal_distribution<RealType>::std::lognormal_distribution<RealType>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\lognormal_distribution\\operator().html", "desc": "std::lognormal_distribution<RealType>::std::lognormal_distribution<RealType>::operator()"}, {"name": "operator==,!=(std::lognormal_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\lognormal_distribution\\operator_cmp.html", "desc": "operator==,!=(std::lognormal_distribution)"}, {"name": "operator<<,>>(std::lognormal_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\lognormal_distribution\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::lognormal_distribution)"}, {"name": "std::lognormal_distribution<RealType>::std::lognormal_distribution<RealType>::param", "type": "cpp", "path": "cpp\\numeric\\random\\lognormal_distribution\\param.html", "desc": "std::lognormal_distribution<RealType>::std::lognormal_distribution<RealType>::param"}, {"name": "std::lognormal_distribution<RealType>::std::lognormal_distribution<RealType>::m, s", "type": "cpp", "path": "cpp\\numeric\\random\\lognormal_distribution\\params.html", "desc": "std::lognormal_distribution<RealType>::std::lognormal_distribution<RealType>::m, s"}, {"name": "std::lognormal_distribution<RealType>::std::lognormal_distribution<RealType>::reset", "type": "cpp", "path": "cpp\\numeric\\random\\lognormal_distribution\\reset.html", "desc": "std::lognormal_distribution<RealType>::std::lognormal_distribution<RealType>::reset"}, {"name": "std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::discard", "type": "cpp", "path": "cpp\\numeric\\random\\mersenne_twister_engine\\discard.html", "desc": "std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::discard"}, {"name": "std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::max", "type": "cpp", "path": "cpp\\numeric\\random\\mersenne_twister_engine\\max.html", "desc": "std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::max"}, {"name": "std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::mersenne_twister_engine", "type": "cpp", "path": "cpp\\numeric\\random\\mersenne_twister_engine\\mersenne_twister_engine.html", "desc": "std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::mersenne_twister_engine"}, {"name": "std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::min", "type": "cpp", "path": "cpp\\numeric\\random\\mersenne_twister_engine\\min.html", "desc": "std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::min"}, {"name": "std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\mersenne_twister_engine\\operator().html", "desc": "std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::operator()"}, {"name": "operator==,!=(std::mersenne_twister_engine)", "type": "cpp", "path": "cpp\\numeric\\random\\mersenne_twister_engine\\operator_cmp.html", "desc": "operator==,!=(std::mersenne_twister_engine)"}, {"name": "operator<<,>>(std::mersenne_twister_engine)", "type": "cpp", "path": "cpp\\numeric\\random\\mersenne_twister_engine\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::mersenne_twister_engine)"}, {"name": "std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::seed", "type": "cpp", "path": "cpp\\numeric\\random\\mersenne_twister_engine\\seed.html", "desc": "std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::std::mersenne_twister_engine<UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f>::seed"}, {"name": "std::negative_binomial_distribution<IntType>::std::negative_binomial_distribution<IntType>::max", "type": "cpp", "path": "cpp\\numeric\\random\\negative_binomial_distribution\\max.html", "desc": "std::negative_binomial_distribution<IntType>::std::negative_binomial_distribution<IntType>::max"}, {"name": "std::negative_binomial_distribution<IntType>::std::negative_binomial_distribution<IntType>::min", "type": "cpp", "path": "cpp\\numeric\\random\\negative_binomial_distribution\\min.html", "desc": "std::negative_binomial_distribution<IntType>::std::negative_binomial_distribution<IntType>::min"}, {"name": "std::negative_binomial_distribution<IntType>::std::negative_binomial_distribution<IntType>::negative_binomial_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\negative_binomial_distribution\\negative_binomial_distribution.html", "desc": "std::negative_binomial_distribution<IntType>::std::negative_binomial_distribution<IntType>::negative_binomial_distribution"}, {"name": "std::negative_binomial_distribution<IntType>::std::negative_binomial_distribution<IntType>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\negative_binomial_distribution\\operator().html", "desc": "std::negative_binomial_distribution<IntType>::std::negative_binomial_distribution<IntType>::operator()"}, {"name": "operator==,!=(std::negative_binomial_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\negative_binomial_distribution\\operator_cmp.html", "desc": "operator==,!=(std::negative_binomial_distribution)"}, {"name": "operator<<,>>(std::negative_binomial_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\negative_binomial_distribution\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::negative_binomial_distribution)"}, {"name": "std::negative_binomial_distribution<IntType>::std::negative_binomial_distribution<IntType>::param", "type": "cpp", "path": "cpp\\numeric\\random\\negative_binomial_distribution\\param.html", "desc": "std::negative_binomial_distribution<IntType>::std::negative_binomial_distribution<IntType>::param"}, {"name": "std::negative_binomial_distribution<IntType>::std::negative_binomial_distribution<IntType>::p, k", "type": "cpp", "path": "cpp\\numeric\\random\\negative_binomial_distribution\\params.html", "desc": "std::negative_binomial_distribution<IntType>::std::negative_binomial_distribution<IntType>::p, k"}, {"name": "std::negative_binomial_distribution<IntType>::std::negative_binomial_distribution<IntType>::reset", "type": "cpp", "path": "cpp\\numeric\\random\\negative_binomial_distribution\\reset.html", "desc": "std::negative_binomial_distribution<IntType>::std::negative_binomial_distribution<IntType>::reset"}, {"name": "std::normal_distribution<RealType>::std::normal_distribution<RealType>::max", "type": "cpp", "path": "cpp\\numeric\\random\\normal_distribution\\max.html", "desc": "std::normal_distribution<RealType>::std::normal_distribution<RealType>::max"}, {"name": "std::normal_distribution<RealType>::std::normal_distribution<RealType>::min", "type": "cpp", "path": "cpp\\numeric\\random\\normal_distribution\\min.html", "desc": "std::normal_distribution<RealType>::std::normal_distribution<RealType>::min"}, {"name": "std::normal_distribution<RealType>::std::normal_distribution<RealType>::normal_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\normal_distribution\\normal_distribution.html", "desc": "std::normal_distribution<RealType>::std::normal_distribution<RealType>::normal_distribution"}, {"name": "std::normal_distribution<RealType>::std::normal_distribution<RealType>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\normal_distribution\\operator().html", "desc": "std::normal_distribution<RealType>::std::normal_distribution<RealType>::operator()"}, {"name": "operator==,!=(std::normal_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\normal_distribution\\operator_cmp.html", "desc": "operator==,!=(std::normal_distribution)"}, {"name": "operator<<,>>(std::normal_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\normal_distribution\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::normal_distribution)"}, {"name": "std::normal_distribution<RealType>::std::normal_distribution<RealType>::param", "type": "cpp", "path": "cpp\\numeric\\random\\normal_distribution\\param.html", "desc": "std::normal_distribution<RealType>::std::normal_distribution<RealType>::param"}, {"name": "std::normal_distribution<RealType>::std::normal_distribution<RealType>::mean, stddev", "type": "cpp", "path": "cpp\\numeric\\random\\normal_distribution\\params.html", "desc": "std::normal_distribution<RealType>::std::normal_distribution<RealType>::mean, stddev"}, {"name": "std::normal_distribution<RealType>::std::normal_distribution<RealType>::reset", "type": "cpp", "path": "cpp\\numeric\\random\\normal_distribution\\reset.html", "desc": "std::normal_distribution<RealType>::std::normal_distribution<RealType>::reset"}, {"name": "std::piecewise_constant_distribution<RealType>::std::piecewise_constant_distribution<RealType>::max", "type": "cpp", "path": "cpp\\numeric\\random\\piecewise_constant_distribution\\max.html", "desc": "std::piecewise_constant_distribution<RealType>::std::piecewise_constant_distribution<RealType>::max"}, {"name": "std::piecewise_constant_distribution<RealType>::std::piecewise_constant_distribution<RealType>::min", "type": "cpp", "path": "cpp\\numeric\\random\\piecewise_constant_distribution\\min.html", "desc": "std::piecewise_constant_distribution<RealType>::std::piecewise_constant_distribution<RealType>::min"}, {"name": "std::piecewise_constant_distribution<RealType>::std::piecewise_constant_distribution<RealType>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\piecewise_constant_distribution\\operator().html", "desc": "std::piecewise_constant_distribution<RealType>::std::piecewise_constant_distribution<RealType>::operator()"}, {"name": "operator==,!=(std::piecewise_constant_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\piecewise_constant_distribution\\operator_cmp.html", "desc": "operator==,!=(std::piecewise_constant_distribution)"}, {"name": "operator<<,>>(std::piecewise_constant_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\piecewise_constant_distribution\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::piecewise_constant_distribution)"}, {"name": "std::piecewise_constant_distribution<RealType>::std::piecewise_constant_distribution<RealType>::param", "type": "cpp", "path": "cpp\\numeric\\random\\piecewise_constant_distribution\\param.html", "desc": "std::piecewise_constant_distribution<RealType>::std::piecewise_constant_distribution<RealType>::param"}, {"name": "std::piecewise_constant_distribution<RealType>::std::piecewise_constant_distribution<RealType>::intervals, densities", "type": "cpp", "path": "cpp\\numeric\\random\\piecewise_constant_distribution\\params.html", "desc": "std::piecewise_constant_distribution<RealType>::std::piecewise_constant_distribution<RealType>::intervals, densities"}, {"name": "std::piecewise_constant_distribution<RealType>::std::piecewise_constant_distribution<RealType>::piecewise_constant_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\piecewise_constant_distribution\\piecewise_constant_distribution.html", "desc": "std::piecewise_constant_distribution<RealType>::std::piecewise_constant_distribution<RealType>::piecewise_constant_distribution"}, {"name": "std::piecewise_constant_distribution<RealType>::std::piecewise_constant_distribution<RealType>::reset", "type": "cpp", "path": "cpp\\numeric\\random\\piecewise_constant_distribution\\reset.html", "desc": "std::piecewise_constant_distribution<RealType>::std::piecewise_constant_distribution<RealType>::reset"}, {"name": "std::piecewise_linear_distribution<RealType>::std::piecewise_linear_distribution<RealType>::max", "type": "cpp", "path": "cpp\\numeric\\random\\piecewise_linear_distribution\\max.html", "desc": "std::piecewise_linear_distribution<RealType>::std::piecewise_linear_distribution<RealType>::max"}, {"name": "std::piecewise_linear_distribution<RealType>::std::piecewise_linear_distribution<RealType>::min", "type": "cpp", "path": "cpp\\numeric\\random\\piecewise_linear_distribution\\min.html", "desc": "std::piecewise_linear_distribution<RealType>::std::piecewise_linear_distribution<RealType>::min"}, {"name": "std::piecewise_linear_distribution<RealType>::std::piecewise_linear_distribution<RealType>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\piecewise_linear_distribution\\operator().html", "desc": "std::piecewise_linear_distribution<RealType>::std::piecewise_linear_distribution<RealType>::operator()"}, {"name": "operator==,!=(std::piecewise_linear_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\piecewise_linear_distribution\\operator_cmp.html", "desc": "operator==,!=(std::piecewise_linear_distribution)"}, {"name": "operator<<,>>(std::piecewise_linear_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\piecewise_linear_distribution\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::piecewise_linear_distribution)"}, {"name": "std::piecewise_linear_distribution<RealType>::std::piecewise_linear_distribution<RealType>::param", "type": "cpp", "path": "cpp\\numeric\\random\\piecewise_linear_distribution\\param.html", "desc": "std::piecewise_linear_distribution<RealType>::std::piecewise_linear_distribution<RealType>::param"}, {"name": "std::piecewise_linear_distribution<RealType>::std::piecewise_linear_distribution<RealType>::intervals, densities", "type": "cpp", "path": "cpp\\numeric\\random\\piecewise_linear_distribution\\params.html", "desc": "std::piecewise_linear_distribution<RealType>::std::piecewise_linear_distribution<RealType>::intervals, densities"}, {"name": "std::piecewise_linear_distribution<RealType>::std::piecewise_linear_distribution<RealType>::piecewise_linear_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\piecewise_linear_distribution\\piecewise_linear_distribution.html", "desc": "std::piecewise_linear_distribution<RealType>::std::piecewise_linear_distribution<RealType>::piecewise_linear_distribution"}, {"name": "std::piecewise_linear_distribution<RealType>::std::piecewise_linear_distribution<RealType>::reset", "type": "cpp", "path": "cpp\\numeric\\random\\piecewise_linear_distribution\\reset.html", "desc": "std::piecewise_linear_distribution<RealType>::std::piecewise_linear_distribution<RealType>::reset"}, {"name": "std::poisson_distribution<IntType>::std::poisson_distribution<IntType>::max", "type": "cpp", "path": "cpp\\numeric\\random\\poisson_distribution\\max.html", "desc": "std::poisson_distribution<IntType>::std::poisson_distribution<IntType>::max"}, {"name": "std::poisson_distribution<IntType>::std::poisson_distribution<IntType>::mean", "type": "cpp", "path": "cpp\\numeric\\random\\poisson_distribution\\mean.html", "desc": "std::poisson_distribution<IntType>::std::poisson_distribution<IntType>::mean"}, {"name": "std::poisson_distribution<IntType>::std::poisson_distribution<IntType>::min", "type": "cpp", "path": "cpp\\numeric\\random\\poisson_distribution\\min.html", "desc": "std::poisson_distribution<IntType>::std::poisson_distribution<IntType>::min"}, {"name": "std::poisson_distribution<IntType>::std::poisson_distribution<IntType>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\poisson_distribution\\operator().html", "desc": "std::poisson_distribution<IntType>::std::poisson_distribution<IntType>::operator()"}, {"name": "operator==,!=(std::poisson_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\poisson_distribution\\operator_cmp.html", "desc": "operator==,!=(std::poisson_distribution)"}, {"name": "operator<<,>>(std::poisson_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\poisson_distribution\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::poisson_distribution)"}, {"name": "std::poisson_distribution<IntType>::std::poisson_distribution<IntType>::param", "type": "cpp", "path": "cpp\\numeric\\random\\poisson_distribution\\param.html", "desc": "std::poisson_distribution<IntType>::std::poisson_distribution<IntType>::param"}, {"name": "std::poisson_distribution<IntType>::std::poisson_distribution<IntType>::poisson_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\poisson_distribution\\poisson_distribution.html", "desc": "std::poisson_distribution<IntType>::std::poisson_distribution<IntType>::poisson_distribution"}, {"name": "std::poisson_distribution<IntType>::std::poisson_distribution<IntType>::reset", "type": "cpp", "path": "cpp\\numeric\\random\\poisson_distribution\\reset.html", "desc": "std::poisson_distribution<IntType>::std::poisson_distribution<IntType>::reset"}, {"name": "std::random_device::std::random_device::entropy", "type": "cpp", "path": "cpp\\numeric\\random\\random_device\\entropy.html", "desc": "std::random_device::std::random_device::entropy"}, {"name": "std::random_device::std::random_device::max", "type": "cpp", "path": "cpp\\numeric\\random\\random_device\\max.html", "desc": "std::random_device::std::random_device::max"}, {"name": "std::random_device::std::random_device::min", "type": "cpp", "path": "cpp\\numeric\\random\\random_device\\min.html", "desc": "std::random_device::std::random_device::min"}, {"name": "std::random_device::std::random_device::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\random_device\\operator().html", "desc": "std::random_device::std::random_device::operator()"}, {"name": "std::random_device::std::random_device::random_device", "type": "cpp", "path": "cpp\\numeric\\random\\random_device\\random_device.html", "desc": "std::random_device::std::random_device::random_device"}, {"name": "std::seed_seq::std::seed_seq::generate", "type": "cpp", "path": "cpp\\numeric\\random\\seed_seq\\generate.html", "desc": "std::seed_seq::std::seed_seq::generate"}, {"name": "std::seed_seq::std::seed_seq::param", "type": "cpp", "path": "cpp\\numeric\\random\\seed_seq\\param.html", "desc": "std::seed_seq::std::seed_seq::param"}, {"name": "std::seed_seq::std::seed_seq::seed_seq", "type": "cpp", "path": "cpp\\numeric\\random\\seed_seq\\seed_seq.html", "desc": "std::seed_seq::std::seed_seq::seed_seq"}, {"name": "std::seed_seq::std::seed_seq::size", "type": "cpp", "path": "cpp\\numeric\\random\\seed_seq\\size.html", "desc": "std::seed_seq::std::seed_seq::size"}, {"name": "std::shuffle_order_engine<Engine,K>::std::shuffle_order_engine<Engine,K>::base", "type": "cpp", "path": "cpp\\numeric\\random\\shuffle_order_engine\\base.html", "desc": "std::shuffle_order_engine<Engine,K>::std::shuffle_order_engine<Engine,K>::base"}, {"name": "std::shuffle_order_engine<Engine,K>::std::shuffle_order_engine<Engine,K>::discard", "type": "cpp", "path": "cpp\\numeric\\random\\shuffle_order_engine\\discard.html", "desc": "std::shuffle_order_engine<Engine,K>::std::shuffle_order_engine<Engine,K>::discard"}, {"name": "std::shuffle_order_engine<Engine,K>::std::shuffle_order_engine<Engine,K>::max", "type": "cpp", "path": "cpp\\numeric\\random\\shuffle_order_engine\\max.html", "desc": "std::shuffle_order_engine<Engine,K>::std::shuffle_order_engine<Engine,K>::max"}, {"name": "std::shuffle_order_engine<Engine,K>::std::shuffle_order_engine<Engine,K>::min", "type": "cpp", "path": "cpp\\numeric\\random\\shuffle_order_engine\\min.html", "desc": "std::shuffle_order_engine<Engine,K>::std::shuffle_order_engine<Engine,K>::min"}, {"name": "std::shuffle_order_engine<Engine,K>::std::shuffle_order_engine<Engine,K>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\shuffle_order_engine\\operator().html", "desc": "std::shuffle_order_engine<Engine,K>::std::shuffle_order_engine<Engine,K>::operator()"}, {"name": "operator==,!=(std::shuffle_order_engine)", "type": "cpp", "path": "cpp\\numeric\\random\\shuffle_order_engine\\operator_cmp.html", "desc": "operator==,!=(std::shuffle_order_engine)"}, {"name": "operator<<,>>(std::shuffle_order_engine)", "type": "cpp", "path": "cpp\\numeric\\random\\shuffle_order_engine\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::shuffle_order_engine)"}, {"name": "std::shuffle_order_engine<Engine,K>::std::shuffle_order_engine<Engine,K>::seed", "type": "cpp", "path": "cpp\\numeric\\random\\shuffle_order_engine\\seed.html", "desc": "std::shuffle_order_engine<Engine,K>::std::shuffle_order_engine<Engine,K>::seed"}, {"name": "std::shuffle_order_engine<Engine,K>::std::shuffle_order_engine<Engine,K>::shuffle_order_engine", "type": "cpp", "path": "cpp\\numeric\\random\\shuffle_order_engine\\shuffle_order_engine.html", "desc": "std::shuffle_order_engine<Engine,K>::std::shuffle_order_engine<Engine,K>::shuffle_order_engine"}, {"name": "std::student_t_distribution<RealType>::std::student_t_distribution<RealType>::max", "type": "cpp", "path": "cpp\\numeric\\random\\student_t_distribution\\max.html", "desc": "std::student_t_distribution<RealType>::std::student_t_distribution<RealType>::max"}, {"name": "std::student_t_distribution<RealType>::std::student_t_distribution<RealType>::min", "type": "cpp", "path": "cpp\\numeric\\random\\student_t_distribution\\min.html", "desc": "std::student_t_distribution<RealType>::std::student_t_distribution<RealType>::min"}, {"name": "std::student_t_distribution<RealType>::std::student_t_distribution<RealType>::n", "type": "cpp", "path": "cpp\\numeric\\random\\student_t_distribution\\n.html", "desc": "std::student_t_distribution<RealType>::std::student_t_distribution<RealType>::n"}, {"name": "std::student_t_distribution<RealType>::std::student_t_distribution<RealType>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\student_t_distribution\\operator().html", "desc": "std::student_t_distribution<RealType>::std::student_t_distribution<RealType>::operator()"}, {"name": "operator==,!=(std::student_t_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\student_t_distribution\\operator_cmp.html", "desc": "operator==,!=(std::student_t_distribution)"}, {"name": "operator<<,>>(std::student_t_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\student_t_distribution\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::student_t_distribution)"}, {"name": "std::student_t_distribution<RealType>::std::student_t_distribution<RealType>::param", "type": "cpp", "path": "cpp\\numeric\\random\\student_t_distribution\\param.html", "desc": "std::student_t_distribution<RealType>::std::student_t_distribution<RealType>::param"}, {"name": "std::student_t_distribution<RealType>::std::student_t_distribution<RealType>::reset", "type": "cpp", "path": "cpp\\numeric\\random\\student_t_distribution\\reset.html", "desc": "std::student_t_distribution<RealType>::std::student_t_distribution<RealType>::reset"}, {"name": "std::student_t_distribution<RealType>::std::student_t_distribution<RealType>::student_t_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\student_t_distribution\\student_t_distribution.html", "desc": "std::student_t_distribution<RealType>::std::student_t_distribution<RealType>::student_t_distribution"}, {"name": "std::subtract_with_carry_engine<UIntType,w,s,r>::std::subtract_with_carry_engine<UIntType,w,s,r>::discard", "type": "cpp", "path": "cpp\\numeric\\random\\subtract_with_carry_engine\\discard.html", "desc": "std::subtract_with_carry_engine<UIntType,w,s,r>::std::subtract_with_carry_engine<UIntType,w,s,r>::discard"}, {"name": "std::subtract_with_carry_engine<UIntType,w,s,r>::std::subtract_with_carry_engine<UIntType,w,s,r>::max", "type": "cpp", "path": "cpp\\numeric\\random\\subtract_with_carry_engine\\max.html", "desc": "std::subtract_with_carry_engine<UIntType,w,s,r>::std::subtract_with_carry_engine<UIntType,w,s,r>::max"}, {"name": "std::subtract_with_carry_engine<UIntType,w,s,r>::std::subtract_with_carry_engine<UIntType,w,s,r>::min", "type": "cpp", "path": "cpp\\numeric\\random\\subtract_with_carry_engine\\min.html", "desc": "std::subtract_with_carry_engine<UIntType,w,s,r>::std::subtract_with_carry_engine<UIntType,w,s,r>::min"}, {"name": "std::subtract_with_carry_engine<UIntType,w,s,r>::std::subtract_with_carry_engine<UIntType,w,s,r>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\subtract_with_carry_engine\\operator().html", "desc": "std::subtract_with_carry_engine<UIntType,w,s,r>::std::subtract_with_carry_engine<UIntType,w,s,r>::operator()"}, {"name": "operator==,!=(std::subtract_with_carry_engine)", "type": "cpp", "path": "cpp\\numeric\\random\\subtract_with_carry_engine\\operator_cmp.html", "desc": "operator==,!=(std::subtract_with_carry_engine)"}, {"name": "operator<<,>>(std::subtract_with_carry_engine)", "type": "cpp", "path": "cpp\\numeric\\random\\subtract_with_carry_engine\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::subtract_with_carry_engine)"}, {"name": "std::subtract_with_carry_engine<UIntType,w,s,r>::std::subtract_with_carry_engine<UIntType,w,s,r>::seed", "type": "cpp", "path": "cpp\\numeric\\random\\subtract_with_carry_engine\\seed.html", "desc": "std::subtract_with_carry_engine<UIntType,w,s,r>::std::subtract_with_carry_engine<UIntType,w,s,r>::seed"}, {"name": "std::subtract_with_carry_engine<UIntType,w,s,r>::std::subtract_with_carry_engine<UIntType,w,s,r>::subtract_with_carry_engine", "type": "cpp", "path": "cpp\\numeric\\random\\subtract_with_carry_engine\\subtract_with_carry_engine.html", "desc": "std::subtract_with_carry_engine<UIntType,w,s,r>::std::subtract_with_carry_engine<UIntType,w,s,r>::subtract_with_carry_engine"}, {"name": "std::uniform_int_distribution<IntType>::std::uniform_int_distribution<IntType>::max", "type": "cpp", "path": "cpp\\numeric\\random\\uniform_int_distribution\\max.html", "desc": "std::uniform_int_distribution<IntType>::std::uniform_int_distribution<IntType>::max"}, {"name": "std::uniform_int_distribution<IntType>::std::uniform_int_distribution<IntType>::min", "type": "cpp", "path": "cpp\\numeric\\random\\uniform_int_distribution\\min.html", "desc": "std::uniform_int_distribution<IntType>::std::uniform_int_distribution<IntType>::min"}, {"name": "std::uniform_int_distribution<IntType>::std::uniform_int_distribution<IntType>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\uniform_int_distribution\\operator().html", "desc": "std::uniform_int_distribution<IntType>::std::uniform_int_distribution<IntType>::operator()"}, {"name": "operator==,!=(std::uniform_int_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\uniform_int_distribution\\operator_cmp.html", "desc": "operator==,!=(std::uniform_int_distribution)"}, {"name": "operator<<,>>(std::uniform_int_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\uniform_int_distribution\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::uniform_int_distribution)"}, {"name": "std::uniform_int_distribution<IntType>::std::uniform_int_distribution<IntType>::param", "type": "cpp", "path": "cpp\\numeric\\random\\uniform_int_distribution\\param.html", "desc": "std::uniform_int_distribution<IntType>::std::uniform_int_distribution<IntType>::param"}, {"name": "std::uniform_int_distribution<IntType>::std::uniform_int_distribution<IntType>::a, b", "type": "cpp", "path": "cpp\\numeric\\random\\uniform_int_distribution\\params.html", "desc": "std::uniform_int_distribution<IntType>::std::uniform_int_distribution<IntType>::a, b"}, {"name": "std::uniform_int_distribution<IntType>::std::uniform_int_distribution<IntType>::reset", "type": "cpp", "path": "cpp\\numeric\\random\\uniform_int_distribution\\reset.html", "desc": "std::uniform_int_distribution<IntType>::std::uniform_int_distribution<IntType>::reset"}, {"name": "std::uniform_int_distribution<IntType>::std::uniform_int_distribution<IntType>::uniform_int_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\uniform_int_distribution\\uniform_int_distribution.html", "desc": "std::uniform_int_distribution<IntType>::std::uniform_int_distribution<IntType>::uniform_int_distribution"}, {"name": "std::uniform_real_distribution<RealType>::std::uniform_real_distribution<RealType>::max", "type": "cpp", "path": "cpp\\numeric\\random\\uniform_real_distribution\\max.html", "desc": "std::uniform_real_distribution<RealType>::std::uniform_real_distribution<RealType>::max"}, {"name": "std::uniform_real_distribution<RealType>::std::uniform_real_distribution<RealType>::min", "type": "cpp", "path": "cpp\\numeric\\random\\uniform_real_distribution\\min.html", "desc": "std::uniform_real_distribution<RealType>::std::uniform_real_distribution<RealType>::min"}, {"name": "std::uniform_real_distribution<RealType>::std::uniform_real_distribution<RealType>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\uniform_real_distribution\\operator().html", "desc": "std::uniform_real_distribution<RealType>::std::uniform_real_distribution<RealType>::operator()"}, {"name": "operator==,!=(std::uniform_real_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\uniform_real_distribution\\operator_cmp.html", "desc": "operator==,!=(std::uniform_real_distribution)"}, {"name": "operator<<,>>(std::uniform_real_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\uniform_real_distribution\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::uniform_real_distribution)"}, {"name": "std::uniform_real_distribution<RealType>::std::uniform_real_distribution<RealType>::param", "type": "cpp", "path": "cpp\\numeric\\random\\uniform_real_distribution\\param.html", "desc": "std::uniform_real_distribution<RealType>::std::uniform_real_distribution<RealType>::param"}, {"name": "std::uniform_real_distribution<RealType>::std::uniform_real_distribution<RealType>::a, b", "type": "cpp", "path": "cpp\\numeric\\random\\uniform_real_distribution\\params.html", "desc": "std::uniform_real_distribution<RealType>::std::uniform_real_distribution<RealType>::a, b"}, {"name": "std::uniform_real_distribution<RealType>::std::uniform_real_distribution<RealType>::reset", "type": "cpp", "path": "cpp\\numeric\\random\\uniform_real_distribution\\reset.html", "desc": "std::uniform_real_distribution<RealType>::std::uniform_real_distribution<RealType>::reset"}, {"name": "std::uniform_real_distribution<RealType>::std::uniform_real_distribution<RealType>::uniform_real_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\uniform_real_distribution\\uniform_real_distribution.html", "desc": "std::uniform_real_distribution<RealType>::std::uniform_real_distribution<RealType>::uniform_real_distribution"}, {"name": "std::weibull_distribution<RealType>::std::weibull_distribution<RealType>::max", "type": "cpp", "path": "cpp\\numeric\\random\\weibull_distribution\\max.html", "desc": "std::weibull_distribution<RealType>::std::weibull_distribution<RealType>::max"}, {"name": "std::weibull_distribution<RealType>::std::weibull_distribution<RealType>::min", "type": "cpp", "path": "cpp\\numeric\\random\\weibull_distribution\\min.html", "desc": "std::weibull_distribution<RealType>::std::weibull_distribution<RealType>::min"}, {"name": "std::weibull_distribution<RealType>::std::weibull_distribution<RealType>::operator()", "type": "cpp", "path": "cpp\\numeric\\random\\weibull_distribution\\operator().html", "desc": "std::weibull_distribution<RealType>::std::weibull_distribution<RealType>::operator()"}, {"name": "operator==,!=(std::weibull_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\weibull_distribution\\operator_cmp.html", "desc": "operator==,!=(std::weibull_distribution)"}, {"name": "operator<<,>>(std::weibull_distribution)", "type": "cpp", "path": "cpp\\numeric\\random\\weibull_distribution\\operator_ltltgtgt.html", "desc": "operator<<,>>(std::weibull_distribution)"}, {"name": "std::weibull_distribution<RealType>::std::weibull_distribution<RealType>::param", "type": "cpp", "path": "cpp\\numeric\\random\\weibull_distribution\\param.html", "desc": "std::weibull_distribution<RealType>::std::weibull_distribution<RealType>::param"}, {"name": "std::weibull_distribution<RealType>::std::weibull_distribution<RealType>::a, b", "type": "cpp", "path": "cpp\\numeric\\random\\weibull_distribution\\params.html", "desc": "std::weibull_distribution<RealType>::std::weibull_distribution<RealType>::a, b"}, {"name": "std::weibull_distribution<RealType>::std::weibull_distribution<RealType>::reset", "type": "cpp", "path": "cpp\\numeric\\random\\weibull_distribution\\reset.html", "desc": "std::weibull_distribution<RealType>::std::weibull_distribution<RealType>::reset"}, {"name": "std::weibull_distribution<RealType>::std::weibull_distribution<RealType>::weibull_distribution", "type": "cpp", "path": "cpp\\numeric\\random\\weibull_distribution\\weibull_distribution.html", "desc": "std::weibull_distribution<RealType>::std::weibull_distribution<RealType>::weibull_distribution"}, {"name": "std::std::ratio", "type": "cpp", "path": "cpp\\numeric\\ratio\\ratio.html", "desc": "std::std::ratio"}, {"name": "std::std::ratio_add", "type": "cpp", "path": "cpp\\numeric\\ratio\\ratio_add.html", "desc": "std::std::ratio_add"}, {"name": "std::std::ratio_divide", "type": "cpp", "path": "cpp\\numeric\\ratio\\ratio_divide.html", "desc": "std::std::ratio_divide"}, {"name": "std::std::ratio_equal", "type": "cpp", "path": "cpp\\numeric\\ratio\\ratio_equal.html", "desc": "std::std::ratio_equal"}, {"name": "std::std::ratio_greater", "type": "cpp", "path": "cpp\\numeric\\ratio\\ratio_greater.html", "desc": "std::std::ratio_greater"}, {"name": "std::std::ratio_greater_equal", "type": "cpp", "path": "cpp\\numeric\\ratio\\ratio_greater_equal.html", "desc": "std::std::ratio_greater_equal"}, {"name": "std::std::ratio_less", "type": "cpp", "path": "cpp\\numeric\\ratio\\ratio_less.html", "desc": "std::std::ratio_less"}, {"name": "std::std::ratio_less_equal", "type": "cpp", "path": "cpp\\numeric\\ratio\\ratio_less_equal.html", "desc": "std::std::ratio_less_equal"}, {"name": "std::std::ratio_multiply", "type": "cpp", "path": "cpp\\numeric\\ratio\\ratio_multiply.html", "desc": "std::std::ratio_multiply"}, {"name": "std::std::ratio_not_equal", "type": "cpp", "path": "cpp\\numeric\\ratio\\ratio_not_equal.html", "desc": "std::std::ratio_not_equal"}, {"name": "std::std::ratio_subtract", "type": "cpp", "path": "cpp\\numeric\\ratio\\ratio_subtract.html", "desc": "std::std::ratio_subtract"}, {"name": "std:: std:: std::std::assoc_laguerre, std::assoc_laguerref, std::assoc_laguerrel", "type": "cpp", "path": "cpp\\numeric\\special_functions\\assoc_laguerre.html", "desc": "std:: std:: std::std::assoc_laguerre, std::assoc_laguerref, std::assoc_laguerrel"}, {"name": "std:: std:: std::std::assoc_legendre, std::assoc_legendref, std::assoc_legendrel", "type": "cpp", "path": "cpp\\numeric\\special_functions\\assoc_legendre.html", "desc": "std:: std:: std::std::assoc_legendre, std::assoc_legendref, std::assoc_legendrel"}, {"name": "std:: std:: std::std::comp_ellint_1, std::comp_ellint_1f, std::comp_ellint_1l", "type": "cpp", "path": "cpp\\numeric\\special_functions\\comp_ellint_1.html", "desc": "std:: std:: std::std::comp_ellint_1, std::comp_ellint_1f, std::comp_ellint_1l"}, {"name": "std:: std:: std::std::comp_ellint_2, std::comp_ellint_2f, std::comp_ellint_2l", "type": "cpp", "path": "cpp\\numeric\\special_functions\\comp_ellint_2.html", "desc": "std:: std:: std::std::comp_ellint_2, std::comp_ellint_2f, std::comp_ellint_2l"}, {"name": "std:: std:: std::std::comp_ellint_3, std::comp_ellint_3f, std::comp_ellint_3l", "type": "cpp", "path": "cpp\\numeric\\special_functions\\comp_ellint_3.html", "desc": "std:: std:: std::std::comp_ellint_3, std::comp_ellint_3f, std::comp_ellint_3l"}, {"name": "std:: std:: std::std::cyl_bessel_j, std::cyl_bessel_jf, std::cyl_bessel_jl", "type": "cpp", "path": "cpp\\numeric\\special_functions\\cyl_bessel_j.html", "desc": "std:: std:: std::std::cyl_bessel_j, std::cyl_bessel_jf, std::cyl_bessel_jl"}, {"name": "std:: std:: std::std::cyl_bessel_k, std::cyl_bessel_kf, std::cyl_bessel_kl", "type": "cpp", "path": "cpp\\numeric\\special_functions\\cyl_bessel_k.html", "desc": "std:: std:: std::std::cyl_bessel_k, std::cyl_bessel_kf, std::cyl_bessel_kl"}, {"name": "std:: std:: std::std::cyl_neumann, std::cyl_neumannf, std::cyl_neumannl", "type": "cpp", "path": "cpp\\numeric\\special_functions\\cyl_neumann.html", "desc": "std:: std:: std::std::cyl_neumann, std::cyl_neumannf, std::cyl_neumannl"}, {"name": "std:: std:: std::std::ellint_1, std::ellint_1f, std::ellint_1l", "type": "cpp", "path": "cpp\\numeric\\special_functions\\ellint_1.html", "desc": "std:: std:: std::std::ellint_1, std::ellint_1f, std::ellint_1l"}, {"name": "std:: std:: std::std::ellint_2, std::ellint_2f, std::ellint_2l", "type": "cpp", "path": "cpp\\numeric\\special_functions\\ellint_2.html", "desc": "std:: std:: std::std::ellint_2, std::ellint_2f, std::ellint_2l"}, {"name": "std:: std:: std::std::ellint_3, std::ellint_3f, std::ellint_3l", "type": "cpp", "path": "cpp\\numeric\\special_functions\\ellint_3.html", "desc": "std:: std:: std::std::ellint_3, std::ellint_3f, std::ellint_3l"}, {"name": "std:: std:: std::std::expint, std::expintf, std::expintl", "type": "cpp", "path": "cpp\\numeric\\special_functions\\expint.html", "desc": "std:: std:: std::std::expint, std::expintf, std::expintl"}, {"name": "std:: std:: std::std::laguerre, std::laguerref, std::laguerrel", "type": "cpp", "path": "cpp\\numeric\\special_functions\\laguerre.html", "desc": "std:: std:: std::std::laguerre, std::laguerref, std::laguerrel"}, {"name": "std:: std:: std::std::legendre, std::legendref, std::legendrel", "type": "cpp", "path": "cpp\\numeric\\special_functions\\legendre.html", "desc": "std:: std:: std::std::legendre, std::legendref, std::legendrel"}, {"name": "std:: std:: std::std::riemann_zeta, std::riemann_zetaf, std::riemann_zetal", "type": "cpp", "path": "cpp\\numeric\\special_functions\\riemann_zeta.html", "desc": "std:: std:: std::std::riemann_zeta, std::riemann_zetaf, std::riemann_zetal"}, {"name": "std:: std:: std::std::sph_bessel, std::sph_besself, std::sph_bessell", "type": "cpp", "path": "cpp\\numeric\\special_functions\\sph_bessel.html", "desc": "std:: std:: std::std::sph_bessel, std::sph_besself, std::sph_bessell"}, {"name": "std:: std:: std::std::sph_legendre, std::sph_legendref, std::sph_legendrel", "type": "cpp", "path": "cpp\\numeric\\special_functions\\sph_legendre.html", "desc": "std:: std:: std::std::sph_legendre, std::sph_legendref, std::sph_legendrel"}, {"name": "std:: std:: std::std::sph_neumann, std::sph_neumannf, std::sph_neumannl", "type": "cpp", "path": "cpp\\numeric\\special_functions\\sph_neumann.html", "desc": "std:: std:: std::std::sph_neumann, std::sph_neumannf, std::sph_neumannl"}, {"name": "std:: std:: std::std::assoc_laguerre, std::assoc_laguerref, std::assoc_laguerrel", "type": "cpp", "path": "cpp\\numeric\\special_math\\assoc_laguerre.html", "desc": "std:: std:: std::std::assoc_laguerre, std::assoc_laguerref, std::assoc_laguerrel"}, {"name": "std:: std:: std::std::assoc_legendre, std::assoc_legendref, std::assoc_legendrel", "type": "cpp", "path": "cpp\\numeric\\special_math\\assoc_legendre.html", "desc": "std:: std:: std::std::assoc_legendre, std::assoc_legendref, std::assoc_legendrel"}, {"name": "std:: std:: std::std::beta, std::betaf, std::betal", "type": "cpp", "path": "cpp\\numeric\\special_math\\beta.html", "desc": "std:: std:: std::std::beta, std::betaf, std::betal"}, {"name": "std:: std:: std::std::comp_ellint_1, std::comp_ellint_1f, std::comp_ellint_1l", "type": "cpp", "path": "cpp\\numeric\\special_math\\comp_ellint_1.html", "desc": "std:: std:: std::std::comp_ellint_1, std::comp_ellint_1f, std::comp_ellint_1l"}, {"name": "std:: std:: std::std::comp_ellint_2, std::comp_ellint_2f, std::comp_ellint_2l", "type": "cpp", "path": "cpp\\numeric\\special_math\\comp_ellint_2.html", "desc": "std:: std:: std::std::comp_ellint_2, std::comp_ellint_2f, std::comp_ellint_2l"}, {"name": "std:: std:: std::std::comp_ellint_3, std::comp_ellint_3f, std::comp_ellint_3l", "type": "cpp", "path": "cpp\\numeric\\special_math\\comp_ellint_3.html", "desc": "std:: std:: std::std::comp_ellint_3, std::comp_ellint_3f, std::comp_ellint_3l"}, {"name": "std:: std:: std::std::cyl_bessel_i, std::cyl_bessel_if, std::cyl_bessel_il", "type": "cpp", "path": "cpp\\numeric\\special_math\\cyl_bessel_i.html", "desc": "std:: std:: std::std::cyl_bessel_i, std::cyl_bessel_if, std::cyl_bessel_il"}, {"name": "std:: std:: std::std::cyl_bessel_j, std::cyl_bessel_jf, std::cyl_bessel_jl", "type": "cpp", "path": "cpp\\numeric\\special_math\\cyl_bessel_j.html", "desc": "std:: std:: std::std::cyl_bessel_j, std::cyl_bessel_jf, std::cyl_bessel_jl"}, {"name": "std:: std:: std::std::cyl_bessel_k, std::cyl_bessel_kf, std::cyl_bessel_kl", "type": "cpp", "path": "cpp\\numeric\\special_math\\cyl_bessel_k.html", "desc": "std:: std:: std::std::cyl_bessel_k, std::cyl_bessel_kf, std::cyl_bessel_kl"}, {"name": "std:: std:: std::std::cyl_neumann, std::cyl_neumannf, std::cyl_neumannl", "type": "cpp", "path": "cpp\\numeric\\special_math\\cyl_neumann.html", "desc": "std:: std:: std::std::cyl_neumann, std::cyl_neumannf, std::cyl_neumannl"}, {"name": "std:: std:: std::std::ellint_1, std::ellint_1f, std::ellint_1l", "type": "cpp", "path": "cpp\\numeric\\special_math\\ellint_1.html", "desc": "std:: std:: std::std::ellint_1, std::ellint_1f, std::ellint_1l"}, {"name": "std:: std:: std::std::ellint_2, std::ellint_2f, std::ellint_2l", "type": "cpp", "path": "cpp\\numeric\\special_math\\ellint_2.html", "desc": "std:: std:: std::std::ellint_2, std::ellint_2f, std::ellint_2l"}, {"name": "std:: std:: std::std::ellint_3, std::ellint_3f, std::ellint_3l", "type": "cpp", "path": "cpp\\numeric\\special_math\\ellint_3.html", "desc": "std:: std:: std::std::ellint_3, std::ellint_3f, std::ellint_3l"}, {"name": "std:: std:: std::std::expint, std::expintf, std::expintl", "type": "cpp", "path": "cpp\\numeric\\special_math\\expint.html", "desc": "std:: std:: std::std::expint, std::expintf, std::expintl"}, {"name": "std:: std:: std::std::hermite, std::hermitef, std::hermitel", "type": "cpp", "path": "cpp\\numeric\\special_math\\hermite.html", "desc": "std:: std:: std::std::hermite, std::hermitef, std::hermitel"}, {"name": "std:: std:: std::std::laguerre, std::laguerref, std::laguerrel", "type": "cpp", "path": "cpp\\numeric\\special_math\\laguerre.html", "desc": "std:: std:: std::std::laguerre, std::laguerref, std::laguerrel"}, {"name": "std:: std:: std::std::legendre, std::legendref, std::legendrel", "type": "cpp", "path": "cpp\\numeric\\special_math\\legendre.html", "desc": "std:: std:: std::std::legendre, std::legendref, std::legendrel"}, {"name": "std:: std:: std::std::riemann_zeta, std::riemann_zetaf, std::riemann_zetal", "type": "cpp", "path": "cpp\\numeric\\special_math\\riemann_zeta.html", "desc": "std:: std:: std::std::riemann_zeta, std::riemann_zetaf, std::riemann_zetal"}, {"name": "std:: std:: std::std::sph_bessel, std::sph_besself, std::sph_bessell", "type": "cpp", "path": "cpp\\numeric\\special_math\\sph_bessel.html", "desc": "std:: std:: std::std::sph_bessel, std::sph_besself, std::sph_bessell"}, {"name": "std:: std:: std::std::sph_legendre, std::sph_legendref, std::sph_legendrel", "type": "cpp", "path": "cpp\\numeric\\special_math\\sph_legendre.html", "desc": "std:: std:: std::std::sph_legendre, std::sph_legendref, std::sph_legendrel"}, {"name": "std:: std:: std::std::sph_neumann, std::sph_neumannf, std::sph_neumannl", "type": "cpp", "path": "cpp\\numeric\\special_math\\sph_neumann.html", "desc": "std:: std:: std::std::sph_neumann, std::sph_neumannf, std::sph_neumannl"}, {"name": "std:: (std::valarray)std::abs(std::valarray)", "type": "cpp", "path": "cpp\\numeric\\valarray\\abs.html", "desc": "std:: (std::valarray)std::abs(std::valarray)"}, {"name": "std:: (std::valarray)std::acos(std::valarray)", "type": "cpp", "path": "cpp\\numeric\\valarray\\acos.html", "desc": "std:: (std::valarray)std::acos(std::valarray)"}, {"name": "std::valarray<T>::std::valarray<T>::apply", "type": "cpp", "path": "cpp\\numeric\\valarray\\apply.html", "desc": "std::valarray<T>::std::valarray<T>::apply"}, {"name": "std:: (std::valarray)std::asin(std::valarray)", "type": "cpp", "path": "cpp\\numeric\\valarray\\asin.html", "desc": "std:: (std::valarray)std::asin(std::valarray)"}, {"name": "std:: (std::valarray)std::atan(std::valarray)", "type": "cpp", "path": "cpp\\numeric\\valarray\\atan.html", "desc": "std:: (std::valarray)std::atan(std::valarray)"}, {"name": "std:: (std::valarray)std::atan2(std::valarray)", "type": "cpp", "path": "cpp\\numeric\\valarray\\atan2.html", "desc": "std:: (std::valarray)std::atan2(std::valarray)"}, {"name": "std::std::begin(std::valarray)", "type": "cpp", "path": "cpp\\numeric\\valarray\\begin2.html", "desc": "std::std::begin(std::valarray)"}, {"name": "std:: (std::valarray)std::cos(std::valarray)", "type": "cpp", "path": "cpp\\numeric\\valarray\\cos.html", "desc": "std:: (std::valarray)std::cos(std::valarray)"}, {"name": "std:: (std::valarray)std::cosh(std::valarray)", "type": "cpp", "path": "cpp\\numeric\\valarray\\cosh.html", "desc": "std:: (std::valarray)std::cosh(std::valarray)"}, {"name": "std::valarray<T>::std::valarray<T>::cshift", "type": "cpp", "path": "cpp\\numeric\\valarray\\cshift.html", "desc": "std::valarray<T>::std::valarray<T>::cshift"}, {"name": "std::valarray \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\numeric\\valarray\\deduction_guides.html", "desc": "std::valarray \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::std::end(std::valarray)", "type": "cpp", "path": "cpp\\numeric\\valarray\\end2.html", "desc": "std::std::end(std::valarray)"}, {"name": "std:: (std::valarray)std::exp(std::valarray)", "type": "cpp", "path": "cpp\\numeric\\valarray\\exp.html", "desc": "std:: (std::valarray)std::exp(std::valarray)"}, {"name": "std::std::gslice", "type": "cpp", "path": "cpp\\numeric\\valarray\\gslice.html", "desc": "std::std::gslice"}, {"name": "std::std::gslice_array", "type": "cpp", "path": "cpp\\numeric\\valarray\\gslice_array.html", "desc": "std::std::gslice_array"}, {"name": "std::std::indirect_array", "type": "cpp", "path": "cpp\\numeric\\valarray\\indirect_array.html", "desc": "std::std::indirect_array"}, {"name": "std:: (std::valarray)std::log(std::valarray)", "type": "cpp", "path": "cpp\\numeric\\valarray\\log.html", "desc": "std:: (std::valarray)std::log(std::valarray)"}, {"name": "std:: (std::valarray)std::log10(std::valarray)", "type": "cpp", "path": "cpp\\numeric\\valarray\\log10.html", "desc": "std:: (std::valarray)std::log10(std::valarray)"}, {"name": "std::std::mask_array", "type": "cpp", "path": "cpp\\numeric\\valarray\\mask_array.html", "desc": "std::std::mask_array"}, {"name": "std::valarray<T>::std::valarray<T>::max", "type": "cpp", "path": "cpp\\numeric\\valarray\\max.html", "desc": "std::valarray<T>::std::valarray<T>::max"}, {"name": "std::valarray<T>::std::valarray<T>::min", "type": "cpp", "path": "cpp\\numeric\\valarray\\min.html", "desc": "std::valarray<T>::std::valarray<T>::min"}, {"name": "std::valarray<T>::std::valarray<T>::operator=", "type": "cpp", "path": "cpp\\numeric\\valarray\\operator=.html", "desc": "std::valarray<T>::std::valarray<T>::operator="}, {"name": "std::valarray<T>::std::valarray<T>::operator+,-,~,!", "type": "cpp", "path": "cpp\\numeric\\valarray\\operator_arith.html", "desc": "std::valarray<T>::std::valarray<T>::operator+,-,~,!"}, {"name": "std::valarray<T>::std::valarray<T>::operator+=,-=,*=,/=,%=,&=,|=,<<=,>>=", "type": "cpp", "path": "cpp\\numeric\\valarray\\operator_arith2.html", "desc": "std::valarray<T>::std::valarray<T>::operator+=,-=,*=,/=,%=,&=,|=,<<=,>>="}, {"name": "(std::valarray)operator+,-,*,/,%,&,|,^,<<,>>,&&,|| (std::valarray)", "type": "cpp", "path": "cpp\\numeric\\valarray\\operator_arith3.html", "desc": "(std::valarray)operator+,-,*,/,%,&,|,^,<<,>>,&&,|| (std::valarray)"}, {"name": "std::valarray<T>::std::valarray<T>::operator[]", "type": "cpp", "path": "cpp\\numeric\\valarray\\operator_at.html", "desc": "std::valarray<T>::std::valarray<T>::operator[]"}, {"name": "(std::valarray)operator==,!=,<,<=,>,>=(std::valarray)", "type": "cpp", "path": "cpp\\numeric\\valarray\\operator_cmp.html", "desc": "(std::valarray)operator==,!=,<,<=,>,>=(std::valarray)"}, {"name": "std:: (std::valarray)std::pow(std::valarray)", "type": "cpp", "path": "cpp\\numeric\\valarray\\pow.html", "desc": "std:: (std::valarray)std::pow(std::valarray)"}, {"name": "std::valarray<T>::std::valarray<T>::resize", "type": "cpp", "path": "cpp\\numeric\\valarray\\resize.html", "desc": "std::valarray<T>::std::valarray<T>::resize"}, {"name": "std::valarray<T>::std::valarray<T>::shift", "type": "cpp", "path": "cpp\\numeric\\valarray\\shift.html", "desc": "std::valarray<T>::std::valarray<T>::shift"}, {"name": "std:: (std::valarray)std::sin(std::valarray)", "type": "cpp", "path": "cpp\\numeric\\valarray\\sin.html", "desc": "std:: (std::valarray)std::sin(std::valarray)"}, {"name": "std:: (std::valarray)std::sinh(std::valarray)", "type": "cpp", "path": "cpp\\numeric\\valarray\\sinh.html", "desc": "std:: (std::valarray)std::sinh(std::valarray)"}, {"name": "std::valarray<T>::std::valarray<T>::size", "type": "cpp", "path": "cpp\\numeric\\valarray\\size.html", "desc": "std::valarray<T>::std::valarray<T>::size"}, {"name": "std::std::slice", "type": "cpp", "path": "cpp\\numeric\\valarray\\slice.html", "desc": "std::std::slice"}, {"name": "std::std::slice_array", "type": "cpp", "path": "cpp\\numeric\\valarray\\slice_array.html", "desc": "std::std::slice_array"}, {"name": "std:: (std::valarray)std::sqrt(std::valarray)", "type": "cpp", "path": "cpp\\numeric\\valarray\\sqrt.html", "desc": "std:: (std::valarray)std::sqrt(std::valarray)"}, {"name": "std::valarray<T>::std::valarray<T>::sum", "type": "cpp", "path": "cpp\\numeric\\valarray\\sum.html", "desc": "std::valarray<T>::std::valarray<T>::sum"}, {"name": "std::valarray<T>::std::valarray<T>::swap", "type": "cpp", "path": "cpp\\numeric\\valarray\\swap.html", "desc": "std::valarray<T>::std::valarray<T>::swap"}, {"name": "std::std::swap(std::valarray)", "type": "cpp", "path": "cpp\\numeric\\valarray\\swap2.html", "desc": "std::std::swap(std::valarray)"}, {"name": "std:: (std::valarray)std::tan(std::valarray)", "type": "cpp", "path": "cpp\\numeric\\valarray\\tan.html", "desc": "std:: (std::valarray)std::tan(std::valarray)"}, {"name": "std:: (std::valarray)std::tanh(std::valarray)", "type": "cpp", "path": "cpp\\numeric\\valarray\\tanh.html", "desc": "std:: (std::valarray)std::tanh(std::valarray)"}, {"name": "std::valarray<T>::std::valarray<T>::valarray", "type": "cpp", "path": "cpp\\numeric\\valarray\\valarray.html", "desc": "std::valarray<T>::std::valarray<T>::valarray"}, {"name": "std::valarray<T>::std::valarray<T>::~valarray", "type": "cpp", "path": "cpp\\numeric\\valarray\\~valarray.html", "desc": "std::valarray<T>::std::valarray<T>::~valarray"}, {"name": "std::gslice_array<T>::std::gslice_array<T>::gslice_array", "type": "cpp", "path": "cpp\\numeric\\valarray\\gslice_array\\gslice_array.html", "desc": "std::gslice_array<T>::std::gslice_array<T>::gslice_array"}, {"name": "std::gslice_array<T>::std::gslice_array<T>::operator=", "type": "cpp", "path": "cpp\\numeric\\valarray\\gslice_array\\operator=.html", "desc": "std::gslice_array<T>::std::gslice_array<T>::operator="}, {"name": "std::gslice_array<T>::std::gslice_array<T>::operator+=,-=,*=,/=,%=,&=,|=,^=,<<=,>>=", "type": "cpp", "path": "cpp\\numeric\\valarray\\gslice_array\\operator_arith.html", "desc": "std::gslice_array<T>::std::gslice_array<T>::operator+=,-=,*=,/=,%=,&=,|=,^=,<<=,>>="}, {"name": "std::gslice_array<T>::std::gslice_array<T>::~gslice_array", "type": "cpp", "path": "cpp\\numeric\\valarray\\gslice_array\\~gslice_array.html", "desc": "std::gslice_array<T>::std::gslice_array<T>::~gslice_array"}, {"name": "std::indirect_array<T>::std::indirect_array<T>::indirect_array", "type": "cpp", "path": "cpp\\numeric\\valarray\\indirect_array\\indirect_array.html", "desc": "std::indirect_array<T>::std::indirect_array<T>::indirect_array"}, {"name": "std::indirect_array<T>::std::indirect_array<T>::operator=", "type": "cpp", "path": "cpp\\numeric\\valarray\\indirect_array\\operator=.html", "desc": "std::indirect_array<T>::std::indirect_array<T>::operator="}, {"name": "std::indirect_array<T>::std::indirect_array<T>::operator+=,-=,*=,/=,%=,&=,|=,^=,<<=,>>=", "type": "cpp", "path": "cpp\\numeric\\valarray\\indirect_array\\operator_arith.html", "desc": "std::indirect_array<T>::std::indirect_array<T>::operator+=,-=,*=,/=,%=,&=,|=,^=,<<=,>>="}, {"name": "std::indirect_array<T>::std::indirect_array<T>::~indirect_array", "type": "cpp", "path": "cpp\\numeric\\valarray\\indirect_array\\~indirect_array.html", "desc": "std::indirect_array<T>::std::indirect_array<T>::~indirect_array"}, {"name": "std::mask_array<T>::std::mask_array<T>::mask_array", "type": "cpp", "path": "cpp\\numeric\\valarray\\mask_array\\mask_array.html", "desc": "std::mask_array<T>::std::mask_array<T>::mask_array"}, {"name": "std::mask_array<T>::std::mask_array<T>::operator=", "type": "cpp", "path": "cpp\\numeric\\valarray\\mask_array\\operator=.html", "desc": "std::mask_array<T>::std::mask_array<T>::operator="}, {"name": "std::mask_array<T>::std::mask_array<T>::operator+=,-=,*=,/=,%=,&=,|=,^=,<<=,>>=", "type": "cpp", "path": "cpp\\numeric\\valarray\\mask_array\\operator_arith.html", "desc": "std::mask_array<T>::std::mask_array<T>::operator+=,-=,*=,/=,%=,&=,|=,^=,<<=,>>="}, {"name": "std::mask_array<T>::std::mask_array<T>::~mask_array", "type": "cpp", "path": "cpp\\numeric\\valarray\\mask_array\\~mask_array.html", "desc": "std::mask_array<T>::std::mask_array<T>::~mask_array"}, {"name": "std::slice_array<T>::std::slice_array<T>::operator=", "type": "cpp", "path": "cpp\\numeric\\valarray\\slice_array\\operator=.html", "desc": "std::slice_array<T>::std::slice_array<T>::operator="}, {"name": "std::slice_array<T>::std::slice_array<T>::operator+=,-=,*=,/=,%=,&=,|=,^=,<<=,>>=", "type": "cpp", "path": "cpp\\numeric\\valarray\\slice_array\\operator_arith.html", "desc": "std::slice_array<T>::std::slice_array<T>::operator+=,-=,*=,/=,%=,&=,|=,^=,<<=,>>="}, {"name": "std::slice_array<T>::std::slice_array<T>::slice_array", "type": "cpp", "path": "cpp\\numeric\\valarray\\slice_array\\slice_array.html", "desc": "std::slice_array<T>::std::slice_array<T>::slice_array"}, {"name": "std::slice_array<T>::std::slice_array<T>::~slice_array", "type": "cpp", "path": "cpp\\numeric\\valarray\\slice_array\\~slice_array.html", "desc": "std::slice_array<T>::std::slice_array<T>::~slice_array"}, {"name": "\u6761\u4ef6\u5305\u542b", "type": "cpp", "path": "cpp\\preprocessor\\conditional.html", "desc": "\u6761\u4ef6\u5305\u542b"}, {"name": "\u8bca\u65ad\u6307\u4ee4", "type": "cpp", "path": "cpp\\preprocessor\\error.html", "desc": "\u8bca\u65ad\u6307\u4ee4"}, {"name": "\u5b9e\u73b0\u5b9a\u4e49\u7684\u884c\u4e3a\u63a7\u5236", "type": "cpp", "path": "cpp\\preprocessor\\impl.html", "desc": "\u5b9e\u73b0\u5b9a\u4e49\u7684\u884c\u4e3a\u63a7\u5236"}, {"name": "\u6e90\u6587\u4ef6\u5305\u542b", "type": "cpp", "path": "cpp\\preprocessor\\include.html", "desc": "\u6e90\u6587\u4ef6\u5305\u542b"}, {"name": "\u6587\u4ef6\u540d\u548c\u884c\u4fe1\u606f", "type": "cpp", "path": "cpp\\preprocessor\\line.html", "desc": "\u6587\u4ef6\u540d\u548c\u884c\u4fe1\u606f"}, {"name": "\u6587\u672c\u66ff\u6362\u5b8f", "type": "cpp", "path": "cpp\\preprocessor\\replace.html", "desc": "\u6587\u672c\u66ff\u6362\u5b8f"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::adjacent_transform, std::ranges::adjacent_transform_view", "type": "cpp", "path": "cpp\\ranges\\adjacent_transform_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::adjacent_transform, std::ranges::adjacent_transform_view"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::adjacent, std::ranges::adjacent_view", "type": "cpp", "path": "cpp\\ranges\\adjacent_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::adjacent, std::ranges::adjacent_view"}, {"name": "std::ranges::views:: std::ranges::views::std::ranges::views::all, std::ranges::views::all_t", "type": "cpp", "path": "cpp\\ranges\\all_view.html", "desc": "std::ranges::views:: std::ranges::views::std::ranges::views::all, std::ranges::views::all_t"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::as_const, std::ranges::as_const_view", "type": "cpp", "path": "cpp\\ranges\\as_const_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::as_const, std::ranges::as_const_view"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::as_rvalue, std::ranges::as_rvalue_view", "type": "cpp", "path": "cpp\\ranges\\as_rvalue_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::as_rvalue, std::ranges::as_rvalue_view"}, {"name": "std::ranges:: views:: std::ranges:: std::ranges:: std::ranges::std::ranges::views::istream, std::ranges::basic_istream_view, std::ranges::istream_view, std::ranges::wistream_view", "type": "cpp", "path": "cpp\\ranges\\basic_istream_view.html", "desc": "std::ranges:: views:: std::ranges:: std::ranges:: std::ranges::std::ranges::views::istream, std::ranges::basic_istream_view, std::ranges::istream_view, std::ranges::wistream_view"}, {"name": "std::ranges::std::ranges::begin", "type": "cpp", "path": "cpp\\ranges\\begin.html", "desc": "std::ranges::std::ranges::begin"}, {"name": "std::ranges::std::ranges::bidirectional_range", "type": "cpp", "path": "cpp\\ranges\\bidirectional_range.html", "desc": "std::ranges::std::ranges::bidirectional_range"}, {"name": "std::ranges:: std::ranges::std::ranges::borrowed_iterator_t, std::ranges::borrowed_subrange_t", "type": "cpp", "path": "cpp\\ranges\\borrowed_iterator_t.html", "desc": "std::ranges:: std::ranges::std::ranges::borrowed_iterator_t, std::ranges::borrowed_subrange_t"}, {"name": "std::ranges:: std::ranges::std::ranges::borrowed_range, std::ranges::enable_borrowed_range", "type": "cpp", "path": "cpp\\ranges\\borrowed_range.html", "desc": "std::ranges:: std::ranges::std::ranges::borrowed_range, std::ranges::enable_borrowed_range"}, {"name": "std::ranges::std::ranges::cbegin", "type": "cpp", "path": "cpp\\ranges\\cbegin.html", "desc": "std::ranges::std::ranges::cbegin"}, {"name": "std::ranges::std::ranges::cdata", "type": "cpp", "path": "cpp\\ranges\\cdata.html", "desc": "std::ranges::std::ranges::cdata"}, {"name": "std::ranges::std::ranges::cend", "type": "cpp", "path": "cpp\\ranges\\cend.html", "desc": "std::ranges::std::ranges::cend"}, {"name": "std::ranges::std::ranges::common_range", "type": "cpp", "path": "cpp\\ranges\\common_range.html", "desc": "std::ranges::std::ranges::common_range"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::common, std::ranges::common_view", "type": "cpp", "path": "cpp\\ranges\\common_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::common, std::ranges::common_view"}, {"name": "std::ranges::std::ranges::constant_range", "type": "cpp", "path": "cpp\\ranges\\constant_range.html", "desc": "std::ranges::std::ranges::constant_range"}, {"name": "std::ranges::std::ranges::contiguous_range", "type": "cpp", "path": "cpp\\ranges\\contiguous_range.html", "desc": "std::ranges::std::ranges::contiguous_range"}, {"name": "(C++20)\u53ef\u8d4b\u503c\u5305\u88c5 (C++20)", "type": "cpp", "path": "cpp\\ranges\\copyable_wrapper.html", "desc": "(C++20)\u53ef\u8d4b\u503c\u5305\u88c5 (C++20)"}, {"name": "\u5b9a\u5236\u70b9\u5bf9\u8c61", "type": "cpp", "path": "cpp\\ranges\\cpo.html", "desc": "\u5b9a\u5236\u70b9\u5bf9\u8c61"}, {"name": "std::ranges::std::ranges::crbegin", "type": "cpp", "path": "cpp\\ranges\\crbegin.html", "desc": "std::ranges::std::ranges::crbegin"}, {"name": "std::ranges::std::ranges::crend", "type": "cpp", "path": "cpp\\ranges\\crend.html", "desc": "std::ranges::std::ranges::crend"}, {"name": "std::ranges::std::ranges::dangling", "type": "cpp", "path": "cpp\\ranges\\dangling.html", "desc": "std::ranges::std::ranges::dangling"}, {"name": "std::ranges::std::ranges::data", "type": "cpp", "path": "cpp\\ranges\\data.html", "desc": "std::ranges::std::ranges::data"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::drop, std::ranges::drop_view", "type": "cpp", "path": "cpp\\ranges\\drop_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::drop, std::ranges::drop_view"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::drop_while, std::ranges::drop_while_view", "type": "cpp", "path": "cpp\\ranges\\drop_while_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::drop_while, std::ranges::drop_while_view"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::elements, std::ranges::elements_view", "type": "cpp", "path": "cpp\\ranges\\elements_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::elements, std::ranges::elements_view"}, {"name": "std::ranges::std::ranges::empty", "type": "cpp", "path": "cpp\\ranges\\empty.html", "desc": "std::ranges::std::ranges::empty"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::empty, std::ranges::empty_view", "type": "cpp", "path": "cpp\\ranges\\empty_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::empty, std::ranges::empty_view"}, {"name": "std::ranges::std::ranges::end", "type": "cpp", "path": "cpp\\ranges\\end.html", "desc": "std::ranges::std::ranges::end"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::enumerate, std::ranges::enumerate_view", "type": "cpp", "path": "cpp\\ranges\\enumerate_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::enumerate, std::ranges::enumerate_view"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::filter, std::ranges::filter_view", "type": "cpp", "path": "cpp\\ranges\\filter_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::filter, std::ranges::filter_view"}, {"name": "std::ranges::std::ranges::forward_range", "type": "cpp", "path": "cpp\\ranges\\forward_range.html", "desc": "std::ranges::std::ranges::forward_range"}, {"name": "std::ranges::std::ranges::input_range", "type": "cpp", "path": "cpp\\ranges\\input_range.html", "desc": "std::ranges::std::ranges::input_range"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::iota, std::ranges::iota_view", "type": "cpp", "path": "cpp\\ranges\\iota_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::iota, std::ranges::iota_view"}, {"name": "std::ranges:: std::ranges:: std::ranges:: std::ranges:: std::ranges:: std::ranges:: std::ranges:: std::ranges::std::ranges::iterator_t, std::ranges::const_iterator_t, std::ranges::sentinel_t, std::ranges::const_sentinel_t, std::ranges::range_size_t, std::ranges::range_difference_t, std::ranges::range_value_t, std::ranges::range_reference_t", "type": "cpp", "path": "cpp\\ranges\\iterator_t.html", "desc": "std::ranges:: std::ranges:: std::ranges:: std::ranges:: std::ranges:: std::ranges:: std::ranges:: std::ranges::std::ranges::iterator_t, std::ranges::const_iterator_t, std::ranges::sentinel_t, std::ranges::const_sentinel_t, std::ranges::range_size_t, std::ranges::range_difference_t, std::ranges::range_value_t, std::ranges::range_reference_t"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::join, std::ranges::join_view", "type": "cpp", "path": "cpp\\ranges\\join_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::join, std::ranges::join_view"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::join_with, std::ranges::join_with_view", "type": "cpp", "path": "cpp\\ranges\\join_with_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::join_with, std::ranges::join_with_view"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::keys, std::ranges::keys_view", "type": "cpp", "path": "cpp\\ranges\\keys_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::keys, std::ranges::keys_view"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::lazy_split, std::ranges::lazy_split_view", "type": "cpp", "path": "cpp\\ranges\\lazy_split_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::lazy_split, std::ranges::lazy_split_view"}, {"name": "std::ranges::std::ranges::output_range", "type": "cpp", "path": "cpp\\ranges\\output_range.html", "desc": "std::ranges::std::ranges::output_range"}, {"name": "std::ranges::std::ranges::owning_view", "type": "cpp", "path": "cpp\\ranges\\owning_view.html", "desc": "std::ranges::std::ranges::owning_view"}, {"name": "std::ranges::std::ranges::random_access_range", "type": "cpp", "path": "cpp\\ranges\\random_access_range.html", "desc": "std::ranges::std::ranges::random_access_range"}, {"name": "std::ranges::std::ranges::range", "type": "cpp", "path": "cpp\\ranges\\range.html", "desc": "std::ranges::std::ranges::range"}, {"name": "std::ranges::std::ranges::range_adaptor_closure", "type": "cpp", "path": "cpp\\ranges\\range_adaptor_closure.html", "desc": "std::ranges::std::ranges::range_adaptor_closure"}, {"name": "std::ranges::std::ranges::rbegin", "type": "cpp", "path": "cpp\\ranges\\rbegin.html", "desc": "std::ranges::std::ranges::rbegin"}, {"name": "std::ranges::std::ranges::ref_view", "type": "cpp", "path": "cpp\\ranges\\ref_view.html", "desc": "std::ranges::std::ranges::ref_view"}, {"name": "std::ranges::std::ranges::rend", "type": "cpp", "path": "cpp\\ranges\\rend.html", "desc": "std::ranges::std::ranges::rend"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::repeat, std::ranges::repeat_view", "type": "cpp", "path": "cpp\\ranges\\repeat_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::repeat, std::ranges::repeat_view"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::reverse, std::ranges::reverse_view", "type": "cpp", "path": "cpp\\ranges\\reverse_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::reverse, std::ranges::reverse_view"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::single, std::ranges::single_view", "type": "cpp", "path": "cpp\\ranges\\single_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::single, std::ranges::single_view"}, {"name": "std::ranges::std::ranges::size", "type": "cpp", "path": "cpp\\ranges\\size.html", "desc": "std::ranges::std::ranges::size"}, {"name": "std::ranges:: std::ranges::std::ranges::sized_range, std::ranges::disable_sized_range", "type": "cpp", "path": "cpp\\ranges\\sized_range.html", "desc": "std::ranges:: std::ranges::std::ranges::sized_range, std::ranges::disable_sized_range"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::split, std::ranges::split_view", "type": "cpp", "path": "cpp\\ranges\\split_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::split, std::ranges::split_view"}, {"name": "std::ranges::std::ranges::ssize", "type": "cpp", "path": "cpp\\ranges\\ssize.html", "desc": "std::ranges::std::ranges::ssize"}, {"name": "std::ranges::std::ranges::subrange", "type": "cpp", "path": "cpp\\ranges\\subrange.html", "desc": "std::ranges::std::ranges::subrange"}, {"name": "std::ranges::std::ranges::subrange_kind", "type": "cpp", "path": "cpp\\ranges\\subrange_kind.html", "desc": "std::ranges::std::ranges::subrange_kind"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::take, std::ranges::take_view", "type": "cpp", "path": "cpp\\ranges\\take_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::take, std::ranges::take_view"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::take_while, std::ranges::take_while_view", "type": "cpp", "path": "cpp\\ranges\\take_while_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::take_while, std::ranges::take_while_view"}, {"name": "std::ranges::std::ranges::to", "type": "cpp", "path": "cpp\\ranges\\to.html", "desc": "std::ranges::std::ranges::to"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::transform, std::ranges::transform_view", "type": "cpp", "path": "cpp\\ranges\\transform_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::transform, std::ranges::transform_view"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::values, std::ranges::values_view", "type": "cpp", "path": "cpp\\ranges\\values_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::values, std::ranges::values_view"}, {"name": "std::ranges:: std::ranges:: std::ranges::std::ranges::view, std::ranges::enable_view, std::ranges::view_base", "type": "cpp", "path": "cpp\\ranges\\view.html", "desc": "std::ranges:: std::ranges:: std::ranges::std::ranges::view, std::ranges::enable_view, std::ranges::view_base"}, {"name": "std::ranges::std::ranges::viewable_range", "type": "cpp", "path": "cpp\\ranges\\viewable_range.html", "desc": "std::ranges::std::ranges::viewable_range"}, {"name": "std::ranges::views::std::ranges::views::counted", "type": "cpp", "path": "cpp\\ranges\\view_counted.html", "desc": "std::ranges::views::std::ranges::views::counted"}, {"name": "std::ranges::std::ranges::view_interface", "type": "cpp", "path": "cpp\\ranges\\view_interface.html", "desc": "std::ranges::std::ranges::view_interface"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::zip_transform, std::ranges::zip_transform_view", "type": "cpp", "path": "cpp\\ranges\\zip_transform_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::zip_transform, std::ranges::zip_transform_view"}, {"name": "std::ranges:: views:: std::ranges::std::ranges::views::zip, std::ranges::zip_view", "type": "cpp", "path": "cpp\\ranges\\zip_view.html", "desc": "std::ranges:: views:: std::ranges::std::ranges::views::zip, std::ranges::zip_view"}, {"name": "std::ranges::adjacent_view<V,N>::std::ranges::adjacent_view<V,N>::adjacent_view", "type": "cpp", "path": "cpp\\ranges\\adjacent_view\\adjacent_view.html", "desc": "std::ranges::adjacent_view<V,N>::std::ranges::adjacent_view<V,N>::adjacent_view"}, {"name": "std::ranges::adjacent_view<V,N>::std::ranges::adjacent_view<V,N>::begin", "type": "cpp", "path": "cpp\\ranges\\adjacent_view\\begin.html", "desc": "std::ranges::adjacent_view<V,N>::std::ranges::adjacent_view<V,N>::begin"}, {"name": "std::ranges::adjacent_view<V,N>::std::ranges::adjacent_view<V,N>::end", "type": "cpp", "path": "cpp\\ranges\\adjacent_view\\end.html", "desc": "std::ranges::adjacent_view<V,N>::std::ranges::adjacent_view<V,N>::end"}, {"name": "std::ranges::adjacent_view<V,N>::std::ranges::adjacent_view<V,N>::iterator", "type": "cpp", "path": "cpp\\ranges\\adjacent_view\\iterator.html", "desc": "std::ranges::adjacent_view<V,N>::std::ranges::adjacent_view<V,N>::iterator"}, {"name": "std::ranges::adjacent_view<V,N>::std::ranges::adjacent_view<V,N>::sentinel", "type": "cpp", "path": "cpp\\ranges\\adjacent_view\\sentinel.html", "desc": "std::ranges::adjacent_view<V,N>::std::ranges::adjacent_view<V,N>::sentinel"}, {"name": "std::ranges::adjacent_view<V,N>::std::ranges::adjacent_view<V,N>::size", "type": "cpp", "path": "cpp\\ranges\\adjacent_view\\size.html", "desc": "std::ranges::adjacent_view<V,N>::std::ranges::adjacent_view<V,N>::size"}, {"name": "std::ranges::adjacent_view<V,N>::iterator<Const>::std::ranges::adjacent_view<V,N>::iterator<Const>::iterator", "type": "cpp", "path": "cpp\\ranges\\adjacent_view\\iterator\\iterator.html", "desc": "std::ranges::adjacent_view<V,N>::iterator<Const>::std::ranges::adjacent_view<V,N>::iterator<Const>::iterator"}, {"name": "(ranges::adjacent_view::iterator)iter_move(ranges::adjacent_view::iterator)", "type": "cpp", "path": "cpp\\ranges\\adjacent_view\\iterator\\iter_move.html", "desc": "(ranges::adjacent_view::iterator)iter_move(ranges::adjacent_view::iterator)"}, {"name": "(ranges::adjacent_view::iterator)iter_swap(ranges::adjacent_view::iterator)", "type": "cpp", "path": "cpp\\ranges\\adjacent_view\\iterator\\iter_swap.html", "desc": "(ranges::adjacent_view::iterator)iter_swap(ranges::adjacent_view::iterator)"}, {"name": "std::ranges::adjacent_view<V,N>::iterator<Const>::std::ranges::adjacent_view<V,N>::iterator<Const>::operator*", "type": "cpp", "path": "cpp\\ranges\\adjacent_view\\iterator\\operator%2A.html", "desc": "std::ranges::adjacent_view<V,N>::iterator<Const>::std::ranges::adjacent_view<V,N>::iterator<Const>::operator*"}, {"name": "std::ranges::adjacent_view<V,N>::iterator<Const>::std::ranges::adjacent_view<V,N>::iterator<Const>::operator++,--,+=,-=", "type": "cpp", "path": "cpp\\ranges\\adjacent_view\\iterator\\operator_arith.html", "desc": "std::ranges::adjacent_view<V,N>::iterator<Const>::std::ranges::adjacent_view<V,N>::iterator<Const>::operator++,--,+=,-="}, {"name": "operator+,-(ranges::adjacent_view::iterator)", "type": "cpp", "path": "cpp\\ranges\\adjacent_view\\iterator\\operator_arith2.html", "desc": "operator+,-(ranges::adjacent_view::iterator)"}, {"name": "std::ranges::adjacent_view<V,N>::iterator<Const>::std::ranges::adjacent_view<V,N>::iterator<Const>::operator[]", "type": "cpp", "path": "cpp\\ranges\\adjacent_view\\iterator\\operator_at.html", "desc": "std::ranges::adjacent_view<V,N>::iterator<Const>::std::ranges::adjacent_view<V,N>::iterator<Const>::operator[]"}, {"name": "operator==,<,>,<=,>=,<=>(ranges::adjacent_view::iterator)", "type": "cpp", "path": "cpp\\ranges\\adjacent_view\\iterator\\operator_cmp.html", "desc": "operator==,<,>,<=,>=,<=>(ranges::adjacent_view::iterator)"}, {"name": "operator-(ranges::adjacent_view::sentinel)", "type": "cpp", "path": "cpp\\ranges\\adjacent_view\\sentinel\\operator-.html", "desc": "operator-(ranges::adjacent_view::sentinel)"}, {"name": "(ranges::adjacent_view::iterator, ranges::adjacent_view::sentinel)operator==(ranges::adjacent_view::iterator, ranges::adjacent_view::sentinel)", "type": "cpp", "path": "cpp\\ranges\\adjacent_view\\sentinel\\operator_cmp.html", "desc": "(ranges::adjacent_view::iterator, ranges::adjacent_view::sentinel)operator==(ranges::adjacent_view::iterator, ranges::adjacent_view::sentinel)"}, {"name": "std::ranges::adjacent_view<V,N>::sentinel<Const>::std::ranges::adjacent_view<V,N>::sentinel<Const>::sentinel", "type": "cpp", "path": "cpp\\ranges\\adjacent_view\\sentinel\\sentinel.html", "desc": "std::ranges::adjacent_view<V,N>::sentinel<Const>::std::ranges::adjacent_view<V,N>::sentinel<Const>::sentinel"}, {"name": "std::ranges::basic_istream_view::std::ranges::basic_istream_view::iterator", "type": "cpp", "path": "cpp\\ranges\\basic_istream_view\\iterator.html", "desc": "std::ranges::basic_istream_view::std::ranges::basic_istream_view::iterator"}, {"name": "std::ranges::common_view<V>::std::ranges::common_view<V>::base", "type": "cpp", "path": "cpp\\ranges\\common_view\\base.html", "desc": "std::ranges::common_view<V>::std::ranges::common_view<V>::base"}, {"name": "std::ranges::common_view<V>::std::ranges::common_view<V>::begin", "type": "cpp", "path": "cpp\\ranges\\common_view\\begin.html", "desc": "std::ranges::common_view<V>::std::ranges::common_view<V>::begin"}, {"name": "std::ranges::common_view<V>::std::ranges::common_view<V>::common_view", "type": "cpp", "path": "cpp\\ranges\\common_view\\common_view.html", "desc": "std::ranges::common_view<V>::std::ranges::common_view<V>::common_view"}, {"name": "std::ranges::common_view \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\ranges\\common_view\\deduction_guides.html", "desc": "std::ranges::common_view \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::ranges::common_view<V>::std::ranges::common_view<V>::end", "type": "cpp", "path": "cpp\\ranges\\common_view\\end.html", "desc": "std::ranges::common_view<V>::std::ranges::common_view<V>::end"}, {"name": "std::ranges::common_view<V>::std::ranges::common_view<V>::size", "type": "cpp", "path": "cpp\\ranges\\common_view\\size.html", "desc": "std::ranges::common_view<V>::std::ranges::common_view<V>::size"}, {"name": "std::ranges::drop_view<V>::std::ranges::drop_view<V>::base", "type": "cpp", "path": "cpp\\ranges\\drop_view\\base.html", "desc": "std::ranges::drop_view<V>::std::ranges::drop_view<V>::base"}, {"name": "std::ranges::drop_view<V>::std::ranges::drop_view<V>::begin", "type": "cpp", "path": "cpp\\ranges\\drop_view\\begin.html", "desc": "std::ranges::drop_view<V>::std::ranges::drop_view<V>::begin"}, {"name": "std::ranges::drop_view \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\ranges\\drop_view\\deduction_guides.html", "desc": "std::ranges::drop_view \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::ranges::drop_view<V>::std::ranges::drop_view<V>::drop_view", "type": "cpp", "path": "cpp\\ranges\\drop_view\\drop_view.html", "desc": "std::ranges::drop_view<V>::std::ranges::drop_view<V>::drop_view"}, {"name": "std::ranges::drop_view<V>::std::ranges::drop_view<V>::end", "type": "cpp", "path": "cpp\\ranges\\drop_view\\end.html", "desc": "std::ranges::drop_view<V>::std::ranges::drop_view<V>::end"}, {"name": "std::ranges::drop_view<V>::std::ranges::drop_view<V>::size", "type": "cpp", "path": "cpp\\ranges\\drop_view\\size.html", "desc": "std::ranges::drop_view<V>::std::ranges::drop_view<V>::size"}, {"name": "std::ranges::drop_while_view<V,Pred>::std::ranges::drop_while_view<V,Pred>::base", "type": "cpp", "path": "cpp\\ranges\\drop_while_view\\base.html", "desc": "std::ranges::drop_while_view<V,Pred>::std::ranges::drop_while_view<V,Pred>::base"}, {"name": "std::ranges::drop_while_view<V,Pred>::std::ranges::drop_while_view<V,Pred>::begin", "type": "cpp", "path": "cpp\\ranges\\drop_while_view\\begin.html", "desc": "std::ranges::drop_while_view<V,Pred>::std::ranges::drop_while_view<V,Pred>::begin"}, {"name": "std::ranges::drop_while_view \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\ranges\\drop_while_view\\deduction_guides.html", "desc": "std::ranges::drop_while_view \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::ranges::drop_while_view<V,Pred>::std::ranges::drop_while_view<V,Pred>::drop_while_view", "type": "cpp", "path": "cpp\\ranges\\drop_while_view\\drop_while_view.html", "desc": "std::ranges::drop_while_view<V,Pred>::std::ranges::drop_while_view<V,Pred>::drop_while_view"}, {"name": "std::ranges::drop_while_view<V,Pred>::std::ranges::drop_while_view<V,Pred>::end", "type": "cpp", "path": "cpp\\ranges\\drop_while_view\\end.html", "desc": "std::ranges::drop_while_view<V,Pred>::std::ranges::drop_while_view<V,Pred>::end"}, {"name": "std::ranges::drop_while_view<V,Pred>::std::ranges::drop_while_view<V,Pred>::pred", "type": "cpp", "path": "cpp\\ranges\\drop_while_view\\pred.html", "desc": "std::ranges::drop_while_view<V,Pred>::std::ranges::drop_while_view<V,Pred>::pred"}, {"name": "std::ranges::elements_view<V,N>::std::ranges::elements_view<V,N>::base", "type": "cpp", "path": "cpp\\ranges\\elements_view\\base.html", "desc": "std::ranges::elements_view<V,N>::std::ranges::elements_view<V,N>::base"}, {"name": "std::ranges::elements_view<V,N>::std::ranges::elements_view<V,N>::begin", "type": "cpp", "path": "cpp\\ranges\\elements_view\\begin.html", "desc": "std::ranges::elements_view<V,N>::std::ranges::elements_view<V,N>::begin"}, {"name": "std::ranges::elements_view<V,N>::std::ranges::elements_view<V,N>::elements_view", "type": "cpp", "path": "cpp\\ranges\\elements_view\\elements_view.html", "desc": "std::ranges::elements_view<V,N>::std::ranges::elements_view<V,N>::elements_view"}, {"name": "std::ranges::elements_view<V,N>::std::ranges::elements_view<V,N>::end", "type": "cpp", "path": "cpp\\ranges\\elements_view\\end.html", "desc": "std::ranges::elements_view<V,N>::std::ranges::elements_view<V,N>::end"}, {"name": "std::ranges::elements_view<V,N>::std::ranges::elements_view<V,N>::iterator", "type": "cpp", "path": "cpp\\ranges\\elements_view\\iterator.html", "desc": "std::ranges::elements_view<V,N>::std::ranges::elements_view<V,N>::iterator"}, {"name": "std::ranges::elements_view<V,N>::std::ranges::elements_view<V,N>::sentinel", "type": "cpp", "path": "cpp\\ranges\\elements_view\\sentinel.html", "desc": "std::ranges::elements_view<V,N>::std::ranges::elements_view<V,N>::sentinel"}, {"name": "std::ranges::elements_view<V,N>::std::ranges::elements_view<V,N>::size", "type": "cpp", "path": "cpp\\ranges\\elements_view\\size.html", "desc": "std::ranges::elements_view<V,N>::std::ranges::elements_view<V,N>::size"}, {"name": "std::ranges::elements_view<V,N>::iterator<Const>::std::ranges::elements_view<V,N>::iterator<Const>::base", "type": "cpp", "path": "cpp\\ranges\\elements_view\\iterator\\base.html", "desc": "std::ranges::elements_view<V,N>::iterator<Const>::std::ranges::elements_view<V,N>::iterator<Const>::base"}, {"name": "std::ranges::elements_view<V,N>::iterator<Const>::std::ranges::elements_view<V,N>::iterator<Const>::iterator", "type": "cpp", "path": "cpp\\ranges\\elements_view\\iterator\\iterator.html", "desc": "std::ranges::elements_view<V,N>::iterator<Const>::std::ranges::elements_view<V,N>::iterator<Const>::iterator"}, {"name": "std::ranges::elements_view<V,N>::iterator<Const>::std::ranges::elements_view<V,N>::iterator<Const>::operator*", "type": "cpp", "path": "cpp\\ranges\\elements_view\\iterator\\operator%2A.html", "desc": "std::ranges::elements_view<V,N>::iterator<Const>::std::ranges::elements_view<V,N>::iterator<Const>::operator*"}, {"name": "std::ranges::elements_view<V,N>::iterator<Const>::std::ranges::elements_view<V,N>::iterator<Const>::operator++,--,+=,-=", "type": "cpp", "path": "cpp\\ranges\\elements_view\\iterator\\operator_arith.html", "desc": "std::ranges::elements_view<V,N>::iterator<Const>::std::ranges::elements_view<V,N>::iterator<Const>::operator++,--,+=,-="}, {"name": "operator+,-(ranges::elements_view::iterator)", "type": "cpp", "path": "cpp\\ranges\\elements_view\\iterator\\operator_arith2.html", "desc": "operator+,-(ranges::elements_view::iterator)"}, {"name": "std::ranges::elements_view<V,N>::iterator<Const>::std::ranges::elements_view<V,N>::iterator<Const>::operator[]", "type": "cpp", "path": "cpp\\ranges\\elements_view\\iterator\\operator_at.html", "desc": "std::ranges::elements_view<V,N>::iterator<Const>::std::ranges::elements_view<V,N>::iterator<Const>::operator[]"}, {"name": "operator==,<,>,<=,>=,<=>(ranges::elements_view::iterator)", "type": "cpp", "path": "cpp\\ranges\\elements_view\\iterator\\operator_cmp.html", "desc": "operator==,<,>,<=,>=,<=>(ranges::elements_view::iterator)"}, {"name": "std::ranges::elements_view<V,N>::sentinel<Const>::std::ranges::elements_view<V,N>::sentinel<Const>::base", "type": "cpp", "path": "cpp\\ranges\\elements_view\\sentinel\\base.html", "desc": "std::ranges::elements_view<V,N>::sentinel<Const>::std::ranges::elements_view<V,N>::sentinel<Const>::base"}, {"name": "operator-(ranges::elements_view::sentinel)", "type": "cpp", "path": "cpp\\ranges\\elements_view\\sentinel\\operator-.html", "desc": "operator-(ranges::elements_view::sentinel)"}, {"name": "operator==(ranges::elements_view::sentinel)", "type": "cpp", "path": "cpp\\ranges\\elements_view\\sentinel\\operator_cmp.html", "desc": "operator==(ranges::elements_view::sentinel)"}, {"name": "std::ranges::elements_view<V,N>::sentinel<Const>::std::ranges::elements_view<V,N>::sentinel<Const>::sentinel", "type": "cpp", "path": "cpp\\ranges\\elements_view\\sentinel\\sentinel.html", "desc": "std::ranges::elements_view<V,N>::sentinel<Const>::std::ranges::elements_view<V,N>::sentinel<Const>::sentinel"}, {"name": "std::ranges::enumerate_view<V>::std::ranges::enumerate_view<V>::base", "type": "cpp", "path": "cpp\\ranges\\enumerate_view\\base.html", "desc": "std::ranges::enumerate_view<V>::std::ranges::enumerate_view<V>::base"}, {"name": "std::ranges::enumerate_view<V>::std::ranges::enumerate_view<V>::begin", "type": "cpp", "path": "cpp\\ranges\\enumerate_view\\begin.html", "desc": "std::ranges::enumerate_view<V>::std::ranges::enumerate_view<V>::begin"}, {"name": "deduction guides for std::ranges::enumerate_view", "type": "cpp", "path": "cpp\\ranges\\enumerate_view\\deduction_guides.html", "desc": "deduction guides for std::ranges::enumerate_view"}, {"name": "std::ranges::enumerate_view<V>::std::ranges::enumerate_view<V>::end", "type": "cpp", "path": "cpp\\ranges\\enumerate_view\\end.html", "desc": "std::ranges::enumerate_view<V>::std::ranges::enumerate_view<V>::end"}, {"name": "std::ranges::enumerate_view<V>::std::ranges::enumerate_view<V>::enumerate_view", "type": "cpp", "path": "cpp\\ranges\\enumerate_view\\enumerate_view.html", "desc": "std::ranges::enumerate_view<V>::std::ranges::enumerate_view<V>::enumerate_view"}, {"name": "std::ranges::enumerate_view<V>::std::ranges::enumerate_view<V>::iterator", "type": "cpp", "path": "cpp\\ranges\\enumerate_view\\iterator.html", "desc": "std::ranges::enumerate_view<V>::std::ranges::enumerate_view<V>::iterator"}, {"name": "std::ranges::enumerate_view<V>::std::ranges::enumerate_view<V>::sentinel", "type": "cpp", "path": "cpp\\ranges\\enumerate_view\\sentinel.html", "desc": "std::ranges::enumerate_view<V>::std::ranges::enumerate_view<V>::sentinel"}, {"name": "std::ranges::enumerate_view<V>::std::ranges::enumerate_view<V>::size", "type": "cpp", "path": "cpp\\ranges\\enumerate_view\\size.html", "desc": "std::ranges::enumerate_view<V>::std::ranges::enumerate_view<V>::size"}, {"name": "std::ranges::enumerate_view<V>::iterator<Const>::std::ranges::enumerate_view<V>::iterator<Const>::base", "type": "cpp", "path": "cpp\\ranges\\enumerate_view\\iterator\\base.html", "desc": "std::ranges::enumerate_view<V>::iterator<Const>::std::ranges::enumerate_view<V>::iterator<Const>::base"}, {"name": "std::ranges::enumerate_view<V>::iterator<Const>::std::ranges::enumerate_view<V>::iterator<Const>::index", "type": "cpp", "path": "cpp\\ranges\\enumerate_view\\iterator\\index.html", "desc": "std::ranges::enumerate_view<V>::iterator<Const>::std::ranges::enumerate_view<V>::iterator<Const>::index"}, {"name": "std::ranges::enumerate_view<V>::iterator<Const>::std::ranges::enumerate_view<V>::iterator<Const>::iterator", "type": "cpp", "path": "cpp\\ranges\\enumerate_view\\iterator\\iterator.html", "desc": "std::ranges::enumerate_view<V>::iterator<Const>::std::ranges::enumerate_view<V>::iterator<Const>::iterator"}, {"name": "(ranges::enumerate_view::iterator)iter_move(ranges::enumerate_view::iterator)", "type": "cpp", "path": "cpp\\ranges\\enumerate_view\\iterator\\iter_move.html", "desc": "(ranges::enumerate_view::iterator)iter_move(ranges::enumerate_view::iterator)"}, {"name": "std::ranges::enumerate_view<V>::iterator<Const>::std::ranges::enumerate_view<V>::iterator<Const>::operator*", "type": "cpp", "path": "cpp\\ranges\\enumerate_view\\iterator\\operator%2A.html", "desc": "std::ranges::enumerate_view<V>::iterator<Const>::std::ranges::enumerate_view<V>::iterator<Const>::operator*"}, {"name": "std::ranges::enumerate_view<V>::iterator<Const>::std::ranges::enumerate_view<V>::iterator<Const>::operator++,--,+=,-=", "type": "cpp", "path": "cpp\\ranges\\enumerate_view\\iterator\\operator_arith.html", "desc": "std::ranges::enumerate_view<V>::iterator<Const>::std::ranges::enumerate_view<V>::iterator<Const>::operator++,--,+=,-="}, {"name": "operator+,-(ranges::enumerate_view::iterator)", "type": "cpp", "path": "cpp\\ranges\\enumerate_view\\iterator\\operator_arith2.html", "desc": "operator+,-(ranges::enumerate_view::iterator)"}, {"name": "std::ranges::enumerate_view<V>::iterator<Const>::std::ranges::enumerate_view<V>::iterator<Const>::operator[]", "type": "cpp", "path": "cpp\\ranges\\enumerate_view\\iterator\\operator_at.html", "desc": "std::ranges::enumerate_view<V>::iterator<Const>::std::ranges::enumerate_view<V>::iterator<Const>::operator[]"}, {"name": "operator==,<=>(ranges::enumerate_view::iterator)", "type": "cpp", "path": "cpp\\ranges\\enumerate_view\\iterator\\operator_cmp.html", "desc": "operator==,<=>(ranges::enumerate_view::iterator)"}, {"name": "std::ranges::enumerate_view<V>::sentinel<Const>::std::ranges::enumerate_view<V>::sentinel<Const>::base", "type": "cpp", "path": "cpp\\ranges\\enumerate_view\\sentinel\\base.html", "desc": "std::ranges::enumerate_view<V>::sentinel<Const>::std::ranges::enumerate_view<V>::sentinel<Const>::base"}, {"name": "operator-(ranges::enumerate_view::sentinel)", "type": "cpp", "path": "cpp\\ranges\\enumerate_view\\sentinel\\operator-.html", "desc": "operator-(ranges::enumerate_view::sentinel)"}, {"name": "operator==(ranges::enumerate_view::iterator, ranges::enumerate_view::sentinel\u200a\ufeff)", "type": "cpp", "path": "cpp\\ranges\\enumerate_view\\sentinel\\operator_cmp.html", "desc": "operator==(ranges::enumerate_view::iterator, ranges::enumerate_view::sentinel\u200a\ufeff)"}, {"name": "std::ranges::enumerate_view<V>::sentinel<Const>::std::ranges::enumerate_view<V>::sentinel<Const>::sentinel", "type": "cpp", "path": "cpp\\ranges\\enumerate_view\\sentinel\\sentinel.html", "desc": "std::ranges::enumerate_view<V>::sentinel<Const>::std::ranges::enumerate_view<V>::sentinel<Const>::sentinel"}, {"name": "std::ranges::filter_view<V,Pred>::std::ranges::filter_view<V,Pred>::iterator", "type": "cpp", "path": "cpp\\ranges\\filter_view\\iterator.html", "desc": "std::ranges::filter_view<V,Pred>::std::ranges::filter_view<V,Pred>::iterator"}, {"name": "std::ranges::filter_view<V,Pred>::std::ranges::filter_view<V,Pred>::sentinel", "type": "cpp", "path": "cpp\\ranges\\filter_view\\sentinel.html", "desc": "std::ranges::filter_view<V,Pred>::std::ranges::filter_view<V,Pred>::sentinel"}, {"name": "std::ranges:: iota_view<W, Bound>::std::ranges::iota_view<W, Bound>::iterator", "type": "cpp", "path": "cpp\\ranges\\iota_view\\iterator.html", "desc": "std::ranges:: iota_view<W, Bound>::std::ranges::iota_view<W, Bound>::iterator"}, {"name": "std::ranges:: iota_view<W, Bound>::std::ranges::iota_view<W, Bound>::sentinel", "type": "cpp", "path": "cpp\\ranges\\iota_view\\sentinel.html", "desc": "std::ranges:: iota_view<W, Bound>::std::ranges::iota_view<W, Bound>::sentinel"}, {"name": "std::ranges::join_view<V>::std::ranges::join_view<V>::begin", "type": "cpp", "path": "cpp\\ranges\\join_view\\begin.html", "desc": "std::ranges::join_view<V>::std::ranges::join_view<V>::begin"}, {"name": "std::ranges::join_view<V>::std::ranges::join_view<V>::join_view", "type": "cpp", "path": "cpp\\ranges\\join_view\\join_view.html", "desc": "std::ranges::join_view<V>::std::ranges::join_view<V>::join_view"}, {"name": "std::ranges::subrange<I,S,K>::std::ranges::subrange<I,S,K>::advance", "type": "cpp", "path": "cpp\\ranges\\subrange\\advance.html", "desc": "std::ranges::subrange<I,S,K>::std::ranges::subrange<I,S,K>::advance"}, {"name": "std::ranges::subrange<I,S,K>::std::ranges::subrange<I,S,K>::begin", "type": "cpp", "path": "cpp\\ranges\\subrange\\begin.html", "desc": "std::ranges::subrange<I,S,K>::std::ranges::subrange<I,S,K>::begin"}, {"name": "std::ranges::subrange \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\ranges\\subrange\\deduction_guides.html", "desc": "std::ranges::subrange \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::ranges::subrange<I,S,K>::std::ranges::subrange<I,S,K>::empty", "type": "cpp", "path": "cpp\\ranges\\subrange\\empty.html", "desc": "std::ranges::subrange<I,S,K>::std::ranges::subrange<I,S,K>::empty"}, {"name": "std::ranges::subrange<I,S,K>::std::ranges::subrange<I,S,K>::end", "type": "cpp", "path": "cpp\\ranges\\subrange\\end.html", "desc": "std::ranges::subrange<I,S,K>::std::ranges::subrange<I,S,K>::end"}, {"name": "std::ranges::std::ranges::get(std::ranges::subrange)", "type": "cpp", "path": "cpp\\ranges\\subrange\\get.html", "desc": "std::ranges::std::ranges::get(std::ranges::subrange)"}, {"name": "std::ranges::subrange<I,S,K>::std::ranges::subrange<I,S,K>::next", "type": "cpp", "path": "cpp\\ranges\\subrange\\next.html", "desc": "std::ranges::subrange<I,S,K>::std::ranges::subrange<I,S,K>::next"}, {"name": "std::ranges::subrange<I,S,K>::std::ranges::subrange<I,S,K>::operator PairLike", "type": "cpp", "path": "cpp\\ranges\\subrange\\operator_PairLike.html", "desc": "std::ranges::subrange<I,S,K>::std::ranges::subrange<I,S,K>::operator PairLike"}, {"name": "std::ranges::subrange<I,S,K>::std::ranges::subrange<I,S,K>::prev", "type": "cpp", "path": "cpp\\ranges\\subrange\\prev.html", "desc": "std::ranges::subrange<I,S,K>::std::ranges::subrange<I,S,K>::prev"}, {"name": "std::ranges::subrange<I,S,K>::std::ranges::subrange<I,S,K>::size", "type": "cpp", "path": "cpp\\ranges\\subrange\\size.html", "desc": "std::ranges::subrange<I,S,K>::std::ranges::subrange<I,S,K>::size"}, {"name": "std::ranges::subrange<I,S,K>::std::ranges::subrange<I,S,K>::subrange", "type": "cpp", "path": "cpp\\ranges\\subrange\\subrange.html", "desc": "std::ranges::subrange<I,S,K>::std::ranges::subrange<I,S,K>::subrange"}, {"name": "std::std::tuple_element<std::ranges::subrange>", "type": "cpp", "path": "cpp\\ranges\\subrange\\tuple_element.html", "desc": "std::std::tuple_element<std::ranges::subrange>"}, {"name": "std::std::tuple_size<std:ranges::subrange>", "type": "cpp", "path": "cpp\\ranges\\subrange\\tuple_size.html", "desc": "std::std::tuple_size<std:ranges::subrange>"}, {"name": "std::ranges::take_view<V>::std::ranges::take_view<V>::base", "type": "cpp", "path": "cpp\\ranges\\take_view\\base.html", "desc": "std::ranges::take_view<V>::std::ranges::take_view<V>::base"}, {"name": "std::ranges::take_view<V>::std::ranges::take_view<V>::begin", "type": "cpp", "path": "cpp\\ranges\\take_view\\begin.html", "desc": "std::ranges::take_view<V>::std::ranges::take_view<V>::begin"}, {"name": "std::ranges::take_view \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\ranges\\take_view\\deduction_guides.html", "desc": "std::ranges::take_view \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::ranges::take_view<V>::std::ranges::take_view<V>::end", "type": "cpp", "path": "cpp\\ranges\\take_view\\end.html", "desc": "std::ranges::take_view<V>::std::ranges::take_view<V>::end"}, {"name": "std::ranges::take_view<V>::std::ranges::take_view<V>::sentinel", "type": "cpp", "path": "cpp\\ranges\\take_view\\sentinel.html", "desc": "std::ranges::take_view<V>::std::ranges::take_view<V>::sentinel"}, {"name": "std::ranges::take_view<V>::std::ranges::take_view<V>::size", "type": "cpp", "path": "cpp\\ranges\\take_view\\size.html", "desc": "std::ranges::take_view<V>::std::ranges::take_view<V>::size"}, {"name": "std::ranges::take_view<V>::std::ranges::take_view<V>::take_view", "type": "cpp", "path": "cpp\\ranges\\take_view\\take_view.html", "desc": "std::ranges::take_view<V>::std::ranges::take_view<V>::take_view"}, {"name": "std::ranges::take_view<V>::sentinel<Const>::std::ranges::take_view<V>::sentinel<Const>::base", "type": "cpp", "path": "cpp\\ranges\\take_view\\sentinel\\base.html", "desc": "std::ranges::take_view<V>::sentinel<Const>::std::ranges::take_view<V>::sentinel<Const>::base"}, {"name": "operator==(std::ranges::take_view::sentinel<Const>)", "type": "cpp", "path": "cpp\\ranges\\take_view\\sentinel\\operator_cmp.html", "desc": "operator==(std::ranges::take_view::sentinel<Const>)"}, {"name": "std::ranges::take_view<V>::sentinel<Const>::std::ranges::take_view<V>::sentinel<Const>::sentinel", "type": "cpp", "path": "cpp\\ranges\\take_view\\sentinel\\sentinel.html", "desc": "std::ranges::take_view<V>::sentinel<Const>::std::ranges::take_view<V>::sentinel<Const>::sentinel"}, {"name": "std::ranges::take_while_view<V,Pred>::std::ranges::take_while_view<V,Pred>::base", "type": "cpp", "path": "cpp\\ranges\\take_while_view\\base.html", "desc": "std::ranges::take_while_view<V,Pred>::std::ranges::take_while_view<V,Pred>::base"}, {"name": "std::ranges::take_while_view<V,Pred>::std::ranges::take_while_view<V,Pred>::begin", "type": "cpp", "path": "cpp\\ranges\\take_while_view\\begin.html", "desc": "std::ranges::take_while_view<V,Pred>::std::ranges::take_while_view<V,Pred>::begin"}, {"name": "std::ranges::take_while_view \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\ranges\\take_while_view\\deduction_guides.html", "desc": "std::ranges::take_while_view \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::ranges::take_while_view<V,Pred>::std::ranges::take_while_view<V,Pred>::end", "type": "cpp", "path": "cpp\\ranges\\take_while_view\\end.html", "desc": "std::ranges::take_while_view<V,Pred>::std::ranges::take_while_view<V,Pred>::end"}, {"name": "std::ranges::take_while_view<V,Pred>::std::ranges::take_while_view<V,Pred>::pred", "type": "cpp", "path": "cpp\\ranges\\take_while_view\\pred.html", "desc": "std::ranges::take_while_view<V,Pred>::std::ranges::take_while_view<V,Pred>::pred"}, {"name": "std::ranges::take_while_view<V,Pred>::std::ranges::take_while_view<V,Pred>::sentinel", "type": "cpp", "path": "cpp\\ranges\\take_while_view\\sentinel.html", "desc": "std::ranges::take_while_view<V,Pred>::std::ranges::take_while_view<V,Pred>::sentinel"}, {"name": "std::ranges::take_while_view<V,Pred>::std::ranges::take_while_view<V,Pred>::take_while_view", "type": "cpp", "path": "cpp\\ranges\\take_while_view\\take_while_view.html", "desc": "std::ranges::take_while_view<V,Pred>::std::ranges::take_while_view<V,Pred>::take_while_view"}, {"name": "std::ranges::take_while_view<V,Pred>::sentinel<Const>::std::ranges::take_while_view<V,Pred>::sentinel<Const>::base", "type": "cpp", "path": "cpp\\ranges\\take_while_view\\sentinel\\base.html", "desc": "std::ranges::take_while_view<V,Pred>::sentinel<Const>::std::ranges::take_while_view<V,Pred>::sentinel<Const>::base"}, {"name": "operator==(ranges::take_while_view::sentinel)", "type": "cpp", "path": "cpp\\ranges\\take_while_view\\sentinel\\operator_cmp.html", "desc": "operator==(ranges::take_while_view::sentinel)"}, {"name": "std::ranges::take_while_view<V,Pred>::sentinel<Const>::std::ranges::take_while_view<V,Pred>::sentinel<Const>::sentinel", "type": "cpp", "path": "cpp\\ranges\\take_while_view\\sentinel\\sentinel.html", "desc": "std::ranges::take_while_view<V,Pred>::sentinel<Const>::std::ranges::take_while_view<V,Pred>::sentinel<Const>::sentinel"}, {"name": "std::ranges::transform_view<V,F>::std::ranges::transform_view<V,F>::base", "type": "cpp", "path": "cpp\\ranges\\transform_view\\base.html", "desc": "std::ranges::transform_view<V,F>::std::ranges::transform_view<V,F>::base"}, {"name": "std::ranges::transform_view<V,F>::std::ranges::transform_view<V,F>::begin", "type": "cpp", "path": "cpp\\ranges\\transform_view\\begin.html", "desc": "std::ranges::transform_view<V,F>::std::ranges::transform_view<V,F>::begin"}, {"name": "std::ranges::transform_view \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\ranges\\transform_view\\deduction_guides.html", "desc": "std::ranges::transform_view \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::ranges::transform_view<V,F>::std::ranges::transform_view<V,F>::end", "type": "cpp", "path": "cpp\\ranges\\transform_view\\end.html", "desc": "std::ranges::transform_view<V,F>::std::ranges::transform_view<V,F>::end"}, {"name": "std::ranges::transform_view<V,F>::std::ranges::transform_view<V,F>::iterator", "type": "cpp", "path": "cpp\\ranges\\transform_view\\iterator.html", "desc": "std::ranges::transform_view<V,F>::std::ranges::transform_view<V,F>::iterator"}, {"name": "std::ranges::transform_view<V,F>::std::ranges::transform_view<V,F>::sentinel", "type": "cpp", "path": "cpp\\ranges\\transform_view\\sentinel.html", "desc": "std::ranges::transform_view<V,F>::std::ranges::transform_view<V,F>::sentinel"}, {"name": "std::ranges::transform_view<V,F>::std::ranges::transform_view<V,F>::size", "type": "cpp", "path": "cpp\\ranges\\transform_view\\size.html", "desc": "std::ranges::transform_view<V,F>::std::ranges::transform_view<V,F>::size"}, {"name": "std::ranges::transform_view<V,F>::std::ranges::transform_view<V,F>::transform_view", "type": "cpp", "path": "cpp\\ranges\\transform_view\\transform_view.html", "desc": "std::ranges::transform_view<V,F>::std::ranges::transform_view<V,F>::transform_view"}, {"name": "std::ranges::transform_view<V,F>::iterator<Const>::std::ranges::transform_view<V,F>::iterator<Const>::base", "type": "cpp", "path": "cpp\\ranges\\transform_view\\iterator\\base.html", "desc": "std::ranges::transform_view<V,F>::iterator<Const>::std::ranges::transform_view<V,F>::iterator<Const>::base"}, {"name": "std::ranges::transform_view<V,F>::iterator<Const>::std::ranges::transform_view<V,F>::iterator<Const>::iterator", "type": "cpp", "path": "cpp\\ranges\\transform_view\\iterator\\iterator.html", "desc": "std::ranges::transform_view<V,F>::iterator<Const>::std::ranges::transform_view<V,F>::iterator<Const>::iterator"}, {"name": "(ranges::transform_view::iterator)iter_move(ranges::transform_view::iterator)", "type": "cpp", "path": "cpp\\ranges\\transform_view\\iterator\\iter_move.html", "desc": "(ranges::transform_view::iterator)iter_move(ranges::transform_view::iterator)"}, {"name": "std::ranges::transform_view<V,F>::iterator<Const>::std::ranges::transform_view<V,F>::iterator<Const>::operator*", "type": "cpp", "path": "cpp\\ranges\\transform_view\\iterator\\operator%2A.html", "desc": "std::ranges::transform_view<V,F>::iterator<Const>::std::ranges::transform_view<V,F>::iterator<Const>::operator*"}, {"name": "std::ranges::transform_view<V,F>::iterator<Const>::std::ranges::transform_view<V,F>::iterator<Const>::operator++,--,+=,-=", "type": "cpp", "path": "cpp\\ranges\\transform_view\\iterator\\operator_arith.html", "desc": "std::ranges::transform_view<V,F>::iterator<Const>::std::ranges::transform_view<V,F>::iterator<Const>::operator++,--,+=,-="}, {"name": "(ranges::transform_view::iterator)operator+,-(ranges::transform_view::iterator)", "type": "cpp", "path": "cpp\\ranges\\transform_view\\iterator\\operator_arith2.html", "desc": "(ranges::transform_view::iterator)operator+,-(ranges::transform_view::iterator)"}, {"name": "std::ranges::transform_view<V,F>::iterator<Const>::std::ranges::transform_view<V,F>::iterator<Const>::operator[]", "type": "cpp", "path": "cpp\\ranges\\transform_view\\iterator\\operator_at.html", "desc": "std::ranges::transform_view<V,F>::iterator<Const>::std::ranges::transform_view<V,F>::iterator<Const>::operator[]"}, {"name": "(ranges::transform_view::iterator)operator==,<,>,<=,>=,<=>(ranges::transform_view::iterator)", "type": "cpp", "path": "cpp\\ranges\\transform_view\\iterator\\operator_cmp.html", "desc": "(ranges::transform_view::iterator)operator==,<,>,<=,>=,<=>(ranges::transform_view::iterator)"}, {"name": "std::ranges::transform_view<V,F>::sentinel<Const>::std::ranges::transform_view<V,F>::sentinel<Const>::base", "type": "cpp", "path": "cpp\\ranges\\transform_view\\sentinel\\base.html", "desc": "std::ranges::transform_view<V,F>::sentinel<Const>::std::ranges::transform_view<V,F>::sentinel<Const>::base"}, {"name": "(ranges::transform_view::sentinel)operator-(ranges::transform_view::sentinel)", "type": "cpp", "path": "cpp\\ranges\\transform_view\\sentinel\\operator-.html", "desc": "(ranges::transform_view::sentinel)operator-(ranges::transform_view::sentinel)"}, {"name": "(ranges::transform_view::sentinel)operator==(ranges::transform_view::sentinel)", "type": "cpp", "path": "cpp\\ranges\\transform_view\\sentinel\\operator_cmp.html", "desc": "(ranges::transform_view::sentinel)operator==(ranges::transform_view::sentinel)"}, {"name": "std::ranges::transform_view<V,F>::sentinel<Const>::std::ranges::transform_view<V,F>::sentinel<Const>::sentinel", "type": "cpp", "path": "cpp\\ranges\\transform_view\\sentinel\\sentinel.html", "desc": "std::ranges::transform_view<V,F>::sentinel<Const>::std::ranges::transform_view<V,F>::sentinel<Const>::sentinel"}, {"name": "std::ranges::view_interface<D>::std::ranges::view_interface<D>::back", "type": "cpp", "path": "cpp\\ranges\\view_interface\\back.html", "desc": "std::ranges::view_interface<D>::std::ranges::view_interface<D>::back"}, {"name": "std::ranges::view_interface<D>::std::ranges::view_interface<D>::cbegin", "type": "cpp", "path": "cpp\\ranges\\view_interface\\cbegin.html", "desc": "std::ranges::view_interface<D>::std::ranges::view_interface<D>::cbegin"}, {"name": "std::ranges::view_interface<D>::std::ranges::view_interface<D>::cend", "type": "cpp", "path": "cpp\\ranges\\view_interface\\cend.html", "desc": "std::ranges::view_interface<D>::std::ranges::view_interface<D>::cend"}, {"name": "std::ranges::view_interface<D>::std::ranges::view_interface<D>::data", "type": "cpp", "path": "cpp\\ranges\\view_interface\\data.html", "desc": "std::ranges::view_interface<D>::std::ranges::view_interface<D>::data"}, {"name": "std::ranges::view_interface<D>::std::ranges::view_interface<D>::empty", "type": "cpp", "path": "cpp\\ranges\\view_interface\\empty.html", "desc": "std::ranges::view_interface<D>::std::ranges::view_interface<D>::empty"}, {"name": "std::ranges::view_interface<D>::std::ranges::view_interface<D>::front", "type": "cpp", "path": "cpp\\ranges\\view_interface\\front.html", "desc": "std::ranges::view_interface<D>::std::ranges::view_interface<D>::front"}, {"name": "std::ranges::view_interface<D>::std::ranges::view_interface<D>::operator[]", "type": "cpp", "path": "cpp\\ranges\\view_interface\\operator_at.html", "desc": "std::ranges::view_interface<D>::std::ranges::view_interface<D>::operator[]"}, {"name": "std::ranges::view_interface<D>::std::ranges::view_interface<D>::operator bool", "type": "cpp", "path": "cpp\\ranges\\view_interface\\operator_bool.html", "desc": "std::ranges::view_interface<D>::std::ranges::view_interface<D>::operator bool"}, {"name": "std::ranges::view_interface<D>::std::ranges::view_interface<D>::size", "type": "cpp", "path": "cpp\\ranges\\view_interface\\size.html", "desc": "std::ranges::view_interface<D>::std::ranges::view_interface<D>::size"}, {"name": "std::ranges::zip_transform_view<F,Views...>::std::ranges::zip_transform_view<F,Views...>::begin", "type": "cpp", "path": "cpp\\ranges\\zip_transform_view\\begin.html", "desc": "std::ranges::zip_transform_view<F,Views...>::std::ranges::zip_transform_view<F,Views...>::begin"}, {"name": "std::ranges::zip_transform_view<F,Views...>::std::ranges::zip_transform_view<F,Views...>::zip_transform_view", "type": "cpp", "path": "cpp\\ranges\\zip_transform_view\\zip_transform_view.html", "desc": "std::ranges::zip_transform_view<F,Views...>::std::ranges::zip_transform_view<F,Views...>::zip_transform_view"}, {"name": "std::std::basic_regex", "type": "cpp", "path": "cpp\\regex\\basic_regex.html", "desc": "std::std::basic_regex"}, {"name": "\u6539 ECMAScript \u6b63\u5219\u8868\u8fbe\u5f0f\u6587\u6cd5", "type": "cpp", "path": "cpp\\regex\\ecmascript.html", "desc": "\u6539 ECMAScript \u6b63\u5219\u8868\u8fbe\u5f0f\u6587\u6cd5"}, {"name": "std::regex_constants::std::regex_constants::error_type", "type": "cpp", "path": "cpp\\regex\\error_type.html", "desc": "std::regex_constants::std::regex_constants::error_type"}, {"name": "std::regex_constants::std::regex_constants::match_flag_type", "type": "cpp", "path": "cpp\\regex\\match_flag_type.html", "desc": "std::regex_constants::std::regex_constants::match_flag_type"}, {"name": "std::std::match_results", "type": "cpp", "path": "cpp\\regex\\match_results.html", "desc": "std::std::match_results"}, {"name": "std::std::regex_error", "type": "cpp", "path": "cpp\\regex\\regex_error.html", "desc": "std::std::regex_error"}, {"name": "std::std::regex_iterator", "type": "cpp", "path": "cpp\\regex\\regex_iterator.html", "desc": "std::std::regex_iterator"}, {"name": "std::std::regex_match", "type": "cpp", "path": "cpp\\regex\\regex_match.html", "desc": "std::std::regex_match"}, {"name": "std::std::regex_replace", "type": "cpp", "path": "cpp\\regex\\regex_replace.html", "desc": "std::std::regex_replace"}, {"name": "std::std::regex_search", "type": "cpp", "path": "cpp\\regex\\regex_search.html", "desc": "std::std::regex_search"}, {"name": "std::std::regex_token_iterator", "type": "cpp", "path": "cpp\\regex\\regex_token_iterator.html", "desc": "std::std::regex_token_iterator"}, {"name": "std::std::regex_traits", "type": "cpp", "path": "cpp\\regex\\regex_traits.html", "desc": "std::std::regex_traits"}, {"name": "std::std::sub_match", "type": "cpp", "path": "cpp\\regex\\sub_match.html", "desc": "std::std::sub_match"}, {"name": "std::regex_constants::std::regex_constants::syntax_option_type", "type": "cpp", "path": "cpp\\regex\\syntax_option_type.html", "desc": "std::regex_constants::std::regex_constants::syntax_option_type"}, {"name": "std::basic_regex<CharT,Traits>::std::basic_regex<CharT,Traits>::assign", "type": "cpp", "path": "cpp\\regex\\basic_regex\\assign.html", "desc": "std::basic_regex<CharT,Traits>::std::basic_regex<CharT,Traits>::assign"}, {"name": "std::basic_regex<CharT,Traits>::std::basic_regex<CharT,Traits>::basic_regex", "type": "cpp", "path": "cpp\\regex\\basic_regex\\basic_regex.html", "desc": "std::basic_regex<CharT,Traits>::std::basic_regex<CharT,Traits>::basic_regex"}, {"name": "std::std::basic_regex \u5e38\u91cf", "type": "cpp", "path": "cpp\\regex\\basic_regex\\constants.html", "desc": "std::std::basic_regex \u5e38\u91cf"}, {"name": "std::basic_regex \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\regex\\basic_regex\\deduction_guides.html", "desc": "std::basic_regex \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::basic_regex<CharT,Traits>::std::basic_regex<CharT,Traits>::flags", "type": "cpp", "path": "cpp\\regex\\basic_regex\\flags.html", "desc": "std::basic_regex<CharT,Traits>::std::basic_regex<CharT,Traits>::flags"}, {"name": "std::basic_regex<CharT,Traits>::std::basic_regex<CharT,Traits>::getloc", "type": "cpp", "path": "cpp\\regex\\basic_regex\\getloc.html", "desc": "std::basic_regex<CharT,Traits>::std::basic_regex<CharT,Traits>::getloc"}, {"name": "std::basic_regex<CharT,Traits>::std::basic_regex<CharT,Traits>::imbue", "type": "cpp", "path": "cpp\\regex\\basic_regex\\imbue.html", "desc": "std::basic_regex<CharT,Traits>::std::basic_regex<CharT,Traits>::imbue"}, {"name": "std::basic_regex<CharT,Traits>::std::basic_regex<CharT,Traits>::mark_count", "type": "cpp", "path": "cpp\\regex\\basic_regex\\mark_count.html", "desc": "std::basic_regex<CharT,Traits>::std::basic_regex<CharT,Traits>::mark_count"}, {"name": "std::basic_regex<CharT,Traits>::std::basic_regex<CharT,Traits>::operator=", "type": "cpp", "path": "cpp\\regex\\basic_regex\\operator=.html", "desc": "std::basic_regex<CharT,Traits>::std::basic_regex<CharT,Traits>::operator="}, {"name": "std::basic_regex<CharT,Traits>::std::basic_regex<CharT,Traits>::swap", "type": "cpp", "path": "cpp\\regex\\basic_regex\\swap.html", "desc": "std::basic_regex<CharT,Traits>::std::basic_regex<CharT,Traits>::swap"}, {"name": "std::std::swap(std::basic_regex)", "type": "cpp", "path": "cpp\\regex\\basic_regex\\swap2.html", "desc": "std::std::swap(std::basic_regex)"}, {"name": "std::basic_regex<CharT,Traits>::std::basic_regex<CharT,Traits>::~basic_regex", "type": "cpp", "path": "cpp\\regex\\basic_regex\\~basic_regex.html", "desc": "std::basic_regex<CharT,Traits>::std::basic_regex<CharT,Traits>::~basic_regex"}, {"name": "std::match_results<BidirIt,Alloc>:: std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::begin, std::match_results<BidirIt,Alloc>::cbegin", "type": "cpp", "path": "cpp\\regex\\match_results\\begin.html", "desc": "std::match_results<BidirIt,Alloc>:: std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::begin, std::match_results<BidirIt,Alloc>::cbegin"}, {"name": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::empty", "type": "cpp", "path": "cpp\\regex\\match_results\\empty.html", "desc": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::empty"}, {"name": "std::match_results<BidirIt,Alloc>:: std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::end, std::match_results<BidirIt,Alloc>::cend", "type": "cpp", "path": "cpp\\regex\\match_results\\end.html", "desc": "std::match_results<BidirIt,Alloc>:: std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::end, std::match_results<BidirIt,Alloc>::cend"}, {"name": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::format", "type": "cpp", "path": "cpp\\regex\\match_results\\format.html", "desc": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::format"}, {"name": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::get_allocator", "type": "cpp", "path": "cpp\\regex\\match_results\\get_allocator.html", "desc": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::get_allocator"}, {"name": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::length", "type": "cpp", "path": "cpp\\regex\\match_results\\length.html", "desc": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::length"}, {"name": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::match_results", "type": "cpp", "path": "cpp\\regex\\match_results\\match_results.html", "desc": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::match_results"}, {"name": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::max_size", "type": "cpp", "path": "cpp\\regex\\match_results\\max_size.html", "desc": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::max_size"}, {"name": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::operator=", "type": "cpp", "path": "cpp\\regex\\match_results\\operator=.html", "desc": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::operator="}, {"name": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::operator[]", "type": "cpp", "path": "cpp\\regex\\match_results\\operator_at.html", "desc": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::operator[]"}, {"name": "(std::match_results)operator==,!=(std::match_results)", "type": "cpp", "path": "cpp\\regex\\match_results\\operator_cmp.html", "desc": "(std::match_results)operator==,!=(std::match_results)"}, {"name": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::position", "type": "cpp", "path": "cpp\\regex\\match_results\\position.html", "desc": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::position"}, {"name": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::prefix", "type": "cpp", "path": "cpp\\regex\\match_results\\prefix.html", "desc": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::prefix"}, {"name": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::ready", "type": "cpp", "path": "cpp\\regex\\match_results\\ready.html", "desc": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::ready"}, {"name": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::size", "type": "cpp", "path": "cpp\\regex\\match_results\\size.html", "desc": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::size"}, {"name": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::str", "type": "cpp", "path": "cpp\\regex\\match_results\\str.html", "desc": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::str"}, {"name": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::suffix", "type": "cpp", "path": "cpp\\regex\\match_results\\suffix.html", "desc": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::suffix"}, {"name": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::swap", "type": "cpp", "path": "cpp\\regex\\match_results\\swap.html", "desc": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::swap"}, {"name": "std:: (std::match_results)std::swap(std::match_results)", "type": "cpp", "path": "cpp\\regex\\match_results\\swap2.html", "desc": "std:: (std::match_results)std::swap(std::match_results)"}, {"name": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::~match_results", "type": "cpp", "path": "cpp\\regex\\match_results\\~match_results.html", "desc": "std::match_results<BidirIt,Alloc>::std::match_results<BidirIt,Alloc>::~match_results"}, {"name": "std::regex_error::std::regex_error::code", "type": "cpp", "path": "cpp\\regex\\regex_error\\code.html", "desc": "std::regex_error::std::regex_error::code"}, {"name": "std::regex_error::std::regex_error::operator=", "type": "cpp", "path": "cpp\\regex\\regex_error\\operator=.html", "desc": "std::regex_error::std::regex_error::operator="}, {"name": "std::regex_error::std::regex_error::regex_error", "type": "cpp", "path": "cpp\\regex\\regex_error\\regex_error.html", "desc": "std::regex_error::std::regex_error::regex_error"}, {"name": "std::regex_iterator<BidirIt,CharT,Traits>::std::regex_iterator<BidirIt,CharT,Traits>::operator*,operator->", "type": "cpp", "path": "cpp\\regex\\regex_iterator\\operator%2A.html", "desc": "std::regex_iterator<BidirIt,CharT,Traits>::std::regex_iterator<BidirIt,CharT,Traits>::operator*,operator->"}, {"name": "std::regex_iterator<BidirIt,CharT,Traits>::std::regex_iterator<BidirIt,CharT,Traits>::operator=", "type": "cpp", "path": "cpp\\regex\\regex_iterator\\operator=.html", "desc": "std::regex_iterator<BidirIt,CharT,Traits>::std::regex_iterator<BidirIt,CharT,Traits>::operator="}, {"name": "std::regex_iterator<BidirIt,CharT,Traits>:: (int)std::regex_iterator<BidirIt,CharT,Traits>::operator++, operator++(int)", "type": "cpp", "path": "cpp\\regex\\regex_iterator\\operator_arith.html", "desc": "std::regex_iterator<BidirIt,CharT,Traits>:: (int)std::regex_iterator<BidirIt,CharT,Traits>::operator++, operator++(int)"}, {"name": "std::regex_iterator<BidirIt,CharT,Traits>::std::regex_iterator<BidirIt,CharT,Traits>::operator==,operator!=", "type": "cpp", "path": "cpp\\regex\\regex_iterator\\operator_cmp.html", "desc": "std::regex_iterator<BidirIt,CharT,Traits>::std::regex_iterator<BidirIt,CharT,Traits>::operator==,operator!="}, {"name": "std::regex_iterator<BidirIt,CharT,Traits>::std::regex_iterator<BidirIt,CharT,Traits>::regex_iterator", "type": "cpp", "path": "cpp\\regex\\regex_iterator\\regex_iterator.html", "desc": "std::regex_iterator<BidirIt,CharT,Traits>::std::regex_iterator<BidirIt,CharT,Traits>::regex_iterator"}, {"name": "std::regex_token_iterator<BidirIt,CharT,Traits>::std::regex_token_iterator<BidirIt,CharT,Traits>::operator*, operator->", "type": "cpp", "path": "cpp\\regex\\regex_token_iterator\\operator%2A.html", "desc": "std::regex_token_iterator<BidirIt,CharT,Traits>::std::regex_token_iterator<BidirIt,CharT,Traits>::operator*, operator->"}, {"name": "std::regex_token_iterator<BidirIt,CharT,Traits>::std::regex_token_iterator<BidirIt,CharT,Traits>::operator=", "type": "cpp", "path": "cpp\\regex\\regex_token_iterator\\operator=.html", "desc": "std::regex_token_iterator<BidirIt,CharT,Traits>::std::regex_token_iterator<BidirIt,CharT,Traits>::operator="}, {"name": "std::regex_token_iterator<BidirIt,CharT,Traits>:: (int)std::regex_token_iterator<BidirIt,CharT,Traits>::operator++, operator++(int)", "type": "cpp", "path": "cpp\\regex\\regex_token_iterator\\operator_arith.html", "desc": "std::regex_token_iterator<BidirIt,CharT,Traits>:: (int)std::regex_token_iterator<BidirIt,CharT,Traits>::operator++, operator++(int)"}, {"name": "std::regex_token_iterator<BidirIt,CharT,Traits>::std::regex_token_iterator<BidirIt,CharT,Traits>::operator==, operator!=", "type": "cpp", "path": "cpp\\regex\\regex_token_iterator\\operator_cmp.html", "desc": "std::regex_token_iterator<BidirIt,CharT,Traits>::std::regex_token_iterator<BidirIt,CharT,Traits>::operator==, operator!="}, {"name": "std::regex_token_iterator<BidirIt,CharT,Traits>::std::regex_token_iterator<BidirIt,CharT,Traits>::regex_token_iterator", "type": "cpp", "path": "cpp\\regex\\regex_token_iterator\\regex_token_iterator.html", "desc": "std::regex_token_iterator<BidirIt,CharT,Traits>::std::regex_token_iterator<BidirIt,CharT,Traits>::regex_token_iterator"}, {"name": "std::regex_traits<CharT>::std::regex_traits<CharT>::getloc", "type": "cpp", "path": "cpp\\regex\\regex_traits\\getloc.html", "desc": "std::regex_traits<CharT>::std::regex_traits<CharT>::getloc"}, {"name": "std::regex_traits<CharT>::std::regex_traits<CharT>::imbue", "type": "cpp", "path": "cpp\\regex\\regex_traits\\imbue.html", "desc": "std::regex_traits<CharT>::std::regex_traits<CharT>::imbue"}, {"name": "std::regex_traits<CharT>::std::regex_traits<CharT>::isctype", "type": "cpp", "path": "cpp\\regex\\regex_traits\\isctype.html", "desc": "std::regex_traits<CharT>::std::regex_traits<CharT>::isctype"}, {"name": "std::regex_traits<CharT>::std::regex_traits<CharT>::length", "type": "cpp", "path": "cpp\\regex\\regex_traits\\length.html", "desc": "std::regex_traits<CharT>::std::regex_traits<CharT>::length"}, {"name": "std::regex_traits<CharT>::std::regex_traits<CharT>::lookup_classname", "type": "cpp", "path": "cpp\\regex\\regex_traits\\lookup_classname.html", "desc": "std::regex_traits<CharT>::std::regex_traits<CharT>::lookup_classname"}, {"name": "std::regex_traits<CharT>::std::regex_traits<CharT>::lookup_collatename", "type": "cpp", "path": "cpp\\regex\\regex_traits\\lookup_collatename.html", "desc": "std::regex_traits<CharT>::std::regex_traits<CharT>::lookup_collatename"}, {"name": "std::regex_traits<CharT>::std::regex_traits<CharT>::regex_traits", "type": "cpp", "path": "cpp\\regex\\regex_traits\\regex_traits.html", "desc": "std::regex_traits<CharT>::std::regex_traits<CharT>::regex_traits"}, {"name": "std::regex_traits<CharT>::std::regex_traits<CharT>::transform", "type": "cpp", "path": "cpp\\regex\\regex_traits\\transform.html", "desc": "std::regex_traits<CharT>::std::regex_traits<CharT>::transform"}, {"name": "std::regex_traits<CharT>::std::regex_traits<CharT>::transform_primary", "type": "cpp", "path": "cpp\\regex\\regex_traits\\transform_primary.html", "desc": "std::regex_traits<CharT>::std::regex_traits<CharT>::transform_primary"}, {"name": "std::regex_traits<CharT>::std::regex_traits<CharT>::translate", "type": "cpp", "path": "cpp\\regex\\regex_traits\\translate.html", "desc": "std::regex_traits<CharT>::std::regex_traits<CharT>::translate"}, {"name": "std::regex_traits<CharT>::std::regex_traits<CharT>::translate_nocase", "type": "cpp", "path": "cpp\\regex\\regex_traits\\translate_nocase.html", "desc": "std::regex_traits<CharT>::std::regex_traits<CharT>::translate_nocase"}, {"name": "std::regex_traits<CharT>::std::regex_traits<CharT>::value", "type": "cpp", "path": "cpp\\regex\\regex_traits\\value.html", "desc": "std::regex_traits<CharT>::std::regex_traits<CharT>::value"}, {"name": "std::sub_match<BidirIt>::std::sub_match<BidirIt>::compare", "type": "cpp", "path": "cpp\\regex\\sub_match\\compare.html", "desc": "std::sub_match<BidirIt>::std::sub_match<BidirIt>::compare"}, {"name": "std::sub_match<BidirIt>::std::sub_match<BidirIt>::length", "type": "cpp", "path": "cpp\\regex\\sub_match\\length.html", "desc": "std::sub_match<BidirIt>::std::sub_match<BidirIt>::length"}, {"name": "operator==,!=,<,<=,>,>=,<=>(std::sub_match)", "type": "cpp", "path": "cpp\\regex\\sub_match\\operator_cmp.html", "desc": "operator==,!=,<,<=,>,>=,<=>(std::sub_match)"}, {"name": "(std::sub_match)operator<<(std::sub_match)", "type": "cpp", "path": "cpp\\regex\\sub_match\\operator_ltlt.html", "desc": "(std::sub_match)operator<<(std::sub_match)"}, {"name": "std::sub_match<BidirIt>:: std::sub_match<BidirIt>::std::sub_match<BidirIt>::operator string_type, std::sub_match<BidirIt>::str", "type": "cpp", "path": "cpp\\regex\\sub_match\\str.html", "desc": "std::sub_match<BidirIt>:: std::sub_match<BidirIt>::std::sub_match<BidirIt>::operator string_type, std::sub_match<BidirIt>::str"}, {"name": "std::sub_match<BidirIt>::std::sub_match<BidirIt>::sub_match", "type": "cpp", "path": "cpp\\regex\\sub_match\\sub_match.html", "desc": "std::sub_match<BidirIt>::std::sub_match<BidirIt>::sub_match"}, {"name": "decay-copy", "type": "cpp", "path": "cpp\\standard_library\\decay-copy.html", "desc": "decay-copy"}, {"name": "synth-three-way, synth-three-way-result", "type": "cpp", "path": "cpp\\standard_library\\synth-three-way.html", "desc": "synth-three-way, synth-three-way-result"}, {"name": "std::std::basic_string", "type": "cpp", "path": "cpp\\string\\basic_string.html", "desc": "std::std::basic_string"}, {"name": "std::std::basic_string_view", "type": "cpp", "path": "cpp\\string\\basic_string_view.html", "desc": "std::std::basic_string_view"}, {"name": "\u7a7a\u7ec8\u6b62\u5b57\u8282\u5b57\u7b26\u4e32", "type": "cpp", "path": "cpp\\string\\byte.html", "desc": "\u7a7a\u7ec8\u6b62\u5b57\u8282\u5b57\u7b26\u4e32"}, {"name": "std::std::char_traits", "type": "cpp", "path": "cpp\\string\\char_traits.html", "desc": "std::std::char_traits"}, {"name": "\u7a7a\u7ec8\u6b62\u591a\u5b57\u8282\u5b57\u7b26\u4e32", "type": "cpp", "path": "cpp\\string\\multibyte.html", "desc": "\u7a7a\u7ec8\u6b62\u591a\u5b57\u8282\u5b57\u7b26\u4e32"}, {"name": "\u7a7a\u7ec8\u6b62\u5bbd\u5b57\u7b26\u4e32", "type": "cpp", "path": "cpp\\string\\wide.html", "desc": "\u7a7a\u7ec8\u6b62\u5bbd\u5b57\u7b26\u4e32"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::append", "type": "cpp", "path": "cpp\\string\\basic_string\\append.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::append"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::assign", "type": "cpp", "path": "cpp\\string\\basic_string\\assign.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::assign"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::at", "type": "cpp", "path": "cpp\\string\\basic_string\\at.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::at"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::back", "type": "cpp", "path": "cpp\\string\\basic_string\\back.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::back"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::basic_string", "type": "cpp", "path": "cpp\\string\\basic_string\\basic_string.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::basic_string"}, {"name": "std::basic_string<CharT,Traits,Allocator>:: std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::begin, std::basic_string<CharT,Traits,Allocator>::cbegin", "type": "cpp", "path": "cpp\\string\\basic_string\\begin.html", "desc": "std::basic_string<CharT,Traits,Allocator>:: std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::begin, std::basic_string<CharT,Traits,Allocator>::cbegin"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::capacity", "type": "cpp", "path": "cpp\\string\\basic_string\\capacity.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::capacity"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::clear", "type": "cpp", "path": "cpp\\string\\basic_string\\clear.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::clear"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::compare", "type": "cpp", "path": "cpp\\string\\basic_string\\compare.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::compare"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::contains", "type": "cpp", "path": "cpp\\string\\basic_string\\contains.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::contains"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::copy", "type": "cpp", "path": "cpp\\string\\basic_string\\copy.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::copy"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::c_str", "type": "cpp", "path": "cpp\\string\\basic_string\\c_str.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::c_str"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::data", "type": "cpp", "path": "cpp\\string\\basic_string\\data.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::data"}, {"name": "std::basic_string \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\string\\basic_string\\deduction_guides.html", "desc": "std::basic_string \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::empty", "type": "cpp", "path": "cpp\\string\\basic_string\\empty.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::empty"}, {"name": "std::basic_string<CharT,Traits,Allocator>:: std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::end, std::basic_string<CharT,Traits,Allocator>::cend", "type": "cpp", "path": "cpp\\string\\basic_string\\end.html", "desc": "std::basic_string<CharT,Traits,Allocator>:: std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::end, std::basic_string<CharT,Traits,Allocator>::cend"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::ends_with", "type": "cpp", "path": "cpp\\string\\basic_string\\ends_with.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::ends_with"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::erase", "type": "cpp", "path": "cpp\\string\\basic_string\\erase.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::erase"}, {"name": "std:: std::std::erase, std::erase_if (std::basic_string)", "type": "cpp", "path": "cpp\\string\\basic_string\\erase2.html", "desc": "std:: std::std::erase, std::erase_if (std::basic_string)"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::find", "type": "cpp", "path": "cpp\\string\\basic_string\\find.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::find"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::find_first_not_of", "type": "cpp", "path": "cpp\\string\\basic_string\\find_first_not_of.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::find_first_not_of"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::find_first_of", "type": "cpp", "path": "cpp\\string\\basic_string\\find_first_of.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::find_first_of"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::find_last_not_of", "type": "cpp", "path": "cpp\\string\\basic_string\\find_last_not_of.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::find_last_not_of"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::find_last_of", "type": "cpp", "path": "cpp\\string\\basic_string\\find_last_of.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::find_last_of"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::front", "type": "cpp", "path": "cpp\\string\\basic_string\\front.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::front"}, {"name": "std::std::getline", "type": "cpp", "path": "cpp\\string\\basic_string\\getline.html", "desc": "std::std::getline"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::get_allocator", "type": "cpp", "path": "cpp\\string\\basic_string\\get_allocator.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::get_allocator"}, {"name": "std::std::hash(std::basic_string)", "type": "cpp", "path": "cpp\\string\\basic_string\\hash.html", "desc": "std::std::hash(std::basic_string)"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::insert", "type": "cpp", "path": "cpp\\string\\basic_string\\insert.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::insert"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::max_size", "type": "cpp", "path": "cpp\\string\\basic_string\\max_size.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::max_size"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::npos", "type": "cpp", "path": "cpp\\string\\basic_string\\npos.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::npos"}, {"name": "std::literals::string_literals::std::literals::string_literals::operator\"\"s", "type": "cpp", "path": "cpp\\string\\basic_string\\operator%22%22s.html", "desc": "std::literals::string_literals::std::literals::string_literals::operator\"\"s"}, {"name": "std::std::operator+(std::basic_string)", "type": "cpp", "path": "cpp\\string\\basic_string\\operator+.html", "desc": "std::std::operator+(std::basic_string)"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::operator+=", "type": "cpp", "path": "cpp\\string\\basic_string\\operator+=.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::operator+="}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::operator=", "type": "cpp", "path": "cpp\\string\\basic_string\\operator=.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::operator="}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::operator[]", "type": "cpp", "path": "cpp\\string\\basic_string\\operator_at.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::operator[]"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::operator basic_string_view", "type": "cpp", "path": "cpp\\string\\basic_string\\operator_basic_string_view.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::operator basic_string_view"}, {"name": "operator==,!=,<,<=,>,>=,<=>(std::basic_string)", "type": "cpp", "path": "cpp\\string\\basic_string\\operator_cmp.html", "desc": "operator==,!=,<,<=,>,>=,<=>(std::basic_string)"}, {"name": "(std::basic_string)operator<<,>>(std::basic_string)", "type": "cpp", "path": "cpp\\string\\basic_string\\operator_ltltgtgt.html", "desc": "(std::basic_string)operator<<,>>(std::basic_string)"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::pop_back", "type": "cpp", "path": "cpp\\string\\basic_string\\pop_back.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::pop_back"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::push_back", "type": "cpp", "path": "cpp\\string\\basic_string\\push_back.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::push_back"}, {"name": "std::basic_string<CharT,Traits,Allocator>:: std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::rbegin, std::basic_string<CharT,Traits,Allocator>::crbegin", "type": "cpp", "path": "cpp\\string\\basic_string\\rbegin.html", "desc": "std::basic_string<CharT,Traits,Allocator>:: std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::rbegin, std::basic_string<CharT,Traits,Allocator>::crbegin"}, {"name": "std::basic_string<CharT,Traits,Allocator>:: std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::rend, std::basic_string<CharT,Traits,Allocator>::crend", "type": "cpp", "path": "cpp\\string\\basic_string\\rend.html", "desc": "std::basic_string<CharT,Traits,Allocator>:: std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::rend, std::basic_string<CharT,Traits,Allocator>::crend"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::replace", "type": "cpp", "path": "cpp\\string\\basic_string\\replace.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::replace"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::reserve", "type": "cpp", "path": "cpp\\string\\basic_string\\reserve.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::reserve"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::resize", "type": "cpp", "path": "cpp\\string\\basic_string\\resize.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::resize"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::resize_and_overwrite", "type": "cpp", "path": "cpp\\string\\basic_string\\resize_and_overwrite.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::resize_and_overwrite"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::rfind", "type": "cpp", "path": "cpp\\string\\basic_string\\rfind.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::rfind"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::shrink_to_fit", "type": "cpp", "path": "cpp\\string\\basic_string\\shrink_to_fit.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::shrink_to_fit"}, {"name": "std::basic_string<CharT,Traits,Allocator>:: std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::size, std::basic_string<CharT,Traits,Allocator>::length", "type": "cpp", "path": "cpp\\string\\basic_string\\size.html", "desc": "std::basic_string<CharT,Traits,Allocator>:: std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::size, std::basic_string<CharT,Traits,Allocator>::length"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::starts_with", "type": "cpp", "path": "cpp\\string\\basic_string\\starts_with.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::starts_with"}, {"name": "std:: std:: std::std::stof, std::stod, std::stold", "type": "cpp", "path": "cpp\\string\\basic_string\\stof.html", "desc": "std:: std:: std::std::stof, std::stod, std::stold"}, {"name": "std:: std:: std::std::stoi, std::stol, std::stoll", "type": "cpp", "path": "cpp\\string\\basic_string\\stol.html", "desc": "std:: std:: std::std::stoi, std::stol, std::stoll"}, {"name": "std:: std::std::stoul, std::stoull", "type": "cpp", "path": "cpp\\string\\basic_string\\stoul.html", "desc": "std:: std::std::stoul, std::stoull"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::substr", "type": "cpp", "path": "cpp\\string\\basic_string\\substr.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::substr"}, {"name": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::swap", "type": "cpp", "path": "cpp\\string\\basic_string\\swap.html", "desc": "std::basic_string<CharT,Traits,Allocator>::std::basic_string<CharT,Traits,Allocator>::swap"}, {"name": "std::std::swap(std::basic_string)", "type": "cpp", "path": "cpp\\string\\basic_string\\swap2.html", "desc": "std::std::swap(std::basic_string)"}, {"name": "std::std::to_string", "type": "cpp", "path": "cpp\\string\\basic_string\\to_string.html", "desc": "std::std::to_string"}, {"name": "std::std::to_wstring", "type": "cpp", "path": "cpp\\string\\basic_string\\to_wstring.html", "desc": "std::std::to_wstring"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::at", "type": "cpp", "path": "cpp\\string\\basic_string_view\\at.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::at"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::back", "type": "cpp", "path": "cpp\\string\\basic_string_view\\back.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::back"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::basic_string_view", "type": "cpp", "path": "cpp\\string\\basic_string_view\\basic_string_view.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::basic_string_view"}, {"name": "std::basic_string_view<CharT,Traits>:: std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::begin, std::basic_string_view<CharT,Traits>::cbegin", "type": "cpp", "path": "cpp\\string\\basic_string_view\\begin.html", "desc": "std::basic_string_view<CharT,Traits>:: std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::begin, std::basic_string_view<CharT,Traits>::cbegin"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::compare", "type": "cpp", "path": "cpp\\string\\basic_string_view\\compare.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::compare"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::contains", "type": "cpp", "path": "cpp\\string\\basic_string_view\\contains.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::contains"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::copy", "type": "cpp", "path": "cpp\\string\\basic_string_view\\copy.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::copy"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::data", "type": "cpp", "path": "cpp\\string\\basic_string_view\\data.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::data"}, {"name": "std::basic_string_view \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\string\\basic_string_view\\deduction_guides.html", "desc": "std::basic_string_view \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::empty", "type": "cpp", "path": "cpp\\string\\basic_string_view\\empty.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::empty"}, {"name": "std::basic_string_view<CharT,Traits>:: std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::end, std::basic_string_view<CharT,Traits>::cend", "type": "cpp", "path": "cpp\\string\\basic_string_view\\end.html", "desc": "std::basic_string_view<CharT,Traits>:: std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::end, std::basic_string_view<CharT,Traits>::cend"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::ends_with", "type": "cpp", "path": "cpp\\string\\basic_string_view\\ends_with.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::ends_with"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::find", "type": "cpp", "path": "cpp\\string\\basic_string_view\\find.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::find"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::find_first_not_of", "type": "cpp", "path": "cpp\\string\\basic_string_view\\find_first_not_of.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::find_first_not_of"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::find_first_of", "type": "cpp", "path": "cpp\\string\\basic_string_view\\find_first_of.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::find_first_of"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::find_last_not_of", "type": "cpp", "path": "cpp\\string\\basic_string_view\\find_last_not_of.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::find_last_not_of"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::find_last_of", "type": "cpp", "path": "cpp\\string\\basic_string_view\\find_last_of.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::find_last_of"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::front", "type": "cpp", "path": "cpp\\string\\basic_string_view\\front.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::front"}, {"name": "std::std::hash (std::string_view, std::wstring_view, std::u16string_view, std::u32string_view)", "type": "cpp", "path": "cpp\\string\\basic_string_view\\hash.html", "desc": "std::std::hash (std::string_view, std::wstring_view, std::u16string_view, std::u32string_view)"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::max_size", "type": "cpp", "path": "cpp\\string\\basic_string_view\\max_size.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::max_size"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::npos", "type": "cpp", "path": "cpp\\string\\basic_string_view\\npos.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::npos"}, {"name": "std::literals::string_view_literals::std::literals::string_view_literals::operator\"\"sv", "type": "cpp", "path": "cpp\\string\\basic_string_view\\operator%22%22sv.html", "desc": "std::literals::string_view_literals::std::literals::string_view_literals::operator\"\"sv"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::operator=", "type": "cpp", "path": "cpp\\string\\basic_string_view\\operator=.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::operator="}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::operator[]", "type": "cpp", "path": "cpp\\string\\basic_string_view\\operator_at.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::operator[]"}, {"name": "operator==,!=,<,<=,>,>=,<=>(std::basic_string_view)", "type": "cpp", "path": "cpp\\string\\basic_string_view\\operator_cmp.html", "desc": "operator==,!=,<,<=,>,>=,<=>(std::basic_string_view)"}, {"name": "(std::basic_string_view)operator<<(std::basic_string_view)", "type": "cpp", "path": "cpp\\string\\basic_string_view\\operator_ltlt.html", "desc": "(std::basic_string_view)operator<<(std::basic_string_view)"}, {"name": "std::basic_string_view<CharT,Traits>:: std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::rbegin, std::basic_string_view<CharT,Traits>::crbegin", "type": "cpp", "path": "cpp\\string\\basic_string_view\\rbegin.html", "desc": "std::basic_string_view<CharT,Traits>:: std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::rbegin, std::basic_string_view<CharT,Traits>::crbegin"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::remove_prefix", "type": "cpp", "path": "cpp\\string\\basic_string_view\\remove_prefix.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::remove_prefix"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::remove_suffix", "type": "cpp", "path": "cpp\\string\\basic_string_view\\remove_suffix.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::remove_suffix"}, {"name": "std::basic_string_view<CharT,Traits>:: std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::rend, std::basic_string_view<CharT,Traits>::crend", "type": "cpp", "path": "cpp\\string\\basic_string_view\\rend.html", "desc": "std::basic_string_view<CharT,Traits>:: std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::rend, std::basic_string_view<CharT,Traits>::crend"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::rfind", "type": "cpp", "path": "cpp\\string\\basic_string_view\\rfind.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::rfind"}, {"name": "std::basic_string_view<CharT,Traits>:: std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::size, std::basic_string_view<CharT,Traits>::length", "type": "cpp", "path": "cpp\\string\\basic_string_view\\size.html", "desc": "std::basic_string_view<CharT,Traits>:: std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::size, std::basic_string_view<CharT,Traits>::length"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::starts_with", "type": "cpp", "path": "cpp\\string\\basic_string_view\\starts_with.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::starts_with"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::substr", "type": "cpp", "path": "cpp\\string\\basic_string_view\\substr.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::substr"}, {"name": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::swap", "type": "cpp", "path": "cpp\\string\\basic_string_view\\swap.html", "desc": "std::basic_string_view<CharT,Traits>::std::basic_string_view<CharT,Traits>::swap"}, {"name": "std::std::atof", "type": "cpp", "path": "cpp\\string\\byte\\atof.html", "desc": "std::std::atof"}, {"name": "std:: std:: std::std::atoi, std::atol, std::atoll", "type": "cpp", "path": "cpp\\string\\byte\\atoi.html", "desc": "std:: std:: std::std::atoi, std::atol, std::atoll"}, {"name": "std::std::isalnum", "type": "cpp", "path": "cpp\\string\\byte\\isalnum.html", "desc": "std::std::isalnum"}, {"name": "std::std::isalpha", "type": "cpp", "path": "cpp\\string\\byte\\isalpha.html", "desc": "std::std::isalpha"}, {"name": "std::std::isblank", "type": "cpp", "path": "cpp\\string\\byte\\isblank.html", "desc": "std::std::isblank"}, {"name": "std::std::iscntrl", "type": "cpp", "path": "cpp\\string\\byte\\iscntrl.html", "desc": "std::std::iscntrl"}, {"name": "std::std::isdigit", "type": "cpp", "path": "cpp\\string\\byte\\isdigit.html", "desc": "std::std::isdigit"}, {"name": "std::std::isgraph", "type": "cpp", "path": "cpp\\string\\byte\\isgraph.html", "desc": "std::std::isgraph"}, {"name": "std::std::islower", "type": "cpp", "path": "cpp\\string\\byte\\islower.html", "desc": "std::std::islower"}, {"name": "std::std::isprint", "type": "cpp", "path": "cpp\\string\\byte\\isprint.html", "desc": "std::std::isprint"}, {"name": "std::std::ispunct", "type": "cpp", "path": "cpp\\string\\byte\\ispunct.html", "desc": "std::std::ispunct"}, {"name": "std::std::isspace", "type": "cpp", "path": "cpp\\string\\byte\\isspace.html", "desc": "std::std::isspace"}, {"name": "std::std::isupper", "type": "cpp", "path": "cpp\\string\\byte\\isupper.html", "desc": "std::std::isupper"}, {"name": "std::std::isxdigit", "type": "cpp", "path": "cpp\\string\\byte\\isxdigit.html", "desc": "std::std::isxdigit"}, {"name": "std::std::memchr", "type": "cpp", "path": "cpp\\string\\byte\\memchr.html", "desc": "std::std::memchr"}, {"name": "std::std::memcmp", "type": "cpp", "path": "cpp\\string\\byte\\memcmp.html", "desc": "std::std::memcmp"}, {"name": "std::std::memcpy", "type": "cpp", "path": "cpp\\string\\byte\\memcpy.html", "desc": "std::std::memcpy"}, {"name": "std::std::memmove", "type": "cpp", "path": "cpp\\string\\byte\\memmove.html", "desc": "std::std::memmove"}, {"name": "std::std::memset", "type": "cpp", "path": "cpp\\string\\byte\\memset.html", "desc": "std::std::memset"}, {"name": "std::std::strcat", "type": "cpp", "path": "cpp\\string\\byte\\strcat.html", "desc": "std::std::strcat"}, {"name": "std::std::strchr", "type": "cpp", "path": "cpp\\string\\byte\\strchr.html", "desc": "std::std::strchr"}, {"name": "std::std::strcmp", "type": "cpp", "path": "cpp\\string\\byte\\strcmp.html", "desc": "std::std::strcmp"}, {"name": "std::std::strcoll", "type": "cpp", "path": "cpp\\string\\byte\\strcoll.html", "desc": "std::std::strcoll"}, {"name": "std::std::strcpy", "type": "cpp", "path": "cpp\\string\\byte\\strcpy.html", "desc": "std::std::strcpy"}, {"name": "std::std::strcspn", "type": "cpp", "path": "cpp\\string\\byte\\strcspn.html", "desc": "std::std::strcspn"}, {"name": "std::std::strerror", "type": "cpp", "path": "cpp\\string\\byte\\strerror.html", "desc": "std::std::strerror"}, {"name": "std::std::strlen", "type": "cpp", "path": "cpp\\string\\byte\\strlen.html", "desc": "std::std::strlen"}, {"name": "std::std::strncat", "type": "cpp", "path": "cpp\\string\\byte\\strncat.html", "desc": "std::std::strncat"}, {"name": "std::std::strncmp", "type": "cpp", "path": "cpp\\string\\byte\\strncmp.html", "desc": "std::std::strncmp"}, {"name": "std::std::strncpy", "type": "cpp", "path": "cpp\\string\\byte\\strncpy.html", "desc": "std::std::strncpy"}, {"name": "std::std::strpbrk", "type": "cpp", "path": "cpp\\string\\byte\\strpbrk.html", "desc": "std::std::strpbrk"}, {"name": "std::std::strrchr", "type": "cpp", "path": "cpp\\string\\byte\\strrchr.html", "desc": "std::std::strrchr"}, {"name": "std::std::strspn", "type": "cpp", "path": "cpp\\string\\byte\\strspn.html", "desc": "std::std::strspn"}, {"name": "std::std::strstr", "type": "cpp", "path": "cpp\\string\\byte\\strstr.html", "desc": "std::std::strstr"}, {"name": "std:: std:: std::std::strtof, std::strtod, std::strtold", "type": "cpp", "path": "cpp\\string\\byte\\strtof.html", "desc": "std:: std:: std::std::strtof, std::strtod, std::strtold"}, {"name": "std:: std::std::strtoimax, std::strtoumax", "type": "cpp", "path": "cpp\\string\\byte\\strtoimax.html", "desc": "std:: std::std::strtoimax, std::strtoumax"}, {"name": "std::std::strtok", "type": "cpp", "path": "cpp\\string\\byte\\strtok.html", "desc": "std::std::strtok"}, {"name": "std:: std::std::strtol, std::strtoll", "type": "cpp", "path": "cpp\\string\\byte\\strtol.html", "desc": "std:: std::std::strtol, std::strtoll"}, {"name": "std:: std::std::strtoul, std::strtoull", "type": "cpp", "path": "cpp\\string\\byte\\strtoul.html", "desc": "std:: std::std::strtoul, std::strtoull"}, {"name": "std::std::strxfrm", "type": "cpp", "path": "cpp\\string\\byte\\strxfrm.html", "desc": "std::std::strxfrm"}, {"name": "std::std::tolower", "type": "cpp", "path": "cpp\\string\\byte\\tolower.html", "desc": "std::std::tolower"}, {"name": "std::std::toupper", "type": "cpp", "path": "cpp\\string\\byte\\toupper.html", "desc": "std::std::toupper"}, {"name": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::assign, std::char_traits<wchar_t>::assign, std::char_traits<char8_t>::assign, std::char_traits<char16_t>::assign, std::char_traits<char32_t>::assign", "type": "cpp", "path": "cpp\\string\\char_traits\\assign.html", "desc": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::assign, std::char_traits<wchar_t>::assign, std::char_traits<char8_t>::assign, std::char_traits<char16_t>::assign, std::char_traits<char32_t>::assign"}, {"name": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::eq/lt, std::char_traits<wchar_t>::eq/lt, std::char_traits<char8_t>::eq/lt, std::char_traits<char16_t>::eq/lt, std::char_traits<char32_t>::eq/lt", "type": "cpp", "path": "cpp\\string\\char_traits\\cmp.html", "desc": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::eq/lt, std::char_traits<wchar_t>::eq/lt, std::char_traits<char8_t>::eq/lt, std::char_traits<char16_t>::eq/lt, std::char_traits<char32_t>::eq/lt"}, {"name": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::compare, std::char_traits<wchar_t>::compare, std::char_traits<char8_t>::compare, std::char_traits<char16_t>::compare, std::char_traits<char32_t>::compare", "type": "cpp", "path": "cpp\\string\\char_traits\\compare.html", "desc": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::compare, std::char_traits<wchar_t>::compare, std::char_traits<char8_t>::compare, std::char_traits<char16_t>::compare, std::char_traits<char32_t>::compare"}, {"name": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::copy, std::char_traits<wchar_t>::copy, std::char_traits<char8_t>::copy, std::char_traits<char16_t>::copy, std::char_traits<char32_t>::copy", "type": "cpp", "path": "cpp\\string\\char_traits\\copy.html", "desc": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::copy, std::char_traits<wchar_t>::copy, std::char_traits<char8_t>::copy, std::char_traits<char16_t>::copy, std::char_traits<char32_t>::copy"}, {"name": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::eof, std::char_traits<wchar_t>::eof, std::char_traits<char8_t>::eof, std::char_traits<char16_t>::eof, std::char_traits<char32_t>::eof", "type": "cpp", "path": "cpp\\string\\char_traits\\eof.html", "desc": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::eof, std::char_traits<wchar_t>::eof, std::char_traits<char8_t>::eof, std::char_traits<char16_t>::eof, std::char_traits<char32_t>::eof"}, {"name": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::eq_int_type, std::char_traits<wchar_t>::eq_int_type, std::char_traits<char8_t>::eq_int_type, std::char_traits<char16_t>::eq_int_type, std::char_traits<char32_t>::eq_int_type", "type": "cpp", "path": "cpp\\string\\char_traits\\eq_int_type.html", "desc": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::eq_int_type, std::char_traits<wchar_t>::eq_int_type, std::char_traits<char8_t>::eq_int_type, std::char_traits<char16_t>::eq_int_type, std::char_traits<char32_t>::eq_int_type"}, {"name": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::find, std::char_traits<wchar_t>::find, std::char_traits<char8_t>::find, std::char_traits<char16_t>::find, std::char_traits<char32_t>::find", "type": "cpp", "path": "cpp\\string\\char_traits\\find.html", "desc": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::find, std::char_traits<wchar_t>::find, std::char_traits<char8_t>::find, std::char_traits<char16_t>::find, std::char_traits<char32_t>::find"}, {"name": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::length, std::char_traits<wchar_t>::length, std::char_traits<char8_t>::length, std::char_traits<char16_t>::length, std::char_traits<char32_t>::length", "type": "cpp", "path": "cpp\\string\\char_traits\\length.html", "desc": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::length, std::char_traits<wchar_t>::length, std::char_traits<char8_t>::length, std::char_traits<char16_t>::length, std::char_traits<char32_t>::length"}, {"name": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::move, std::char_traits<wchar_t>::move, std::char_traits<char8_t>::move, std::char_traits<char16_t>::move, std::char_traits<char32_t>::move", "type": "cpp", "path": "cpp\\string\\char_traits\\move.html", "desc": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::move, std::char_traits<wchar_t>::move, std::char_traits<char8_t>::move, std::char_traits<char16_t>::move, std::char_traits<char32_t>::move"}, {"name": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::not_eof, std::char_traits<wchar_t>::not_eof, std::char_traits<char8_t>::not_eof, std::char_traits<char16_t>::not_eof, std::char_traits<char32_t>::not_eof", "type": "cpp", "path": "cpp\\string\\char_traits\\not_eof.html", "desc": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::not_eof, std::char_traits<wchar_t>::not_eof, std::char_traits<char8_t>::not_eof, std::char_traits<char16_t>::not_eof, std::char_traits<char32_t>::not_eof"}, {"name": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::to_char_type, std::char_traits<wchar_t>::to_char_type, std::char_traits<char8_t>::to_char_type, std::char_traits<char16_t>::to_char_type, std::char_traits<char32_t>::to_char_type", "type": "cpp", "path": "cpp\\string\\char_traits\\to_char_type.html", "desc": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::to_char_type, std::char_traits<wchar_t>::to_char_type, std::char_traits<char8_t>::to_char_type, std::char_traits<char16_t>::to_char_type, std::char_traits<char32_t>::to_char_type"}, {"name": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::to_int_type, std::char_traits<wchar_t>::to_int_type, std::char_traits<char8_t>::to_int_type, std::char_traits<char16_t>::to_int_type, std::char_traits<char32_t>::to_int_type", "type": "cpp", "path": "cpp\\string\\char_traits\\to_int_type.html", "desc": "std::char_traits<char>:: std::char_traits<wchar_t>:: std::char_traits<char8_t>:: std::char_traits<char16_t>:: std::char_traits<char32_t>::std::char_traits<char>::to_int_type, std::char_traits<wchar_t>::to_int_type, std::char_traits<char8_t>::to_int_type, std::char_traits<char16_t>::to_int_type, std::char_traits<char32_t>::to_int_type"}, {"name": "std::std::btowc", "type": "cpp", "path": "cpp\\string\\multibyte\\btowc.html", "desc": "std::std::btowc"}, {"name": "std::std::c16rtomb", "type": "cpp", "path": "cpp\\string\\multibyte\\c16rtomb.html", "desc": "std::std::c16rtomb"}, {"name": "std::std::c32rtomb", "type": "cpp", "path": "cpp\\string\\multibyte\\c32rtomb.html", "desc": "std::std::c32rtomb"}, {"name": "std::std::c8rtomb", "type": "cpp", "path": "cpp\\string\\multibyte\\c8rtomb.html", "desc": "std::std::c8rtomb"}, {"name": "std::std::mblen", "type": "cpp", "path": "cpp\\string\\multibyte\\mblen.html", "desc": "std::std::mblen"}, {"name": "std::std::mbrlen", "type": "cpp", "path": "cpp\\string\\multibyte\\mbrlen.html", "desc": "std::std::mbrlen"}, {"name": "std::std::mbrtoc16", "type": "cpp", "path": "cpp\\string\\multibyte\\mbrtoc16.html", "desc": "std::std::mbrtoc16"}, {"name": "std::std::mbrtoc32", "type": "cpp", "path": "cpp\\string\\multibyte\\mbrtoc32.html", "desc": "std::std::mbrtoc32"}, {"name": "std::std::mbrtoc8", "type": "cpp", "path": "cpp\\string\\multibyte\\mbrtoc8.html", "desc": "std::std::mbrtoc8"}, {"name": "std::std::mbrtowc", "type": "cpp", "path": "cpp\\string\\multibyte\\mbrtowc.html", "desc": "std::std::mbrtowc"}, {"name": "std::std::mbsinit", "type": "cpp", "path": "cpp\\string\\multibyte\\mbsinit.html", "desc": "std::std::mbsinit"}, {"name": "std::std::mbsrtowcs", "type": "cpp", "path": "cpp\\string\\multibyte\\mbsrtowcs.html", "desc": "std::std::mbsrtowcs"}, {"name": "std::std::mbstate_t", "type": "cpp", "path": "cpp\\string\\multibyte\\mbstate_t.html", "desc": "std::std::mbstate_t"}, {"name": "std::std::mbstowcs", "type": "cpp", "path": "cpp\\string\\multibyte\\mbstowcs.html", "desc": "std::std::mbstowcs"}, {"name": "std::std::mbtowc", "type": "cpp", "path": "cpp\\string\\multibyte\\mbtowc.html", "desc": "std::std::mbtowc"}, {"name": "std::std::wcrtomb", "type": "cpp", "path": "cpp\\string\\multibyte\\wcrtomb.html", "desc": "std::std::wcrtomb"}, {"name": "std::std::wcsrtombs", "type": "cpp", "path": "cpp\\string\\multibyte\\wcsrtombs.html", "desc": "std::std::wcsrtombs"}, {"name": "std::std::wcstombs", "type": "cpp", "path": "cpp\\string\\multibyte\\wcstombs.html", "desc": "std::std::wcstombs"}, {"name": "std::std::wctob", "type": "cpp", "path": "cpp\\string\\multibyte\\wctob.html", "desc": "std::std::wctob"}, {"name": "std::std::wctomb", "type": "cpp", "path": "cpp\\string\\multibyte\\wctomb.html", "desc": "std::std::wctomb"}, {"name": "std::std::iswalnum", "type": "cpp", "path": "cpp\\string\\wide\\iswalnum.html", "desc": "std::std::iswalnum"}, {"name": "std::std::iswalpha", "type": "cpp", "path": "cpp\\string\\wide\\iswalpha.html", "desc": "std::std::iswalpha"}, {"name": "std::std::iswblank", "type": "cpp", "path": "cpp\\string\\wide\\iswblank.html", "desc": "std::std::iswblank"}, {"name": "std::std::iswcntrl", "type": "cpp", "path": "cpp\\string\\wide\\iswcntrl.html", "desc": "std::std::iswcntrl"}, {"name": "std::std::iswctype", "type": "cpp", "path": "cpp\\string\\wide\\iswctype.html", "desc": "std::std::iswctype"}, {"name": "std::std::iswdigit", "type": "cpp", "path": "cpp\\string\\wide\\iswdigit.html", "desc": "std::std::iswdigit"}, {"name": "std::std::iswgraph", "type": "cpp", "path": "cpp\\string\\wide\\iswgraph.html", "desc": "std::std::iswgraph"}, {"name": "std::std::iswlower", "type": "cpp", "path": "cpp\\string\\wide\\iswlower.html", "desc": "std::std::iswlower"}, {"name": "std::std::iswprint", "type": "cpp", "path": "cpp\\string\\wide\\iswprint.html", "desc": "std::std::iswprint"}, {"name": "std::std::iswpunct", "type": "cpp", "path": "cpp\\string\\wide\\iswpunct.html", "desc": "std::std::iswpunct"}, {"name": "std::std::iswspace", "type": "cpp", "path": "cpp\\string\\wide\\iswspace.html", "desc": "std::std::iswspace"}, {"name": "std::std::iswupper", "type": "cpp", "path": "cpp\\string\\wide\\iswupper.html", "desc": "std::std::iswupper"}, {"name": "std::std::iswxdigit", "type": "cpp", "path": "cpp\\string\\wide\\iswxdigit.html", "desc": "std::std::iswxdigit"}, {"name": "std::std::towctrans", "type": "cpp", "path": "cpp\\string\\wide\\towctrans.html", "desc": "std::std::towctrans"}, {"name": "std::std::towlower", "type": "cpp", "path": "cpp\\string\\wide\\towlower.html", "desc": "std::std::towlower"}, {"name": "std::std::towupper", "type": "cpp", "path": "cpp\\string\\wide\\towupper.html", "desc": "std::std::towupper"}, {"name": "std::std::wcscat", "type": "cpp", "path": "cpp\\string\\wide\\wcscat.html", "desc": "std::std::wcscat"}, {"name": "std::std::wcschr", "type": "cpp", "path": "cpp\\string\\wide\\wcschr.html", "desc": "std::std::wcschr"}, {"name": "std::std::wcscmp", "type": "cpp", "path": "cpp\\string\\wide\\wcscmp.html", "desc": "std::std::wcscmp"}, {"name": "std::std::wcscoll", "type": "cpp", "path": "cpp\\string\\wide\\wcscoll.html", "desc": "std::std::wcscoll"}, {"name": "std::std::wcscpy", "type": "cpp", "path": "cpp\\string\\wide\\wcscpy.html", "desc": "std::std::wcscpy"}, {"name": "std::std::wcscspn", "type": "cpp", "path": "cpp\\string\\wide\\wcscspn.html", "desc": "std::std::wcscspn"}, {"name": "std::std::wcslen", "type": "cpp", "path": "cpp\\string\\wide\\wcslen.html", "desc": "std::std::wcslen"}, {"name": "std::std::wcsncat", "type": "cpp", "path": "cpp\\string\\wide\\wcsncat.html", "desc": "std::std::wcsncat"}, {"name": "std::std::wcsncmp", "type": "cpp", "path": "cpp\\string\\wide\\wcsncmp.html", "desc": "std::std::wcsncmp"}, {"name": "std::std::wcsncpy", "type": "cpp", "path": "cpp\\string\\wide\\wcsncpy.html", "desc": "std::std::wcsncpy"}, {"name": "std::std::wcspbrk", "type": "cpp", "path": "cpp\\string\\wide\\wcspbrk.html", "desc": "std::std::wcspbrk"}, {"name": "std::std::wcsrchr", "type": "cpp", "path": "cpp\\string\\wide\\wcsrchr.html", "desc": "std::std::wcsrchr"}, {"name": "std::std::wcsspn", "type": "cpp", "path": "cpp\\string\\wide\\wcsspn.html", "desc": "std::std::wcsspn"}, {"name": "std::std::wcsstr", "type": "cpp", "path": "cpp\\string\\wide\\wcsstr.html", "desc": "std::std::wcsstr"}, {"name": "std:: std:: std::std::wcstof, std::wcstod, std::wcstold", "type": "cpp", "path": "cpp\\string\\wide\\wcstof.html", "desc": "std:: std:: std::std::wcstof, std::wcstod, std::wcstold"}, {"name": "std:: std::std::wcstoimax, std::wcstoumax", "type": "cpp", "path": "cpp\\string\\wide\\wcstoimax.html", "desc": "std:: std::std::wcstoimax, std::wcstoumax"}, {"name": "std::std::wcstok", "type": "cpp", "path": "cpp\\string\\wide\\wcstok.html", "desc": "std::std::wcstok"}, {"name": "std:: std::std::wcstol, std::wcstoll", "type": "cpp", "path": "cpp\\string\\wide\\wcstol.html", "desc": "std:: std::std::wcstol, std::wcstoll"}, {"name": "std:: std::std::wcstoul, std::wcstoull", "type": "cpp", "path": "cpp\\string\\wide\\wcstoul.html", "desc": "std:: std::std::wcstoul, std::wcstoull"}, {"name": "std::std::wcsxfrm", "type": "cpp", "path": "cpp\\string\\wide\\wcsxfrm.html", "desc": "std::std::wcsxfrm"}, {"name": "std::std::wctrans", "type": "cpp", "path": "cpp\\string\\wide\\wctrans.html", "desc": "std::std::wctrans"}, {"name": "std::std::wctype", "type": "cpp", "path": "cpp\\string\\wide\\wctype.html", "desc": "std::std::wctype"}, {"name": "std::std::wmemchr", "type": "cpp", "path": "cpp\\string\\wide\\wmemchr.html", "desc": "std::std::wmemchr"}, {"name": "std::std::wmemcmp", "type": "cpp", "path": "cpp\\string\\wide\\wmemcmp.html", "desc": "std::std::wmemcmp"}, {"name": "std::std::wmemcpy", "type": "cpp", "path": "cpp\\string\\wide\\wmemcpy.html", "desc": "std::std::wmemcpy"}, {"name": "std::std::wmemmove", "type": "cpp", "path": "cpp\\string\\wide\\wmemmove.html", "desc": "std::std::wmemmove"}, {"name": "std::std::wmemset", "type": "cpp", "path": "cpp\\string\\wide\\wmemset.html", "desc": "std::std::wmemset"}, {"name": "std::chrono \u7b26\u53f7\u7d22\u5f15", "type": "cpp", "path": "cpp\\symbol_index\\chrono.html", "desc": "std::chrono \u7b26\u53f7\u7d22\u5f15"}, {"name": "std::literals::chrono_literals \u7b26\u53f7\u7d22\u5f15", "type": "cpp", "path": "cpp\\symbol_index\\chrono_literals.html", "desc": "std::literals::chrono_literals \u7b26\u53f7\u7d22\u5f15"}, {"name": "std::literals::complex_literals \u7b26\u53f7\u7d22\u5f15", "type": "cpp", "path": "cpp\\symbol_index\\complex_literals.html", "desc": "std::literals::complex_literals \u7b26\u53f7\u7d22\u5f15"}, {"name": "std::execution \u7b26\u53f7\u7d22\u5f15", "type": "cpp", "path": "cpp\\symbol_index\\execution.html", "desc": "std::execution \u7b26\u53f7\u7d22\u5f15"}, {"name": "std::filesystem \u7b26\u53f7\u7d22\u5f15", "type": "cpp", "path": "cpp\\symbol_index\\filesystem.html", "desc": "std::filesystem \u7b26\u53f7\u7d22\u5f15"}, {"name": "std::literals \u7b26\u53f7\u7d22\u5f15", "type": "cpp", "path": "cpp\\symbol_index\\literals.html", "desc": "std::literals \u7b26\u53f7\u7d22\u5f15"}, {"name": "\u5b8f\u7b26\u53f7\u7d22\u5f15", "type": "cpp", "path": "cpp\\symbol_index\\macro.html", "desc": "\u5b8f\u7b26\u53f7\u7d22\u5f15"}, {"name": "std::numbers \u7b26\u53f7\u7d22\u5f15", "type": "cpp", "path": "cpp\\symbol_index\\numbers.html", "desc": "std::numbers \u7b26\u53f7\u7d22\u5f15"}, {"name": "std::placeholders \u7b26\u53f7\u7d22\u5f15", "type": "cpp", "path": "cpp\\symbol_index\\placeholders.html", "desc": "std::placeholders \u7b26\u53f7\u7d22\u5f15"}, {"name": "std::pmr \u7b26\u53f7\u7d22\u5f15", "type": "cpp", "path": "cpp\\symbol_index\\pmr.html", "desc": "std::pmr \u7b26\u53f7\u7d22\u5f15"}, {"name": "std::ranges \u7b26\u53f7\u7d22\u5f15", "type": "cpp", "path": "cpp\\symbol_index\\ranges.html", "desc": "std::ranges \u7b26\u53f7\u7d22\u5f15"}, {"name": "std::regex_constants \u7b26\u53f7\u7d22\u5f15", "type": "cpp", "path": "cpp\\symbol_index\\regex_constants.html", "desc": "std::regex_constants \u7b26\u53f7\u7d22\u5f15"}, {"name": "std::rel_ops \u7b26\u53f7\u7d22\u5f15", "type": "cpp", "path": "cpp\\symbol_index\\rel_ops.html", "desc": "std::rel_ops \u7b26\u53f7\u7d22\u5f15"}, {"name": "std::literals::string_literals \u7b26\u53f7\u7d22\u5f15", "type": "cpp", "path": "cpp\\symbol_index\\string_literals.html", "desc": "std::literals::string_literals \u7b26\u53f7\u7d22\u5f15"}, {"name": "std::literals::string_view_literals \u7b26\u53f7\u7d22\u5f15", "type": "cpp", "path": "cpp\\symbol_index\\string_view_literals.html", "desc": "std::literals::string_view_literals \u7b26\u53f7\u7d22\u5f15"}, {"name": "std::this_thread \u7b26\u53f7\u7d22\u5f15", "type": "cpp", "path": "cpp\\symbol_index\\this_thread.html", "desc": "std::this_thread \u7b26\u53f7\u7d22\u5f15"}, {"name": "std::ranges::views \u7b26\u53f7\u7d22\u5f15", "type": "cpp", "path": "cpp\\symbol_index\\views.html", "desc": "std::ranges::views \u7b26\u53f7\u7d22\u5f15"}, {"name": "\u7b26\u53f7\u7d22\u5f15\uff08\u88ab\u79fb\u9664\uff09", "type": "cpp", "path": "cpp\\symbol_index\\zombie_names.html", "desc": "\u7b26\u53f7\u7d22\u5f15\uff08\u88ab\u79fb\u9664\uff09"}, {"name": "std::std::async", "type": "cpp", "path": "cpp\\thread\\async.html", "desc": "std::std::async"}, {"name": "std::std::barrier", "type": "cpp", "path": "cpp\\thread\\barrier.html", "desc": "std::std::barrier"}, {"name": "std::std::call_once", "type": "cpp", "path": "cpp\\thread\\call_once.html", "desc": "std::std::call_once"}, {"name": "std::std::condition_variable", "type": "cpp", "path": "cpp\\thread\\condition_variable.html", "desc": "std::std::condition_variable"}, {"name": "std::std::condition_variable_any", "type": "cpp", "path": "cpp\\thread\\condition_variable_any.html", "desc": "std::std::condition_variable_any"}, {"name": "std:: std::std::counting_semaphore, std::binary_semaphore", "type": "cpp", "path": "cpp\\thread\\counting_semaphore.html", "desc": "std:: std::std::counting_semaphore, std::binary_semaphore"}, {"name": "std::std::cv_status", "type": "cpp", "path": "cpp\\thread\\cv_status.html", "desc": "std::std::cv_status"}, {"name": "std::std::future", "type": "cpp", "path": "cpp\\thread\\future.html", "desc": "std::std::future"}, {"name": "std::std::future_category", "type": "cpp", "path": "cpp\\thread\\future_category.html", "desc": "std::std::future_category"}, {"name": "std::std::future_errc", "type": "cpp", "path": "cpp\\thread\\future_errc.html", "desc": "std::std::future_errc"}, {"name": "std::std::future_error", "type": "cpp", "path": "cpp\\thread\\future_error.html", "desc": "std::std::future_error"}, {"name": "std::std::future_status", "type": "cpp", "path": "cpp\\thread\\future_status.html", "desc": "std::std::future_status"}, {"name": "std::this_thread::std::this_thread::get_id", "type": "cpp", "path": "cpp\\thread\\get_id.html", "desc": "std::this_thread::std::this_thread::get_id"}, {"name": "std:: std::std::hardware_destructive_interference_size, std::hardware_constructive_interference_size", "type": "cpp", "path": "cpp\\thread\\hardware_destructive_interference_size.html", "desc": "std:: std::std::hardware_destructive_interference_size, std::hardware_constructive_interference_size"}, {"name": "std::std::jthread", "type": "cpp", "path": "cpp\\thread\\jthread.html", "desc": "std::std::jthread"}, {"name": "std::std::latch", "type": "cpp", "path": "cpp\\thread\\latch.html", "desc": "std::std::latch"}, {"name": "std::std::launch", "type": "cpp", "path": "cpp\\thread\\launch.html", "desc": "std::std::launch"}, {"name": "std::std::lock", "type": "cpp", "path": "cpp\\thread\\lock.html", "desc": "std::std::lock"}, {"name": "std::std::lock_guard", "type": "cpp", "path": "cpp\\thread\\lock_guard.html", "desc": "std::std::lock_guard"}, {"name": "std:: std:: std::std::defer_lock, std::try_to_lock, std::adopt_lock", "type": "cpp", "path": "cpp\\thread\\lock_tag.html", "desc": "std:: std:: std::std::defer_lock, std::try_to_lock, std::adopt_lock"}, {"name": "std:: std:: std::std::defer_lock_t, std::try_to_lock_t, std::adopt_lock_t", "type": "cpp", "path": "cpp\\thread\\lock_tag_t.html", "desc": "std:: std:: std::std::defer_lock_t, std::try_to_lock_t, std::adopt_lock_t"}, {"name": "std::std::mutex", "type": "cpp", "path": "cpp\\thread\\mutex.html", "desc": "std::std::mutex"}, {"name": "std::std::notify_all_at_thread_exit", "type": "cpp", "path": "cpp\\thread\\notify_all_at_thread_exit.html", "desc": "std::std::notify_all_at_thread_exit"}, {"name": "std::std::once_flag", "type": "cpp", "path": "cpp\\thread\\once_flag.html", "desc": "std::std::once_flag"}, {"name": "std::std::packaged_task", "type": "cpp", "path": "cpp\\thread\\packaged_task.html", "desc": "std::std::packaged_task"}, {"name": "std::std::promise", "type": "cpp", "path": "cpp\\thread\\promise.html", "desc": "std::std::promise"}, {"name": "std::std::recursive_mutex", "type": "cpp", "path": "cpp\\thread\\recursive_mutex.html", "desc": "std::std::recursive_mutex"}, {"name": "std::std::recursive_timed_mutex", "type": "cpp", "path": "cpp\\thread\\recursive_timed_mutex.html", "desc": "std::std::recursive_timed_mutex"}, {"name": "std::std::scoped_lock", "type": "cpp", "path": "cpp\\thread\\scoped_lock.html", "desc": "std::std::scoped_lock"}, {"name": "std::std::shared_future", "type": "cpp", "path": "cpp\\thread\\shared_future.html", "desc": "std::std::shared_future"}, {"name": "std::std::shared_lock", "type": "cpp", "path": "cpp\\thread\\shared_lock.html", "desc": "std::std::shared_lock"}, {"name": "std::std::shared_mutex", "type": "cpp", "path": "cpp\\thread\\shared_mutex.html", "desc": "std::std::shared_mutex"}, {"name": "std::std::shared_timed_mutex", "type": "cpp", "path": "cpp\\thread\\shared_timed_mutex.html", "desc": "std::std::shared_timed_mutex"}, {"name": "std::this_thread::std::this_thread::sleep_for", "type": "cpp", "path": "cpp\\thread\\sleep_for.html", "desc": "std::this_thread::std::this_thread::sleep_for"}, {"name": "std::this_thread::std::this_thread::sleep_until", "type": "cpp", "path": "cpp\\thread\\sleep_until.html", "desc": "std::this_thread::std::this_thread::sleep_until"}, {"name": "std::std::stop_callback", "type": "cpp", "path": "cpp\\thread\\stop_callback.html", "desc": "std::std::stop_callback"}, {"name": "std::std::stop_source", "type": "cpp", "path": "cpp\\thread\\stop_source.html", "desc": "std::std::stop_source"}, {"name": "std::std::stop_token", "type": "cpp", "path": "cpp\\thread\\stop_token.html", "desc": "std::std::stop_token"}, {"name": "std::std::thread", "type": "cpp", "path": "cpp\\thread\\thread.html", "desc": "std::std::thread"}, {"name": "std::std::timed_mutex", "type": "cpp", "path": "cpp\\thread\\timed_mutex.html", "desc": "std::std::timed_mutex"}, {"name": "std::std::try_lock", "type": "cpp", "path": "cpp\\thread\\try_lock.html", "desc": "std::std::try_lock"}, {"name": "std::std::unique_lock", "type": "cpp", "path": "cpp\\thread\\unique_lock.html", "desc": "std::std::unique_lock"}, {"name": "std::this_thread::std::this_thread::yield", "type": "cpp", "path": "cpp\\thread\\yield.html", "desc": "std::this_thread::std::this_thread::yield"}, {"name": "std::barrier<CompletionFunction>::std::barrier<CompletionFunction>::arrive", "type": "cpp", "path": "cpp\\thread\\barrier\\arrive.html", "desc": "std::barrier<CompletionFunction>::std::barrier<CompletionFunction>::arrive"}, {"name": "std::barrier<CompletionFunction>::std::barrier<CompletionFunction>::arrive_and_drop", "type": "cpp", "path": "cpp\\thread\\barrier\\arrive_and_drop.html", "desc": "std::barrier<CompletionFunction>::std::barrier<CompletionFunction>::arrive_and_drop"}, {"name": "std::barrier<CompletionFunction>::std::barrier<CompletionFunction>::arrive_and_wait", "type": "cpp", "path": "cpp\\thread\\barrier\\arrive_and_wait.html", "desc": "std::barrier<CompletionFunction>::std::barrier<CompletionFunction>::arrive_and_wait"}, {"name": "std::barrier<CompletionFunction>::std::barrier<CompletionFunction>::barrier", "type": "cpp", "path": "cpp\\thread\\barrier\\barrier.html", "desc": "std::barrier<CompletionFunction>::std::barrier<CompletionFunction>::barrier"}, {"name": "std::barrier<CompletionFunction>::std::barrier<CompletionFunction>::max", "type": "cpp", "path": "cpp\\thread\\barrier\\max.html", "desc": "std::barrier<CompletionFunction>::std::barrier<CompletionFunction>::max"}, {"name": "std::barrier<CompletionFunction>::std::barrier<CompletionFunction>::wait", "type": "cpp", "path": "cpp\\thread\\barrier\\wait.html", "desc": "std::barrier<CompletionFunction>::std::barrier<CompletionFunction>::wait"}, {"name": "std::barrier<CompletionFunction>::std::barrier<CompletionFunction>::~barrier", "type": "cpp", "path": "cpp\\thread\\barrier\\~barrier.html", "desc": "std::barrier<CompletionFunction>::std::barrier<CompletionFunction>::~barrier"}, {"name": "std::condition_variable::std::condition_variable::condition_variable", "type": "cpp", "path": "cpp\\thread\\condition_variable\\condition_variable.html", "desc": "std::condition_variable::std::condition_variable::condition_variable"}, {"name": "std::condition_variable::std::condition_variable::native_handle", "type": "cpp", "path": "cpp\\thread\\condition_variable\\native_handle.html", "desc": "std::condition_variable::std::condition_variable::native_handle"}, {"name": "std::condition_variable::std::condition_variable::notify_all", "type": "cpp", "path": "cpp\\thread\\condition_variable\\notify_all.html", "desc": "std::condition_variable::std::condition_variable::notify_all"}, {"name": "std::condition_variable::std::condition_variable::notify_one", "type": "cpp", "path": "cpp\\thread\\condition_variable\\notify_one.html", "desc": "std::condition_variable::std::condition_variable::notify_one"}, {"name": "std::condition_variable::std::condition_variable::wait", "type": "cpp", "path": "cpp\\thread\\condition_variable\\wait.html", "desc": "std::condition_variable::std::condition_variable::wait"}, {"name": "std::condition_variable::std::condition_variable::wait_for", "type": "cpp", "path": "cpp\\thread\\condition_variable\\wait_for.html", "desc": "std::condition_variable::std::condition_variable::wait_for"}, {"name": "std::condition_variable::std::condition_variable::wait_until", "type": "cpp", "path": "cpp\\thread\\condition_variable\\wait_until.html", "desc": "std::condition_variable::std::condition_variable::wait_until"}, {"name": "std::condition_variable::std::condition_variable::~condition_variable", "type": "cpp", "path": "cpp\\thread\\condition_variable\\~condition_variable.html", "desc": "std::condition_variable::std::condition_variable::~condition_variable"}, {"name": "std::condition_variable_any::std::condition_variable_any::condition_variable_any", "type": "cpp", "path": "cpp\\thread\\condition_variable_any\\condition_variable_any.html", "desc": "std::condition_variable_any::std::condition_variable_any::condition_variable_any"}, {"name": "std::condition_variable_any::std::condition_variable_any::notify_all", "type": "cpp", "path": "cpp\\thread\\condition_variable_any\\notify_all.html", "desc": "std::condition_variable_any::std::condition_variable_any::notify_all"}, {"name": "std::condition_variable_any::std::condition_variable_any::notify_one", "type": "cpp", "path": "cpp\\thread\\condition_variable_any\\notify_one.html", "desc": "std::condition_variable_any::std::condition_variable_any::notify_one"}, {"name": "std::condition_variable_any::std::condition_variable_any::wait", "type": "cpp", "path": "cpp\\thread\\condition_variable_any\\wait.html", "desc": "std::condition_variable_any::std::condition_variable_any::wait"}, {"name": "std::condition_variable_any::std::condition_variable_any::wait_for", "type": "cpp", "path": "cpp\\thread\\condition_variable_any\\wait_for.html", "desc": "std::condition_variable_any::std::condition_variable_any::wait_for"}, {"name": "std::condition_variable_any::std::condition_variable_any::wait_until", "type": "cpp", "path": "cpp\\thread\\condition_variable_any\\wait_until.html", "desc": "std::condition_variable_any::std::condition_variable_any::wait_until"}, {"name": "std::condition_variable_any::std::condition_variable_any::~condition_variable_any", "type": "cpp", "path": "cpp\\thread\\condition_variable_any\\~condition_variable_any.html", "desc": "std::condition_variable_any::std::condition_variable_any::~condition_variable_any"}, {"name": "std::counting_semaphore<LeastMaxValue>::std::counting_semaphore<LeastMaxValue>::acquire", "type": "cpp", "path": "cpp\\thread\\counting_semaphore\\acquire.html", "desc": "std::counting_semaphore<LeastMaxValue>::std::counting_semaphore<LeastMaxValue>::acquire"}, {"name": "std::counting_semaphore<LeastMaxValue>::std::counting_semaphore<LeastMaxValue>::counting_semaphore", "type": "cpp", "path": "cpp\\thread\\counting_semaphore\\counting_semaphore.html", "desc": "std::counting_semaphore<LeastMaxValue>::std::counting_semaphore<LeastMaxValue>::counting_semaphore"}, {"name": "std::counting_semaphore<LeastMaxValue>::std::counting_semaphore<LeastMaxValue>::max", "type": "cpp", "path": "cpp\\thread\\counting_semaphore\\max.html", "desc": "std::counting_semaphore<LeastMaxValue>::std::counting_semaphore<LeastMaxValue>::max"}, {"name": "std::counting_semaphore<LeastMaxValue>::std::counting_semaphore<LeastMaxValue>::release", "type": "cpp", "path": "cpp\\thread\\counting_semaphore\\release.html", "desc": "std::counting_semaphore<LeastMaxValue>::std::counting_semaphore<LeastMaxValue>::release"}, {"name": "std::counting_semaphore<LeastMaxValue>::std::counting_semaphore<LeastMaxValue>::try_acquire", "type": "cpp", "path": "cpp\\thread\\counting_semaphore\\try_acquire.html", "desc": "std::counting_semaphore<LeastMaxValue>::std::counting_semaphore<LeastMaxValue>::try_acquire"}, {"name": "std::counting_semaphore<LeastMaxValue>::std::counting_semaphore<LeastMaxValue>::try_acquire_for", "type": "cpp", "path": "cpp\\thread\\counting_semaphore\\try_acquire_for.html", "desc": "std::counting_semaphore<LeastMaxValue>::std::counting_semaphore<LeastMaxValue>::try_acquire_for"}, {"name": "std::counting_semaphore<LeastMaxValue>::std::counting_semaphore<LeastMaxValue>::try_acquire_until", "type": "cpp", "path": "cpp\\thread\\counting_semaphore\\try_acquire_until.html", "desc": "std::counting_semaphore<LeastMaxValue>::std::counting_semaphore<LeastMaxValue>::try_acquire_until"}, {"name": "std::counting_semaphore<LeastMaxValue>::std::counting_semaphore<LeastMaxValue>::~counting_semaphore", "type": "cpp", "path": "cpp\\thread\\counting_semaphore\\~counting_semaphore.html", "desc": "std::counting_semaphore<LeastMaxValue>::std::counting_semaphore<LeastMaxValue>::~counting_semaphore"}, {"name": "std::future<T>::std::future<T>::future", "type": "cpp", "path": "cpp\\thread\\future\\future.html", "desc": "std::future<T>::std::future<T>::future"}, {"name": "std::std::future_category", "type": "cpp", "path": "cpp\\thread\\future\\future_category.html", "desc": "std::std::future_category"}, {"name": "std::future<T>::std::future<T>::get", "type": "cpp", "path": "cpp\\thread\\future\\get.html", "desc": "std::future<T>::std::future<T>::get"}, {"name": "std::future<T>::std::future<T>::operator=", "type": "cpp", "path": "cpp\\thread\\future\\operator=.html", "desc": "std::future<T>::std::future<T>::operator="}, {"name": "std::future<T>::std::future<T>::share", "type": "cpp", "path": "cpp\\thread\\future\\share.html", "desc": "std::future<T>::std::future<T>::share"}, {"name": "std::future<T>::std::future<T>::valid", "type": "cpp", "path": "cpp\\thread\\future\\valid.html", "desc": "std::future<T>::std::future<T>::valid"}, {"name": "std::future<T>::std::future<T>::wait", "type": "cpp", "path": "cpp\\thread\\future\\wait.html", "desc": "std::future<T>::std::future<T>::wait"}, {"name": "std::future<T>::std::future<T>::wait_for", "type": "cpp", "path": "cpp\\thread\\future\\wait_for.html", "desc": "std::future<T>::std::future<T>::wait_for"}, {"name": "std::future<T>::std::future<T>::wait_until", "type": "cpp", "path": "cpp\\thread\\future\\wait_until.html", "desc": "std::future<T>::std::future<T>::wait_until"}, {"name": "std::future<T>::std::future<T>::~future", "type": "cpp", "path": "cpp\\thread\\future\\~future.html", "desc": "std::future<T>::std::future<T>::~future"}, {"name": "std:: <std::future_errc>std::is_error_code_enum<std::future_errc>", "type": "cpp", "path": "cpp\\thread\\future_errc\\is_error_code_enum.html", "desc": "std:: <std::future_errc>std::is_error_code_enum<std::future_errc>"}, {"name": "std:: (std::future_errc)std::make_error_code(std::future_errc)", "type": "cpp", "path": "cpp\\thread\\future_errc\\make_error_code.html", "desc": "std:: (std::future_errc)std::make_error_code(std::future_errc)"}, {"name": "std:: (std::future_errc)std::make_error_condition(std::future_errc)", "type": "cpp", "path": "cpp\\thread\\future_errc\\make_error_condition.html", "desc": "std:: (std::future_errc)std::make_error_condition(std::future_errc)"}, {"name": "std::future_error::std::future_error::code", "type": "cpp", "path": "cpp\\thread\\future_error\\code.html", "desc": "std::future_error::std::future_error::code"}, {"name": "std::future_error::std::future_error::future_error", "type": "cpp", "path": "cpp\\thread\\future_error\\future_error.html", "desc": "std::future_error::std::future_error::future_error"}, {"name": "std::future_error::std::future_error::operator=", "type": "cpp", "path": "cpp\\thread\\future_error\\operator=.html", "desc": "std::future_error::std::future_error::operator="}, {"name": "std::future_error::std::future_error::what", "type": "cpp", "path": "cpp\\thread\\future_error\\what.html", "desc": "std::future_error::std::future_error::what"}, {"name": "std::jthread::std::jthread::detach", "type": "cpp", "path": "cpp\\thread\\jthread\\detach.html", "desc": "std::jthread::std::jthread::detach"}, {"name": "std::jthread::std::jthread::get_id", "type": "cpp", "path": "cpp\\thread\\jthread\\get_id.html", "desc": "std::jthread::std::jthread::get_id"}, {"name": "std::jthread::std::jthread::get_stop_source", "type": "cpp", "path": "cpp\\thread\\jthread\\get_stop_source.html", "desc": "std::jthread::std::jthread::get_stop_source"}, {"name": "std::jthread::std::jthread::get_stop_token", "type": "cpp", "path": "cpp\\thread\\jthread\\get_stop_token.html", "desc": "std::jthread::std::jthread::get_stop_token"}, {"name": "std::jthread::std::jthread::hardware_concurrency", "type": "cpp", "path": "cpp\\thread\\jthread\\hardware_concurrency.html", "desc": "std::jthread::std::jthread::hardware_concurrency"}, {"name": "std::jthread::std::jthread::join", "type": "cpp", "path": "cpp\\thread\\jthread\\join.html", "desc": "std::jthread::std::jthread::join"}, {"name": "std::jthread::std::jthread::joinable", "type": "cpp", "path": "cpp\\thread\\jthread\\joinable.html", "desc": "std::jthread::std::jthread::joinable"}, {"name": "std::jthread::std::jthread::jthread", "type": "cpp", "path": "cpp\\thread\\jthread\\jthread.html", "desc": "std::jthread::std::jthread::jthread"}, {"name": "std::jthread::std::jthread::native_handle", "type": "cpp", "path": "cpp\\thread\\jthread\\native_handle.html", "desc": "std::jthread::std::jthread::native_handle"}, {"name": "std::jthread::std::jthread::operator=", "type": "cpp", "path": "cpp\\thread\\jthread\\operator=.html", "desc": "std::jthread::std::jthread::operator="}, {"name": "std::jthread::std::jthread::request_stop", "type": "cpp", "path": "cpp\\thread\\jthread\\request_stop.html", "desc": "std::jthread::std::jthread::request_stop"}, {"name": "std::jthread::std::jthread::swap", "type": "cpp", "path": "cpp\\thread\\jthread\\swap.html", "desc": "std::jthread::std::jthread::swap"}, {"name": "(std::jthread)swap(std::jthread)", "type": "cpp", "path": "cpp\\thread\\jthread\\swap2.html", "desc": "(std::jthread)swap(std::jthread)"}, {"name": "std::jthread::std::jthread::~jthread", "type": "cpp", "path": "cpp\\thread\\jthread\\~jthread.html", "desc": "std::jthread::std::jthread::~jthread"}, {"name": "std::latch::std::latch::arrive_and_wait", "type": "cpp", "path": "cpp\\thread\\latch\\arrive_and_wait.html", "desc": "std::latch::std::latch::arrive_and_wait"}, {"name": "std::latch::std::latch::count_down", "type": "cpp", "path": "cpp\\thread\\latch\\count_down.html", "desc": "std::latch::std::latch::count_down"}, {"name": "std::latch::std::latch::latch", "type": "cpp", "path": "cpp\\thread\\latch\\latch.html", "desc": "std::latch::std::latch::latch"}, {"name": "std::latch::std::latch::max", "type": "cpp", "path": "cpp\\thread\\latch\\max.html", "desc": "std::latch::std::latch::max"}, {"name": "std::latch::std::latch::try_wait", "type": "cpp", "path": "cpp\\thread\\latch\\try_wait.html", "desc": "std::latch::std::latch::try_wait"}, {"name": "std::latch::std::latch::wait", "type": "cpp", "path": "cpp\\thread\\latch\\wait.html", "desc": "std::latch::std::latch::wait"}, {"name": "std::latch::std::latch::~latch", "type": "cpp", "path": "cpp\\thread\\latch\\~latch.html", "desc": "std::latch::std::latch::~latch"}, {"name": "std::lock_guard<Mutex>::std::lock_guard<Mutex>::lock_guard", "type": "cpp", "path": "cpp\\thread\\lock_guard\\lock_guard.html", "desc": "std::lock_guard<Mutex>::std::lock_guard<Mutex>::lock_guard"}, {"name": "std::lock_guard<Mutex>::std::lock_guard<Mutex>::~lock_guard", "type": "cpp", "path": "cpp\\thread\\lock_guard\\~lock_guard.html", "desc": "std::lock_guard<Mutex>::std::lock_guard<Mutex>::~lock_guard"}, {"name": "std::mutex::std::mutex::lock", "type": "cpp", "path": "cpp\\thread\\mutex\\lock.html", "desc": "std::mutex::std::mutex::lock"}, {"name": "std::mutex::std::mutex::mutex", "type": "cpp", "path": "cpp\\thread\\mutex\\mutex.html", "desc": "std::mutex::std::mutex::mutex"}, {"name": "std::mutex::std::mutex::native_handle", "type": "cpp", "path": "cpp\\thread\\mutex\\native_handle.html", "desc": "std::mutex::std::mutex::native_handle"}, {"name": "std::mutex::std::mutex::try_lock", "type": "cpp", "path": "cpp\\thread\\mutex\\try_lock.html", "desc": "std::mutex::std::mutex::try_lock"}, {"name": "std::mutex::std::mutex::unlock", "type": "cpp", "path": "cpp\\thread\\mutex\\unlock.html", "desc": "std::mutex::std::mutex::unlock"}, {"name": "std::mutex::std::mutex::~mutex", "type": "cpp", "path": "cpp\\thread\\mutex\\~mutex.html", "desc": "std::mutex::std::mutex::~mutex"}, {"name": "std::packaged_task \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\thread\\packaged_task\\deduction_guides.html", "desc": "std::packaged_task \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::packaged_task<R(Args...)>::std::packaged_task<R(Args...)>::get_future", "type": "cpp", "path": "cpp\\thread\\packaged_task\\get_future.html", "desc": "std::packaged_task<R(Args...)>::std::packaged_task<R(Args...)>::get_future"}, {"name": "std::packaged_task<R(Args...)>::std::packaged_task<R(Args...)>::make_ready_at_thread_exit", "type": "cpp", "path": "cpp\\thread\\packaged_task\\make_ready_at_thread_exit.html", "desc": "std::packaged_task<R(Args...)>::std::packaged_task<R(Args...)>::make_ready_at_thread_exit"}, {"name": "std::packaged_task<R(Args...)>::std::packaged_task<R(Args...)>::operator()", "type": "cpp", "path": "cpp\\thread\\packaged_task\\operator().html", "desc": "std::packaged_task<R(Args...)>::std::packaged_task<R(Args...)>::operator()"}, {"name": "std::packaged_task<R(Args...)>::std::packaged_task<R(Args...)>::operator=", "type": "cpp", "path": "cpp\\thread\\packaged_task\\operator=.html", "desc": "std::packaged_task<R(Args...)>::std::packaged_task<R(Args...)>::operator="}, {"name": "std::packaged_task<R(Args...)>::std::packaged_task<R(Args...)>::packaged_task", "type": "cpp", "path": "cpp\\thread\\packaged_task\\packaged_task.html", "desc": "std::packaged_task<R(Args...)>::std::packaged_task<R(Args...)>::packaged_task"}, {"name": "std::packaged_task<R(Args...)>::std::packaged_task<R(Args...)>::reset", "type": "cpp", "path": "cpp\\thread\\packaged_task\\reset.html", "desc": "std::packaged_task<R(Args...)>::std::packaged_task<R(Args...)>::reset"}, {"name": "std::packaged_task<R(Args...)>::std::packaged_task<R(Args...)>::swap", "type": "cpp", "path": "cpp\\thread\\packaged_task\\swap.html", "desc": "std::packaged_task<R(Args...)>::std::packaged_task<R(Args...)>::swap"}, {"name": "std::std::swap(std::packaged_task)", "type": "cpp", "path": "cpp\\thread\\packaged_task\\swap2.html", "desc": "std::std::swap(std::packaged_task)"}, {"name": "std:: <std::packaged_task>std::uses_allocator<std::packaged_task>", "type": "cpp", "path": "cpp\\thread\\packaged_task\\uses_allocator.html", "desc": "std:: <std::packaged_task>std::uses_allocator<std::packaged_task>"}, {"name": "std::packaged_task<R(Args...)>::std::packaged_task<R(Args...)>::valid", "type": "cpp", "path": "cpp\\thread\\packaged_task\\valid.html", "desc": "std::packaged_task<R(Args...)>::std::packaged_task<R(Args...)>::valid"}, {"name": "std::packaged_task<R(Args...)>::std::packaged_task<R(Args...)>::~packaged_task", "type": "cpp", "path": "cpp\\thread\\packaged_task\\~packaged_task.html", "desc": "std::packaged_task<R(Args...)>::std::packaged_task<R(Args...)>::~packaged_task"}, {"name": "std::promise<R>::std::promise<R>::get_future", "type": "cpp", "path": "cpp\\thread\\promise\\get_future.html", "desc": "std::promise<R>::std::promise<R>::get_future"}, {"name": "std::promise<R>::std::promise<R>::operator=", "type": "cpp", "path": "cpp\\thread\\promise\\operator=.html", "desc": "std::promise<R>::std::promise<R>::operator="}, {"name": "std::promise<R>::std::promise<R>::promise", "type": "cpp", "path": "cpp\\thread\\promise\\promise.html", "desc": "std::promise<R>::std::promise<R>::promise"}, {"name": "std::promise<R>::std::promise<R>::set_exception", "type": "cpp", "path": "cpp\\thread\\promise\\set_exception.html", "desc": "std::promise<R>::std::promise<R>::set_exception"}, {"name": "std::promise<R>::std::promise<R>::set_exception_at_thread_exit", "type": "cpp", "path": "cpp\\thread\\promise\\set_exception_at_thread_exit.html", "desc": "std::promise<R>::std::promise<R>::set_exception_at_thread_exit"}, {"name": "std::promise<R>::std::promise<R>::set_value", "type": "cpp", "path": "cpp\\thread\\promise\\set_value.html", "desc": "std::promise<R>::std::promise<R>::set_value"}, {"name": "std::promise<R>::std::promise<R>::set_value_at_thread_exit", "type": "cpp", "path": "cpp\\thread\\promise\\set_value_at_thread_exit.html", "desc": "std::promise<R>::std::promise<R>::set_value_at_thread_exit"}, {"name": "std::promise<R>::std::promise<R>::swap", "type": "cpp", "path": "cpp\\thread\\promise\\swap.html", "desc": "std::promise<R>::std::promise<R>::swap"}, {"name": "std::std::swap(std::promise)", "type": "cpp", "path": "cpp\\thread\\promise\\swap2.html", "desc": "std::std::swap(std::promise)"}, {"name": "std:: <std::promise>std::uses_allocator<std::promise>", "type": "cpp", "path": "cpp\\thread\\promise\\uses_allocator.html", "desc": "std:: <std::promise>std::uses_allocator<std::promise>"}, {"name": "std::promise<R>::std::promise<R>::~promise", "type": "cpp", "path": "cpp\\thread\\promise\\~promise.html", "desc": "std::promise<R>::std::promise<R>::~promise"}, {"name": "std::recursive_mutex::std::recursive_mutex::lock", "type": "cpp", "path": "cpp\\thread\\recursive_mutex\\lock.html", "desc": "std::recursive_mutex::std::recursive_mutex::lock"}, {"name": "std::recursive_mutex::std::recursive_mutex::native_handle", "type": "cpp", "path": "cpp\\thread\\recursive_mutex\\native_handle.html", "desc": "std::recursive_mutex::std::recursive_mutex::native_handle"}, {"name": "std::recursive_mutex::std::recursive_mutex::recursive_mutex", "type": "cpp", "path": "cpp\\thread\\recursive_mutex\\recursive_mutex.html", "desc": "std::recursive_mutex::std::recursive_mutex::recursive_mutex"}, {"name": "std::recursive_mutex::std::recursive_mutex::try_lock", "type": "cpp", "path": "cpp\\thread\\recursive_mutex\\try_lock.html", "desc": "std::recursive_mutex::std::recursive_mutex::try_lock"}, {"name": "std::recursive_mutex::std::recursive_mutex::unlock", "type": "cpp", "path": "cpp\\thread\\recursive_mutex\\unlock.html", "desc": "std::recursive_mutex::std::recursive_mutex::unlock"}, {"name": "std::recursive_mutex::std::recursive_mutex::~recursive_mutex", "type": "cpp", "path": "cpp\\thread\\recursive_mutex\\~recursive_mutex.html", "desc": "std::recursive_mutex::std::recursive_mutex::~recursive_mutex"}, {"name": "std::recursive_timed_mutex::std::recursive_timed_mutex::lock", "type": "cpp", "path": "cpp\\thread\\recursive_timed_mutex\\lock.html", "desc": "std::recursive_timed_mutex::std::recursive_timed_mutex::lock"}, {"name": "std::recursive_timed_mutex::std::recursive_timed_mutex::native_handle", "type": "cpp", "path": "cpp\\thread\\recursive_timed_mutex\\native_handle.html", "desc": "std::recursive_timed_mutex::std::recursive_timed_mutex::native_handle"}, {"name": "std::recursive_timed_mutex::std::recursive_timed_mutex::recursive_timed_mutex", "type": "cpp", "path": "cpp\\thread\\recursive_timed_mutex\\recursive_timed_mutex.html", "desc": "std::recursive_timed_mutex::std::recursive_timed_mutex::recursive_timed_mutex"}, {"name": "std::recursive_timed_mutex::std::recursive_timed_mutex::try_lock", "type": "cpp", "path": "cpp\\thread\\recursive_timed_mutex\\try_lock.html", "desc": "std::recursive_timed_mutex::std::recursive_timed_mutex::try_lock"}, {"name": "std::recursive_timed_mutex::std::recursive_timed_mutex::try_lock_for", "type": "cpp", "path": "cpp\\thread\\recursive_timed_mutex\\try_lock_for.html", "desc": "std::recursive_timed_mutex::std::recursive_timed_mutex::try_lock_for"}, {"name": "std::recursive_timed_mutex::std::recursive_timed_mutex::try_lock_until", "type": "cpp", "path": "cpp\\thread\\recursive_timed_mutex\\try_lock_until.html", "desc": "std::recursive_timed_mutex::std::recursive_timed_mutex::try_lock_until"}, {"name": "std::recursive_timed_mutex::std::recursive_timed_mutex::unlock", "type": "cpp", "path": "cpp\\thread\\recursive_timed_mutex\\unlock.html", "desc": "std::recursive_timed_mutex::std::recursive_timed_mutex::unlock"}, {"name": "std::recursive_timed_mutex::std::recursive_timed_mutex::~recursive_timed_mutex", "type": "cpp", "path": "cpp\\thread\\recursive_timed_mutex\\~recursive_timed_mutex.html", "desc": "std::recursive_timed_mutex::std::recursive_timed_mutex::~recursive_timed_mutex"}, {"name": "std::scoped_lock<MutexTypes...>::std::scoped_lock<MutexTypes...>::scoped_lock", "type": "cpp", "path": "cpp\\thread\\scoped_lock\\scoped_lock.html", "desc": "std::scoped_lock<MutexTypes...>::std::scoped_lock<MutexTypes...>::scoped_lock"}, {"name": "std::scoped_lock<MutexTypes...>::std::scoped_lock<MutexTypes...>::~scoped_lock", "type": "cpp", "path": "cpp\\thread\\scoped_lock\\~scoped_lock.html", "desc": "std::scoped_lock<MutexTypes...>::std::scoped_lock<MutexTypes...>::~scoped_lock"}, {"name": "std::shared_future<T>::std::shared_future<T>::get", "type": "cpp", "path": "cpp\\thread\\shared_future\\get.html", "desc": "std::shared_future<T>::std::shared_future<T>::get"}, {"name": "std::shared_future<T>::std::shared_future<T>::operator=", "type": "cpp", "path": "cpp\\thread\\shared_future\\operator=.html", "desc": "std::shared_future<T>::std::shared_future<T>::operator="}, {"name": "std::shared_future<T>::std::shared_future<T>::shared_future", "type": "cpp", "path": "cpp\\thread\\shared_future\\shared_future.html", "desc": "std::shared_future<T>::std::shared_future<T>::shared_future"}, {"name": "std::shared_future<T>::std::shared_future<T>::valid", "type": "cpp", "path": "cpp\\thread\\shared_future\\valid.html", "desc": "std::shared_future<T>::std::shared_future<T>::valid"}, {"name": "std::shared_future<T>::std::shared_future<T>::wait", "type": "cpp", "path": "cpp\\thread\\shared_future\\wait.html", "desc": "std::shared_future<T>::std::shared_future<T>::wait"}, {"name": "std::shared_future<T>::std::shared_future<T>::wait_for", "type": "cpp", "path": "cpp\\thread\\shared_future\\wait_for.html", "desc": "std::shared_future<T>::std::shared_future<T>::wait_for"}, {"name": "std::shared_future<T>::std::shared_future<T>::wait_until", "type": "cpp", "path": "cpp\\thread\\shared_future\\wait_until.html", "desc": "std::shared_future<T>::std::shared_future<T>::wait_until"}, {"name": "std::shared_future<T>::std::shared_future<T>::~shared_future", "type": "cpp", "path": "cpp\\thread\\shared_future\\~shared_future.html", "desc": "std::shared_future<T>::std::shared_future<T>::~shared_future"}, {"name": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::lock", "type": "cpp", "path": "cpp\\thread\\shared_lock\\lock.html", "desc": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::lock"}, {"name": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::mutex", "type": "cpp", "path": "cpp\\thread\\shared_lock\\mutex.html", "desc": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::mutex"}, {"name": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::operator=", "type": "cpp", "path": "cpp\\thread\\shared_lock\\operator=.html", "desc": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::operator="}, {"name": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::operator bool", "type": "cpp", "path": "cpp\\thread\\shared_lock\\operator_bool.html", "desc": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::operator bool"}, {"name": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::owns_lock", "type": "cpp", "path": "cpp\\thread\\shared_lock\\owns_lock.html", "desc": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::owns_lock"}, {"name": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::release", "type": "cpp", "path": "cpp\\thread\\shared_lock\\release.html", "desc": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::release"}, {"name": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::shared_lock", "type": "cpp", "path": "cpp\\thread\\shared_lock\\shared_lock.html", "desc": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::shared_lock"}, {"name": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::swap", "type": "cpp", "path": "cpp\\thread\\shared_lock\\swap.html", "desc": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::swap"}, {"name": "std::std::swap(std::shared_lock)", "type": "cpp", "path": "cpp\\thread\\shared_lock\\swap2.html", "desc": "std::std::swap(std::shared_lock)"}, {"name": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::try_lock", "type": "cpp", "path": "cpp\\thread\\shared_lock\\try_lock.html", "desc": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::try_lock"}, {"name": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::try_lock_for", "type": "cpp", "path": "cpp\\thread\\shared_lock\\try_lock_for.html", "desc": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::try_lock_for"}, {"name": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::try_lock_until", "type": "cpp", "path": "cpp\\thread\\shared_lock\\try_lock_until.html", "desc": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::try_lock_until"}, {"name": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::unlock", "type": "cpp", "path": "cpp\\thread\\shared_lock\\unlock.html", "desc": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::unlock"}, {"name": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::~shared_lock", "type": "cpp", "path": "cpp\\thread\\shared_lock\\~shared_lock.html", "desc": "std::shared_lock<Mutex>::std::shared_lock<Mutex>::~shared_lock"}, {"name": "std::shared_mutex::std::shared_mutex::lock", "type": "cpp", "path": "cpp\\thread\\shared_mutex\\lock.html", "desc": "std::shared_mutex::std::shared_mutex::lock"}, {"name": "std::shared_mutex::std::shared_mutex::lock_shared", "type": "cpp", "path": "cpp\\thread\\shared_mutex\\lock_shared.html", "desc": "std::shared_mutex::std::shared_mutex::lock_shared"}, {"name": "std::shared_mutex::std::shared_mutex::native_handle", "type": "cpp", "path": "cpp\\thread\\shared_mutex\\native_handle.html", "desc": "std::shared_mutex::std::shared_mutex::native_handle"}, {"name": "std::shared_mutex::std::shared_mutex::shared_mutex", "type": "cpp", "path": "cpp\\thread\\shared_mutex\\shared_mutex.html", "desc": "std::shared_mutex::std::shared_mutex::shared_mutex"}, {"name": "std::shared_mutex::std::shared_mutex::try_lock", "type": "cpp", "path": "cpp\\thread\\shared_mutex\\try_lock.html", "desc": "std::shared_mutex::std::shared_mutex::try_lock"}, {"name": "std::shared_mutex::std::shared_mutex::try_lock_shared", "type": "cpp", "path": "cpp\\thread\\shared_mutex\\try_lock_shared.html", "desc": "std::shared_mutex::std::shared_mutex::try_lock_shared"}, {"name": "std::shared_mutex::std::shared_mutex::unlock", "type": "cpp", "path": "cpp\\thread\\shared_mutex\\unlock.html", "desc": "std::shared_mutex::std::shared_mutex::unlock"}, {"name": "std::shared_mutex::std::shared_mutex::unlock_shared", "type": "cpp", "path": "cpp\\thread\\shared_mutex\\unlock_shared.html", "desc": "std::shared_mutex::std::shared_mutex::unlock_shared"}, {"name": "std::shared_mutex::std::shared_mutex::~shared_mutex", "type": "cpp", "path": "cpp\\thread\\shared_mutex\\~shared_mutex.html", "desc": "std::shared_mutex::std::shared_mutex::~shared_mutex"}, {"name": "std::shared_timed_mutex::std::shared_timed_mutex::lock", "type": "cpp", "path": "cpp\\thread\\shared_timed_mutex\\lock.html", "desc": "std::shared_timed_mutex::std::shared_timed_mutex::lock"}, {"name": "std::shared_timed_mutex::std::shared_timed_mutex::lock_shared", "type": "cpp", "path": "cpp\\thread\\shared_timed_mutex\\lock_shared.html", "desc": "std::shared_timed_mutex::std::shared_timed_mutex::lock_shared"}, {"name": "std::shared_timed_mutex::std::shared_timed_mutex::shared_timed_mutex", "type": "cpp", "path": "cpp\\thread\\shared_timed_mutex\\shared_timed_mutex.html", "desc": "std::shared_timed_mutex::std::shared_timed_mutex::shared_timed_mutex"}, {"name": "std::shared_timed_mutex::std::shared_timed_mutex::try_lock", "type": "cpp", "path": "cpp\\thread\\shared_timed_mutex\\try_lock.html", "desc": "std::shared_timed_mutex::std::shared_timed_mutex::try_lock"}, {"name": "std::shared_timed_mutex::std::shared_timed_mutex::try_lock_for", "type": "cpp", "path": "cpp\\thread\\shared_timed_mutex\\try_lock_for.html", "desc": "std::shared_timed_mutex::std::shared_timed_mutex::try_lock_for"}, {"name": "std::shared_timed_mutex::std::shared_timed_mutex::try_lock_shared", "type": "cpp", "path": "cpp\\thread\\shared_timed_mutex\\try_lock_shared.html", "desc": "std::shared_timed_mutex::std::shared_timed_mutex::try_lock_shared"}, {"name": "std::shared_timed_mutex::std::shared_timed_mutex::try_lock_shared_for", "type": "cpp", "path": "cpp\\thread\\shared_timed_mutex\\try_lock_shared_for.html", "desc": "std::shared_timed_mutex::std::shared_timed_mutex::try_lock_shared_for"}, {"name": "std::shared_timed_mutex::std::shared_timed_mutex::try_lock_shared_until", "type": "cpp", "path": "cpp\\thread\\shared_timed_mutex\\try_lock_shared_until.html", "desc": "std::shared_timed_mutex::std::shared_timed_mutex::try_lock_shared_until"}, {"name": "std::shared_timed_mutex::std::shared_timed_mutex::try_lock_until", "type": "cpp", "path": "cpp\\thread\\shared_timed_mutex\\try_lock_until.html", "desc": "std::shared_timed_mutex::std::shared_timed_mutex::try_lock_until"}, {"name": "std::shared_timed_mutex::std::shared_timed_mutex::unlock", "type": "cpp", "path": "cpp\\thread\\shared_timed_mutex\\unlock.html", "desc": "std::shared_timed_mutex::std::shared_timed_mutex::unlock"}, {"name": "std::shared_timed_mutex::std::shared_timed_mutex::unlock_shared", "type": "cpp", "path": "cpp\\thread\\shared_timed_mutex\\unlock_shared.html", "desc": "std::shared_timed_mutex::std::shared_timed_mutex::unlock_shared"}, {"name": "std::shared_timed_mutex::std::shared_timed_mutex::~shared_timed_mutex", "type": "cpp", "path": "cpp\\thread\\shared_timed_mutex\\~shared_timed_mutex.html", "desc": "std::shared_timed_mutex::std::shared_timed_mutex::~shared_timed_mutex"}, {"name": "std::stop_callback \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\thread\\stop_callback\\deduction_guides.html", "desc": "std::stop_callback \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::stop_callback<Callback>::std::stop_callback<Callback>::stop_callback", "type": "cpp", "path": "cpp\\thread\\stop_callback\\stop_callback.html", "desc": "std::stop_callback<Callback>::std::stop_callback<Callback>::stop_callback"}, {"name": "std::stop_callback<Callback>::std::stop_callback<Callback>::~stop_callback", "type": "cpp", "path": "cpp\\thread\\stop_callback\\~stop_callback.html", "desc": "std::stop_callback<Callback>::std::stop_callback<Callback>::~stop_callback"}, {"name": "std::stop_source::std::stop_source::get_token", "type": "cpp", "path": "cpp\\thread\\stop_source\\get_token.html", "desc": "std::stop_source::std::stop_source::get_token"}, {"name": "std::std::nostopstate", "type": "cpp", "path": "cpp\\thread\\stop_source\\nostopstate.html", "desc": "std::std::nostopstate"}, {"name": "std::std::nostopstate_t", "type": "cpp", "path": "cpp\\thread\\stop_source\\nostopstate_t.html", "desc": "std::std::nostopstate_t"}, {"name": "std::stop_source::std::stop_source::operator=", "type": "cpp", "path": "cpp\\thread\\stop_source\\operator=.html", "desc": "std::stop_source::std::stop_source::operator="}, {"name": "operator==(std::stop_source)", "type": "cpp", "path": "cpp\\thread\\stop_source\\operator_cmp.html", "desc": "operator==(std::stop_source)"}, {"name": "std::stop_source::std::stop_source::request_stop", "type": "cpp", "path": "cpp\\thread\\stop_source\\request_stop.html", "desc": "std::stop_source::std::stop_source::request_stop"}, {"name": "std::stop_source::std::stop_source::stop_possible", "type": "cpp", "path": "cpp\\thread\\stop_source\\stop_possible.html", "desc": "std::stop_source::std::stop_source::stop_possible"}, {"name": "std::stop_source::std::stop_source::stop_requested", "type": "cpp", "path": "cpp\\thread\\stop_source\\stop_requested.html", "desc": "std::stop_source::std::stop_source::stop_requested"}, {"name": "std::stop_source::std::stop_source::stop_source", "type": "cpp", "path": "cpp\\thread\\stop_source\\stop_source.html", "desc": "std::stop_source::std::stop_source::stop_source"}, {"name": "std::stop_source::std::stop_source::swap", "type": "cpp", "path": "cpp\\thread\\stop_source\\swap.html", "desc": "std::stop_source::std::stop_source::swap"}, {"name": "(std::stop_source)swap(std::stop_source)", "type": "cpp", "path": "cpp\\thread\\stop_source\\swap2.html", "desc": "(std::stop_source)swap(std::stop_source)"}, {"name": "std::stop_source::std::stop_source::~stop_source", "type": "cpp", "path": "cpp\\thread\\stop_source\\~stop_source.html", "desc": "std::stop_source::std::stop_source::~stop_source"}, {"name": "std::stop_token::std::stop_token::operator=", "type": "cpp", "path": "cpp\\thread\\stop_token\\operator=.html", "desc": "std::stop_token::std::stop_token::operator="}, {"name": "operator==(std::stop_token)", "type": "cpp", "path": "cpp\\thread\\stop_token\\operator_cmp.html", "desc": "operator==(std::stop_token)"}, {"name": "std::stop_token::std::stop_token::stop_possible", "type": "cpp", "path": "cpp\\thread\\stop_token\\stop_possible.html", "desc": "std::stop_token::std::stop_token::stop_possible"}, {"name": "std::stop_token::std::stop_token::stop_requested", "type": "cpp", "path": "cpp\\thread\\stop_token\\stop_requested.html", "desc": "std::stop_token::std::stop_token::stop_requested"}, {"name": "std::stop_token::std::stop_token::stop_token", "type": "cpp", "path": "cpp\\thread\\stop_token\\stop_token.html", "desc": "std::stop_token::std::stop_token::stop_token"}, {"name": "std::stop_token::std::stop_token::swap", "type": "cpp", "path": "cpp\\thread\\stop_token\\swap.html", "desc": "std::stop_token::std::stop_token::swap"}, {"name": "(std::stop_token)swap(std::stop_token)", "type": "cpp", "path": "cpp\\thread\\stop_token\\swap2.html", "desc": "(std::stop_token)swap(std::stop_token)"}, {"name": "std::stop_token::std::stop_token::~stop_token", "type": "cpp", "path": "cpp\\thread\\stop_token\\~stop_token.html", "desc": "std::stop_token::std::stop_token::~stop_token"}, {"name": "std::thread::std::thread::detach", "type": "cpp", "path": "cpp\\thread\\thread\\detach.html", "desc": "std::thread::std::thread::detach"}, {"name": "std::thread::std::thread::get_id", "type": "cpp", "path": "cpp\\thread\\thread\\get_id.html", "desc": "std::thread::std::thread::get_id"}, {"name": "std::thread::std::thread::hardware_concurrency", "type": "cpp", "path": "cpp\\thread\\thread\\hardware_concurrency.html", "desc": "std::thread::std::thread::hardware_concurrency"}, {"name": "std::thread::std::thread::id", "type": "cpp", "path": "cpp\\thread\\thread\\id.html", "desc": "std::thread::std::thread::id"}, {"name": "std::thread::std::thread::join", "type": "cpp", "path": "cpp\\thread\\thread\\join.html", "desc": "std::thread::std::thread::join"}, {"name": "std::thread::std::thread::joinable", "type": "cpp", "path": "cpp\\thread\\thread\\joinable.html", "desc": "std::thread::std::thread::joinable"}, {"name": "std::thread::std::thread::native_handle", "type": "cpp", "path": "cpp\\thread\\thread\\native_handle.html", "desc": "std::thread::std::thread::native_handle"}, {"name": "std::thread::std::thread::operator=", "type": "cpp", "path": "cpp\\thread\\thread\\operator=.html", "desc": "std::thread::std::thread::operator="}, {"name": "std::thread::std::thread::swap", "type": "cpp", "path": "cpp\\thread\\thread\\swap.html", "desc": "std::thread::std::thread::swap"}, {"name": "std:: (std::thread)std::swap(std::thread)", "type": "cpp", "path": "cpp\\thread\\thread\\swap2.html", "desc": "std:: (std::thread)std::swap(std::thread)"}, {"name": "std::thread::std::thread::thread", "type": "cpp", "path": "cpp\\thread\\thread\\thread.html", "desc": "std::thread::std::thread::thread"}, {"name": "std::thread::std::thread::~thread", "type": "cpp", "path": "cpp\\thread\\thread\\~thread.html", "desc": "std::thread::std::thread::~thread"}, {"name": "std:: <std::thread::id>std::hash<std::thread::id>", "type": "cpp", "path": "cpp\\thread\\thread\\id\\hash.html", "desc": "std:: <std::thread::id>std::hash<std::thread::id>"}, {"name": "std::thread::id::std::thread::id::id", "type": "cpp", "path": "cpp\\thread\\thread\\id\\id.html", "desc": "std::thread::id::std::thread::id::id"}, {"name": "(std::thread::id)operator==,!=,<,<=,>,>=,<=>(std::thread::id)", "type": "cpp", "path": "cpp\\thread\\thread\\id\\operator_cmp.html", "desc": "(std::thread::id)operator==,!=,<,<=,>,>=,<=>(std::thread::id)"}, {"name": "operator<<(std::thread::id)", "type": "cpp", "path": "cpp\\thread\\thread\\id\\operator_ltlt.html", "desc": "operator<<(std::thread::id)"}, {"name": "std::timed_mutex::std::timed_mutex::lock", "type": "cpp", "path": "cpp\\thread\\timed_mutex\\lock.html", "desc": "std::timed_mutex::std::timed_mutex::lock"}, {"name": "std::timed_mutex::std::timed_mutex::native_handle", "type": "cpp", "path": "cpp\\thread\\timed_mutex\\native_handle.html", "desc": "std::timed_mutex::std::timed_mutex::native_handle"}, {"name": "std::timed_mutex::std::timed_mutex::timed_mutex", "type": "cpp", "path": "cpp\\thread\\timed_mutex\\timed_mutex.html", "desc": "std::timed_mutex::std::timed_mutex::timed_mutex"}, {"name": "std::timed_mutex::std::timed_mutex::try_lock", "type": "cpp", "path": "cpp\\thread\\timed_mutex\\try_lock.html", "desc": "std::timed_mutex::std::timed_mutex::try_lock"}, {"name": "std::timed_mutex::std::timed_mutex::try_lock_for", "type": "cpp", "path": "cpp\\thread\\timed_mutex\\try_lock_for.html", "desc": "std::timed_mutex::std::timed_mutex::try_lock_for"}, {"name": "std::timed_mutex::std::timed_mutex::try_lock_until", "type": "cpp", "path": "cpp\\thread\\timed_mutex\\try_lock_until.html", "desc": "std::timed_mutex::std::timed_mutex::try_lock_until"}, {"name": "std::timed_mutex::std::timed_mutex::unlock", "type": "cpp", "path": "cpp\\thread\\timed_mutex\\unlock.html", "desc": "std::timed_mutex::std::timed_mutex::unlock"}, {"name": "std::timed_mutex::std::timed_mutex::~timed_mutex", "type": "cpp", "path": "cpp\\thread\\timed_mutex\\~timed_mutex.html", "desc": "std::timed_mutex::std::timed_mutex::~timed_mutex"}, {"name": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::lock", "type": "cpp", "path": "cpp\\thread\\unique_lock\\lock.html", "desc": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::lock"}, {"name": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::mutex", "type": "cpp", "path": "cpp\\thread\\unique_lock\\mutex.html", "desc": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::mutex"}, {"name": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::operator=", "type": "cpp", "path": "cpp\\thread\\unique_lock\\operator=.html", "desc": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::operator="}, {"name": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::operator bool", "type": "cpp", "path": "cpp\\thread\\unique_lock\\operator_bool.html", "desc": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::operator bool"}, {"name": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::owns_lock", "type": "cpp", "path": "cpp\\thread\\unique_lock\\owns_lock.html", "desc": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::owns_lock"}, {"name": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::release", "type": "cpp", "path": "cpp\\thread\\unique_lock\\release.html", "desc": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::release"}, {"name": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::swap", "type": "cpp", "path": "cpp\\thread\\unique_lock\\swap.html", "desc": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::swap"}, {"name": "std::std::swap(std::unique_lock)", "type": "cpp", "path": "cpp\\thread\\unique_lock\\swap2.html", "desc": "std::std::swap(std::unique_lock)"}, {"name": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::try_lock", "type": "cpp", "path": "cpp\\thread\\unique_lock\\try_lock.html", "desc": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::try_lock"}, {"name": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::try_lock_for", "type": "cpp", "path": "cpp\\thread\\unique_lock\\try_lock_for.html", "desc": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::try_lock_for"}, {"name": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::try_lock_until", "type": "cpp", "path": "cpp\\thread\\unique_lock\\try_lock_until.html", "desc": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::try_lock_until"}, {"name": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::unique_lock", "type": "cpp", "path": "cpp\\thread\\unique_lock\\unique_lock.html", "desc": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::unique_lock"}, {"name": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::unlock", "type": "cpp", "path": "cpp\\thread\\unique_lock\\unlock.html", "desc": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::unlock"}, {"name": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::~unique_lock", "type": "cpp", "path": "cpp\\thread\\unique_lock\\~unique_lock.html", "desc": "std::unique_lock<Mutex>::std::unique_lock<Mutex>::~unique_lock"}, {"name": "std:: std:: std::std::add_cv, std::add_const, std::add_volatile", "type": "cpp", "path": "cpp\\types\\add_cv.html", "desc": "std:: std:: std::std::add_cv, std::add_const, std::add_volatile"}, {"name": "std::std::add_pointer", "type": "cpp", "path": "cpp\\types\\add_pointer.html", "desc": "std::std::add_pointer"}, {"name": "std:: std::std::add_lvalue_reference, std::add_rvalue_reference", "type": "cpp", "path": "cpp\\types\\add_reference.html", "desc": "std:: std::std::add_lvalue_reference, std::add_rvalue_reference"}, {"name": "std::std::aligned_storage", "type": "cpp", "path": "cpp\\types\\aligned_storage.html", "desc": "std::std::aligned_storage"}, {"name": "std::std::aligned_union", "type": "cpp", "path": "cpp\\types\\aligned_union.html", "desc": "std::std::aligned_union"}, {"name": "std::std::alignment_of", "type": "cpp", "path": "cpp\\types\\alignment_of.html", "desc": "std::std::alignment_of"}, {"name": "std::std::bad_cast", "type": "cpp", "path": "cpp\\types\\bad_cast.html", "desc": "std::std::bad_cast"}, {"name": "std::std::bad_typeid", "type": "cpp", "path": "cpp\\types\\bad_typeid.html", "desc": "std::std::bad_typeid"}, {"name": "std::std::byte", "type": "cpp", "path": "cpp\\types\\byte.html", "desc": "std::std::byte"}, {"name": "C \u6570\u503c\u6781\u9650\u63a5\u53e3", "type": "cpp", "path": "cpp\\types\\climits.html", "desc": "C \u6570\u503c\u6781\u9650\u63a5\u53e3"}, {"name": "std::std::common_reference", "type": "cpp", "path": "cpp\\types\\common_reference.html", "desc": "std::std::common_reference"}, {"name": "std::std::common_type", "type": "cpp", "path": "cpp\\types\\common_type.html", "desc": "std::std::common_type"}, {"name": "std::std::conditional", "type": "cpp", "path": "cpp\\types\\conditional.html", "desc": "std::std::conditional"}, {"name": "std::std::conjunction", "type": "cpp", "path": "cpp\\types\\conjunction.html", "desc": "std::std::conjunction"}, {"name": "std::std::decay", "type": "cpp", "path": "cpp\\types\\decay.html", "desc": "std::std::decay"}, {"name": "std::std::disjunction", "type": "cpp", "path": "cpp\\types\\disjunction.html", "desc": "std::std::disjunction"}, {"name": "std::std::enable_if", "type": "cpp", "path": "cpp\\types\\enable_if.html", "desc": "std::std::enable_if"}, {"name": "std::std::endian", "type": "cpp", "path": "cpp\\types\\endian.html", "desc": "std::std::endian"}, {"name": "std::std::extent", "type": "cpp", "path": "cpp\\types\\extent.html", "desc": "std::std::extent"}, {"name": "(C++23 \u8d77)\u5b9a\u5bbd\u6d6e\u70b9\u7c7b\u578b (C++23 \u8d77)", "type": "cpp", "path": "cpp\\types\\floating-point.html", "desc": "(C++23 \u8d77)\u5b9a\u5bbd\u6d6e\u70b9\u7c7b\u578b (C++23 \u8d77)"}, {"name": "std::std::has_unique_object_representations", "type": "cpp", "path": "cpp\\types\\has_unique_object_representations.html", "desc": "std::std::has_unique_object_representations"}, {"name": "std::std::has_virtual_destructor", "type": "cpp", "path": "cpp\\types\\has_virtual_destructor.html", "desc": "std::std::has_virtual_destructor"}, {"name": "(C++11 \u8d77)\u5b9a\u5bbd\u6574\u6570\u7c7b\u578b (C++11 \u8d77)", "type": "cpp", "path": "cpp\\types\\integer.html", "desc": "(C++11 \u8d77)\u5b9a\u5bbd\u6574\u6570\u7c7b\u578b (C++11 \u8d77)"}, {"name": "std::std::integral_constant", "type": "cpp", "path": "cpp\\types\\integral_constant.html", "desc": "std::std::integral_constant"}, {"name": "std::std::is_abstract", "type": "cpp", "path": "cpp\\types\\is_abstract.html", "desc": "std::std::is_abstract"}, {"name": "std::std::is_aggregate", "type": "cpp", "path": "cpp\\types\\is_aggregate.html", "desc": "std::std::is_aggregate"}, {"name": "std::std::is_arithmetic", "type": "cpp", "path": "cpp\\types\\is_arithmetic.html", "desc": "std::std::is_arithmetic"}, {"name": "std::std::is_array", "type": "cpp", "path": "cpp\\types\\is_array.html", "desc": "std::std::is_array"}, {"name": "std:: std:: std::std::is_assignable, std::is_trivially_assignable, std::is_nothrow_assignable", "type": "cpp", "path": "cpp\\types\\is_assignable.html", "desc": "std:: std:: std::std::is_assignable, std::is_trivially_assignable, std::is_nothrow_assignable"}, {"name": "std::std::is_base_of", "type": "cpp", "path": "cpp\\types\\is_base_of.html", "desc": "std::std::is_base_of"}, {"name": "std::std::is_bounded_array", "type": "cpp", "path": "cpp\\types\\is_bounded_array.html", "desc": "std::std::is_bounded_array"}, {"name": "std::std::is_class", "type": "cpp", "path": "cpp\\types\\is_class.html", "desc": "std::std::is_class"}, {"name": "std::std::is_compound", "type": "cpp", "path": "cpp\\types\\is_compound.html", "desc": "std::std::is_compound"}, {"name": "std::std::is_const", "type": "cpp", "path": "cpp\\types\\is_const.html", "desc": "std::std::is_const"}, {"name": "std::std::is_constant_evaluated", "type": "cpp", "path": "cpp\\types\\is_constant_evaluated.html", "desc": "std::std::is_constant_evaluated"}, {"name": "std:: std:: std::std::is_constructible, std::is_trivially_constructible, std::is_nothrow_constructible", "type": "cpp", "path": "cpp\\types\\is_constructible.html", "desc": "std:: std:: std::std::is_constructible, std::is_trivially_constructible, std::is_nothrow_constructible"}, {"name": "std:: std::std::is_convertible, std::is_nothrow_convertible", "type": "cpp", "path": "cpp\\types\\is_convertible.html", "desc": "std:: std::std::is_convertible, std::is_nothrow_convertible"}, {"name": "std:: std:: std::std::is_copy_assignable, std::is_trivially_copy_assignable, std::is_nothrow_copy_assignable", "type": "cpp", "path": "cpp\\types\\is_copy_assignable.html", "desc": "std:: std:: std::std::is_copy_assignable, std::is_trivially_copy_assignable, std::is_nothrow_copy_assignable"}, {"name": "std:: std:: std::std::is_copy_constructible, std::is_trivially_copy_constructible, std::is_nothrow_copy_constructible", "type": "cpp", "path": "cpp\\types\\is_copy_constructible.html", "desc": "std:: std:: std::std::is_copy_constructible, std::is_trivially_copy_constructible, std::is_nothrow_copy_constructible"}, {"name": "std::std::is_corresponding_member", "type": "cpp", "path": "cpp\\types\\is_corresponding_member.html", "desc": "std::std::is_corresponding_member"}, {"name": "std:: std:: std::std::is_default_constructible, std::is_trivially_default_constructible, std::is_nothrow_default_constructible", "type": "cpp", "path": "cpp\\types\\is_default_constructible.html", "desc": "std:: std:: std::std::is_default_constructible, std::is_trivially_default_constructible, std::is_nothrow_default_constructible"}, {"name": "std:: std:: std::std::is_destructible, std::is_trivially_destructible, std::is_nothrow_destructible", "type": "cpp", "path": "cpp\\types\\is_destructible.html", "desc": "std:: std:: std::std::is_destructible, std::is_trivially_destructible, std::is_nothrow_destructible"}, {"name": "std::std::is_empty", "type": "cpp", "path": "cpp\\types\\is_empty.html", "desc": "std::std::is_empty"}, {"name": "std::std::is_enum", "type": "cpp", "path": "cpp\\types\\is_enum.html", "desc": "std::std::is_enum"}, {"name": "std::std::is_final", "type": "cpp", "path": "cpp\\types\\is_final.html", "desc": "std::std::is_final"}, {"name": "std::std::is_floating_point", "type": "cpp", "path": "cpp\\types\\is_floating_point.html", "desc": "std::std::is_floating_point"}, {"name": "std::std::is_function", "type": "cpp", "path": "cpp\\types\\is_function.html", "desc": "std::std::is_function"}, {"name": "std::std::is_fundamental", "type": "cpp", "path": "cpp\\types\\is_fundamental.html", "desc": "std::std::is_fundamental"}, {"name": "std::std::is_implicit_lifetime", "type": "cpp", "path": "cpp\\types\\is_implicit_lifetime.html", "desc": "std::std::is_implicit_lifetime"}, {"name": "std::std::is_integral", "type": "cpp", "path": "cpp\\types\\is_integral.html", "desc": "std::std::is_integral"}, {"name": "std:: std:: std:: std::std::is_invocable, std::is_invocable_r, std::is_nothrow_invocable, std::is_nothrow_invocable_r", "type": "cpp", "path": "cpp\\types\\is_invocable.html", "desc": "std:: std:: std:: std::std::is_invocable, std::is_invocable_r, std::is_nothrow_invocable, std::is_nothrow_invocable_r"}, {"name": "std::std::is_layout_compatible", "type": "cpp", "path": "cpp\\types\\is_layout_compatible.html", "desc": "std::std::is_layout_compatible"}, {"name": "std::std::is_literal_type", "type": "cpp", "path": "cpp\\types\\is_literal_type.html", "desc": "std::std::is_literal_type"}, {"name": "std::std::is_lvalue_reference", "type": "cpp", "path": "cpp\\types\\is_lvalue_reference.html", "desc": "std::std::is_lvalue_reference"}, {"name": "std::std::is_member_function_pointer", "type": "cpp", "path": "cpp\\types\\is_member_function_pointer.html", "desc": "std::std::is_member_function_pointer"}, {"name": "std::std::is_member_object_pointer", "type": "cpp", "path": "cpp\\types\\is_member_object_pointer.html", "desc": "std::std::is_member_object_pointer"}, {"name": "std::std::is_member_pointer", "type": "cpp", "path": "cpp\\types\\is_member_pointer.html", "desc": "std::std::is_member_pointer"}, {"name": "std:: std:: std::std::is_move_assignable, std::is_trivially_move_assignable, std::is_nothrow_move_assignable", "type": "cpp", "path": "cpp\\types\\is_move_assignable.html", "desc": "std:: std:: std::std::is_move_assignable, std::is_trivially_move_assignable, std::is_nothrow_move_assignable"}, {"name": "std:: std:: std::std::is_move_constructible, std::is_trivially_move_constructible, std::is_nothrow_move_constructible", "type": "cpp", "path": "cpp\\types\\is_move_constructible.html", "desc": "std:: std:: std::std::is_move_constructible, std::is_trivially_move_constructible, std::is_nothrow_move_constructible"}, {"name": "std::std::is_null_pointer", "type": "cpp", "path": "cpp\\types\\is_null_pointer.html", "desc": "std::std::is_null_pointer"}, {"name": "std::std::is_object", "type": "cpp", "path": "cpp\\types\\is_object.html", "desc": "std::std::is_object"}, {"name": "std::std::is_pod", "type": "cpp", "path": "cpp\\types\\is_pod.html", "desc": "std::std::is_pod"}, {"name": "std::std::is_pointer", "type": "cpp", "path": "cpp\\types\\is_pointer.html", "desc": "std::std::is_pointer"}, {"name": "std::std::is_pointer_interconvertible_base_of", "type": "cpp", "path": "cpp\\types\\is_pointer_interconvertible_base_of.html", "desc": "std::std::is_pointer_interconvertible_base_of"}, {"name": "std::std::is_pointer_interconvertible_with_class", "type": "cpp", "path": "cpp\\types\\is_pointer_interconvertible_with_class.html", "desc": "std::std::is_pointer_interconvertible_with_class"}, {"name": "std::std::is_polymorphic", "type": "cpp", "path": "cpp\\types\\is_polymorphic.html", "desc": "std::std::is_polymorphic"}, {"name": "std::std::is_reference", "type": "cpp", "path": "cpp\\types\\is_reference.html", "desc": "std::std::is_reference"}, {"name": "std::std::is_rvalue_reference", "type": "cpp", "path": "cpp\\types\\is_rvalue_reference.html", "desc": "std::std::is_rvalue_reference"}, {"name": "std::std::is_same", "type": "cpp", "path": "cpp\\types\\is_same.html", "desc": "std::std::is_same"}, {"name": "std::std::is_scalar", "type": "cpp", "path": "cpp\\types\\is_scalar.html", "desc": "std::std::is_scalar"}, {"name": "std::std::is_scoped_enum", "type": "cpp", "path": "cpp\\types\\is_scoped_enum.html", "desc": "std::std::is_scoped_enum"}, {"name": "std::std::is_signed", "type": "cpp", "path": "cpp\\types\\is_signed.html", "desc": "std::std::is_signed"}, {"name": "std::std::is_standard_layout", "type": "cpp", "path": "cpp\\types\\is_standard_layout.html", "desc": "std::std::is_standard_layout"}, {"name": "std:: std:: std:: std::std::is_swappable_with, std::is_swappable, std::is_nothrow_swappable_with, std::is_nothrow_swappable", "type": "cpp", "path": "cpp\\types\\is_swappable.html", "desc": "std:: std:: std:: std::std::is_swappable_with, std::is_swappable, std::is_nothrow_swappable_with, std::is_nothrow_swappable"}, {"name": "std::std::is_trivial", "type": "cpp", "path": "cpp\\types\\is_trivial.html", "desc": "std::std::is_trivial"}, {"name": "std::std::is_trivially_copyable", "type": "cpp", "path": "cpp\\types\\is_trivially_copyable.html", "desc": "std::std::is_trivially_copyable"}, {"name": "std::std::is_unbounded_array", "type": "cpp", "path": "cpp\\types\\is_unbounded_array.html", "desc": "std::std::is_unbounded_array"}, {"name": "std::std::is_union", "type": "cpp", "path": "cpp\\types\\is_union.html", "desc": "std::std::is_union"}, {"name": "std::std::is_unsigned", "type": "cpp", "path": "cpp\\types\\is_unsigned.html", "desc": "std::std::is_unsigned"}, {"name": "std::std::is_void", "type": "cpp", "path": "cpp\\types\\is_void.html", "desc": "std::std::is_void"}, {"name": "std::std::is_volatile", "type": "cpp", "path": "cpp\\types\\is_volatile.html", "desc": "std::std::is_volatile"}, {"name": "std::std::is_within_lifetime", "type": "cpp", "path": "cpp\\types\\is_within_lifetime.html", "desc": "std::std::is_within_lifetime"}, {"name": "std::std::make_signed", "type": "cpp", "path": "cpp\\types\\make_signed.html", "desc": "std::std::make_signed"}, {"name": "std::std::make_unsigned", "type": "cpp", "path": "cpp\\types\\make_unsigned.html", "desc": "std::std::make_unsigned"}, {"name": "std::std::max_align_t", "type": "cpp", "path": "cpp\\types\\max_align_t.html", "desc": "std::std::max_align_t"}, {"name": "std::std::negation", "type": "cpp", "path": "cpp\\types\\negation.html", "desc": "std::std::negation"}, {"name": "NULL", "type": "cpp", "path": "cpp\\types\\NULL.html", "desc": "NULL"}, {"name": "std::std::nullptr_t", "type": "cpp", "path": "cpp\\types\\nullptr_t.html", "desc": "std::std::nullptr_t"}, {"name": "std::std::numeric_limits", "type": "cpp", "path": "cpp\\types\\numeric_limits.html", "desc": "std::std::numeric_limits"}, {"name": "offsetof", "type": "cpp", "path": "cpp\\types\\offsetof.html", "desc": "offsetof"}, {"name": "std::std::ptrdiff_t", "type": "cpp", "path": "cpp\\types\\ptrdiff_t.html", "desc": "std::std::ptrdiff_t"}, {"name": "std::std::rank", "type": "cpp", "path": "cpp\\types\\rank.html", "desc": "std::std::rank"}, {"name": "std::std::reference_constructs_from_temporary", "type": "cpp", "path": "cpp\\types\\reference_constructs_from_temporary.html", "desc": "std::std::reference_constructs_from_temporary"}, {"name": "std::std::reference_converts_from_temporary", "type": "cpp", "path": "cpp\\types\\reference_converts_from_temporary.html", "desc": "std::std::reference_converts_from_temporary"}, {"name": "std::std::remove_all_extents", "type": "cpp", "path": "cpp\\types\\remove_all_extents.html", "desc": "std::std::remove_all_extents"}, {"name": "std:: std:: std::std::remove_cv, std::remove_const, std::remove_volatile", "type": "cpp", "path": "cpp\\types\\remove_cv.html", "desc": "std:: std:: std::std::remove_cv, std::remove_const, std::remove_volatile"}, {"name": "std::std::remove_cvref", "type": "cpp", "path": "cpp\\types\\remove_cvref.html", "desc": "std::std::remove_cvref"}, {"name": "std::std::remove_extent", "type": "cpp", "path": "cpp\\types\\remove_extent.html", "desc": "std::std::remove_extent"}, {"name": "std::std::remove_pointer", "type": "cpp", "path": "cpp\\types\\remove_pointer.html", "desc": "std::std::remove_pointer"}, {"name": "std::std::remove_reference", "type": "cpp", "path": "cpp\\types\\remove_reference.html", "desc": "std::std::remove_reference"}, {"name": "std:: std::std::result_of, std::invoke_result", "type": "cpp", "path": "cpp\\types\\result_of.html", "desc": "std:: std::std::result_of, std::invoke_result"}, {"name": "std::std::size_t", "type": "cpp", "path": "cpp\\types\\size_t.html", "desc": "std::std::size_t"}, {"name": "std::std::type_identity", "type": "cpp", "path": "cpp\\types\\type_identity.html", "desc": "std::std::type_identity"}, {"name": "std::std::type_index", "type": "cpp", "path": "cpp\\types\\type_index.html", "desc": "std::std::type_index"}, {"name": "std::std::type_info", "type": "cpp", "path": "cpp\\types\\type_info.html", "desc": "std::std::type_info"}, {"name": "std::std::underlying_type", "type": "cpp", "path": "cpp\\types\\underlying_type.html", "desc": "std::std::underlying_type"}, {"name": "std::std::void_t", "type": "cpp", "path": "cpp\\types\\void_t.html", "desc": "std::std::void_t"}, {"name": "FLT_EVAL_METHOD", "type": "cpp", "path": "cpp\\types\\climits\\FLT_EVAL_METHOD.html", "desc": "FLT_EVAL_METHOD"}, {"name": "FLT_ROUNDS", "type": "cpp", "path": "cpp\\types\\climits\\FLT_ROUNDS.html", "desc": "FLT_ROUNDS"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::denorm_min", "type": "cpp", "path": "cpp\\types\\numeric_limits\\denorm_min.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::denorm_min"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::digits", "type": "cpp", "path": "cpp\\types\\numeric_limits\\digits.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::digits"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::digits10", "type": "cpp", "path": "cpp\\types\\numeric_limits\\digits10.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::digits10"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::epsilon", "type": "cpp", "path": "cpp\\types\\numeric_limits\\epsilon.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::epsilon"}, {"name": "std::std::float_denorm_style", "type": "cpp", "path": "cpp\\types\\numeric_limits\\float_denorm_style.html", "desc": "std::std::float_denorm_style"}, {"name": "std::std::float_round_style", "type": "cpp", "path": "cpp\\types\\numeric_limits\\float_round_style.html", "desc": "std::std::float_round_style"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::has_denorm", "type": "cpp", "path": "cpp\\types\\numeric_limits\\has_denorm.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::has_denorm"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::has_denorm_loss", "type": "cpp", "path": "cpp\\types\\numeric_limits\\has_denorm_loss.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::has_denorm_loss"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::has_infinity", "type": "cpp", "path": "cpp\\types\\numeric_limits\\has_infinity.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::has_infinity"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::has_quiet_NaN", "type": "cpp", "path": "cpp\\types\\numeric_limits\\has_quiet_NaN.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::has_quiet_NaN"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::has_signaling_NaN", "type": "cpp", "path": "cpp\\types\\numeric_limits\\has_signaling_NaN.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::has_signaling_NaN"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::infinity", "type": "cpp", "path": "cpp\\types\\numeric_limits\\infinity.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::infinity"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::is_bounded", "type": "cpp", "path": "cpp\\types\\numeric_limits\\is_bounded.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::is_bounded"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::is_exact", "type": "cpp", "path": "cpp\\types\\numeric_limits\\is_exact.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::is_exact"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::is_iec559", "type": "cpp", "path": "cpp\\types\\numeric_limits\\is_iec559.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::is_iec559"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::is_integer", "type": "cpp", "path": "cpp\\types\\numeric_limits\\is_integer.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::is_integer"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::is_modulo", "type": "cpp", "path": "cpp\\types\\numeric_limits\\is_modulo.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::is_modulo"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::is_signed", "type": "cpp", "path": "cpp\\types\\numeric_limits\\is_signed.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::is_signed"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::is_specialized", "type": "cpp", "path": "cpp\\types\\numeric_limits\\is_specialized.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::is_specialized"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::lowest", "type": "cpp", "path": "cpp\\types\\numeric_limits\\lowest.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::lowest"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::max", "type": "cpp", "path": "cpp\\types\\numeric_limits\\max.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::max"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::max_digits10", "type": "cpp", "path": "cpp\\types\\numeric_limits\\max_digits10.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::max_digits10"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::max_exponent", "type": "cpp", "path": "cpp\\types\\numeric_limits\\max_exponent.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::max_exponent"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::max_exponent10", "type": "cpp", "path": "cpp\\types\\numeric_limits\\max_exponent10.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::max_exponent10"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::min", "type": "cpp", "path": "cpp\\types\\numeric_limits\\min.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::min"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::min_exponent", "type": "cpp", "path": "cpp\\types\\numeric_limits\\min_exponent.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::min_exponent"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::min_exponent10", "type": "cpp", "path": "cpp\\types\\numeric_limits\\min_exponent10.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::min_exponent10"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::quiet_NaN", "type": "cpp", "path": "cpp\\types\\numeric_limits\\quiet_NaN.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::quiet_NaN"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::radix", "type": "cpp", "path": "cpp\\types\\numeric_limits\\radix.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::radix"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::round_error", "type": "cpp", "path": "cpp\\types\\numeric_limits\\round_error.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::round_error"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::round_style", "type": "cpp", "path": "cpp\\types\\numeric_limits\\round_style.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::round_style"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::signaling_NaN", "type": "cpp", "path": "cpp\\types\\numeric_limits\\signaling_NaN.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::signaling_NaN"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::tinyness_before", "type": "cpp", "path": "cpp\\types\\numeric_limits\\tinyness_before.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::tinyness_before"}, {"name": "std::numeric_limits<T>::std::numeric_limits<T>::traps", "type": "cpp", "path": "cpp\\types\\numeric_limits\\traps.html", "desc": "std::numeric_limits<T>::std::numeric_limits<T>::traps"}, {"name": "std:: <std::type_index>std::hash<std::type_index>", "type": "cpp", "path": "cpp\\types\\type_index\\hash.html", "desc": "std:: <std::type_index>std::hash<std::type_index>"}, {"name": "std::type_index::std::type_index::hash_code", "type": "cpp", "path": "cpp\\types\\type_index\\hash_code.html", "desc": "std::type_index::std::type_index::hash_code"}, {"name": "std::type_index::std::type_index::name", "type": "cpp", "path": "cpp\\types\\type_index\\name.html", "desc": "std::type_index::std::type_index::name"}, {"name": "std::type_index::std::type_index::operator==,!=,<,<=,>,>=,<=>", "type": "cpp", "path": "cpp\\types\\type_index\\operator_cmp.html", "desc": "std::type_index::std::type_index::operator==,!=,<,<=,>,>=,<=>"}, {"name": "std::type_index::std::type_index::type_index", "type": "cpp", "path": "cpp\\types\\type_index\\type_index.html", "desc": "std::type_index::std::type_index::type_index"}, {"name": "std::type_info::std::type_info::before", "type": "cpp", "path": "cpp\\types\\type_info\\before.html", "desc": "std::type_info::std::type_info::before"}, {"name": "std::type_info::std::type_info::hash_code", "type": "cpp", "path": "cpp\\types\\type_info\\hash_code.html", "desc": "std::type_info::std::type_info::hash_code"}, {"name": "std::type_info::std::type_info::name", "type": "cpp", "path": "cpp\\types\\type_info\\name.html", "desc": "std::type_info::std::type_info::name"}, {"name": "std::type_info:: std::type_info::std::type_info::operator==, std::type_info::operator!=", "type": "cpp", "path": "cpp\\types\\type_info\\operator_cmp.html", "desc": "std::type_info:: std::type_info::std::type_info::operator==, std::type_info::operator!="}, {"name": "std::type_info::std::type_info::~type_info", "type": "cpp", "path": "cpp\\types\\type_info\\~type_info.html", "desc": "std::type_info::std::type_info::~type_info"}, {"name": "std::std::any", "type": "cpp", "path": "cpp\\utility\\any.html", "desc": "std::std::any"}, {"name": "std::std::apply", "type": "cpp", "path": "cpp\\utility\\apply.html", "desc": "std::std::apply"}, {"name": "std::std::as_const", "type": "cpp", "path": "cpp\\utility\\as_const.html", "desc": "std::std::as_const"}, {"name": "std::std::basic_stacktrace", "type": "cpp", "path": "cpp\\utility\\basic_stacktrace.html", "desc": "std::std::basic_stacktrace"}, {"name": "std::std::bitset", "type": "cpp", "path": "cpp\\utility\\bitset.html", "desc": "std::std::bitset"}, {"name": "std::std::chars_format", "type": "cpp", "path": "cpp\\utility\\chars_format.html", "desc": "std::std::chars_format"}, {"name": "std::std::declval", "type": "cpp", "path": "cpp\\utility\\declval.html", "desc": "std::std::declval"}, {"name": "std::std::exchange", "type": "cpp", "path": "cpp\\utility\\exchange.html", "desc": "std::std::exchange"}, {"name": "std::std::expected", "type": "cpp", "path": "cpp\\utility\\expected.html", "desc": "std::std::expected"}, {"name": "(C++20)\u5e93\u7279\u6027\u6d4b\u8bd5\u5b8f (C++20)", "type": "cpp", "path": "cpp\\utility\\feature_test.html", "desc": "(C++20)\u5e93\u7279\u6027\u6d4b\u8bd5\u5b8f (C++20)"}, {"name": "(C++20)\u683c\u5f0f\u5316\u5e93 (C++20)", "type": "cpp", "path": "cpp\\utility\\format.html", "desc": "(C++20)\u683c\u5f0f\u5316\u5e93 (C++20)"}, {"name": "std::std::forward", "type": "cpp", "path": "cpp\\utility\\forward.html", "desc": "std::std::forward"}, {"name": "std::std::forward_like", "type": "cpp", "path": "cpp\\utility\\forward_like.html", "desc": "std::std::forward_like"}, {"name": "std::std::from_chars", "type": "cpp", "path": "cpp\\utility\\from_chars.html", "desc": "std::std::from_chars"}, {"name": "std::std::from_chars_result", "type": "cpp", "path": "cpp\\utility\\from_chars_result.html", "desc": "std::std::from_chars_result"}, {"name": "\u51fd\u6570\u5bf9\u8c61", "type": "cpp", "path": "cpp\\utility\\functional.html", "desc": "\u51fd\u6570\u5bf9\u8c61"}, {"name": "std::std::hash", "type": "cpp", "path": "cpp\\utility\\hash.html", "desc": "std::std::hash"}, {"name": "std::std::initializer_list", "type": "cpp", "path": "cpp\\utility\\initializer_list.html", "desc": "std::std::initializer_list"}, {"name": "std::std::cmp_equal, cmp_not_equal, cmp_less, cmp_greater, cmp_less_equal, cmp_greater_equal", "type": "cpp", "path": "cpp\\utility\\intcmp.html", "desc": "std::std::cmp_equal, cmp_not_equal, cmp_less, cmp_greater, cmp_less_equal, cmp_greater_equal"}, {"name": "std::std::integer_sequence", "type": "cpp", "path": "cpp\\utility\\integer_sequence.html", "desc": "std::std::integer_sequence"}, {"name": "std:: std:: std:: std:: std:: std::std::in_place, std::in_place_type, std::in_place_index, std::in_place_t, std::in_place_type_t, std::in_place_index_t", "type": "cpp", "path": "cpp\\utility\\in_place.html", "desc": "std:: std:: std:: std:: std:: std::std::in_place, std::in_place_type, std::in_place_index, std::in_place_t, std::in_place_type_t, std::in_place_index_t"}, {"name": "std::std::in_range", "type": "cpp", "path": "cpp\\utility\\in_range.html", "desc": "std::std::in_range"}, {"name": "std::std::launder", "type": "cpp", "path": "cpp\\utility\\launder.html", "desc": "std::std::launder"}, {"name": "std::std::make_from_tuple", "type": "cpp", "path": "cpp\\utility\\make_from_tuple.html", "desc": "std::std::make_from_tuple"}, {"name": "std::std::move", "type": "cpp", "path": "cpp\\utility\\move.html", "desc": "std::std::move"}, {"name": "std::std::move_if_noexcept", "type": "cpp", "path": "cpp\\utility\\move_if_noexcept.html", "desc": "std::std::move_if_noexcept"}, {"name": "std::std::optional", "type": "cpp", "path": "cpp\\utility\\optional.html", "desc": "std::std::optional"}, {"name": "std::std::pair", "type": "cpp", "path": "cpp\\utility\\pair.html", "desc": "std::std::pair"}, {"name": "std::std::piecewise_construct", "type": "cpp", "path": "cpp\\utility\\piecewise_construct.html", "desc": "std::std::piecewise_construct"}, {"name": "std::std::piecewise_construct_t", "type": "cpp", "path": "cpp\\utility\\piecewise_construct_t.html", "desc": "std::std::piecewise_construct_t"}, {"name": "\u7a0b\u5e8f\u652f\u6301\u5de5\u5177", "type": "cpp", "path": "cpp\\utility\\program.html", "desc": "\u7a0b\u5e8f\u652f\u6301\u5de5\u5177"}, {"name": "std::std::source_location", "type": "cpp", "path": "cpp\\utility\\source_location.html", "desc": "std::std::source_location"}, {"name": "std::std::stacktrace_entry", "type": "cpp", "path": "cpp\\utility\\stacktrace_entry.html", "desc": "std::std::stacktrace_entry"}, {"name": "std::std::to_chars", "type": "cpp", "path": "cpp\\utility\\to_chars.html", "desc": "std::std::to_chars"}, {"name": "std::std::to_chars_result", "type": "cpp", "path": "cpp\\utility\\to_chars_result.html", "desc": "std::std::to_chars_result"}, {"name": "std::std::to_underlying", "type": "cpp", "path": "cpp\\utility\\to_underlying.html", "desc": "std::std::to_underlying"}, {"name": "std::std::tuple", "type": "cpp", "path": "cpp\\utility\\tuple.html", "desc": "std::std::tuple"}, {"name": "std::std::tuple_element", "type": "cpp", "path": "cpp\\utility\\tuple_element.html", "desc": "std::std::tuple_element"}, {"name": "std::std::tuple_size", "type": "cpp", "path": "cpp\\utility\\tuple_size.html", "desc": "std::std::tuple_size"}, {"name": "std::std::unreachable", "type": "cpp", "path": "cpp\\utility\\unreachable.html", "desc": "std::std::unreachable"}, {"name": "\u53d8\u53c2\u6570\u51fd\u6570", "type": "cpp", "path": "cpp\\utility\\variadic.html", "desc": "\u53d8\u53c2\u6570\u51fd\u6570"}, {"name": "std::std::variant", "type": "cpp", "path": "cpp\\utility\\variant.html", "desc": "std::std::variant"}, {"name": "std::any::std::any::any", "type": "cpp", "path": "cpp\\utility\\any\\any.html", "desc": "std::any::std::any::any"}, {"name": "std::std::any_cast", "type": "cpp", "path": "cpp\\utility\\any\\any_cast.html", "desc": "std::std::any_cast"}, {"name": "std::std::bad_any_cast", "type": "cpp", "path": "cpp\\utility\\any\\bad_any_cast.html", "desc": "std::std::bad_any_cast"}, {"name": "std::any::std::any::emplace", "type": "cpp", "path": "cpp\\utility\\any\\emplace.html", "desc": "std::any::std::any::emplace"}, {"name": "std::any::std::any::has_value", "type": "cpp", "path": "cpp\\utility\\any\\has_value.html", "desc": "std::any::std::any::has_value"}, {"name": "std::std::make_any", "type": "cpp", "path": "cpp\\utility\\any\\make_any.html", "desc": "std::std::make_any"}, {"name": "std::any::std::any::operator=", "type": "cpp", "path": "cpp\\utility\\any\\operator=.html", "desc": "std::any::std::any::operator="}, {"name": "std::any::std::any::reset", "type": "cpp", "path": "cpp\\utility\\any\\reset.html", "desc": "std::any::std::any::reset"}, {"name": "std::any::std::any::swap", "type": "cpp", "path": "cpp\\utility\\any\\swap.html", "desc": "std::any::std::any::swap"}, {"name": "std:: (std::any)std::swap(std::any)", "type": "cpp", "path": "cpp\\utility\\any\\swap2.html", "desc": "std:: (std::any)std::swap(std::any)"}, {"name": "std::any::std::any::type", "type": "cpp", "path": "cpp\\utility\\any\\type.html", "desc": "std::any::std::any::type"}, {"name": "std::any::std::any::~any", "type": "cpp", "path": "cpp\\utility\\any\\~any.html", "desc": "std::any::std::any::~any"}, {"name": "std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::at", "type": "cpp", "path": "cpp\\utility\\basic_stacktrace\\at.html", "desc": "std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::at"}, {"name": "std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::basic_stacktrace", "type": "cpp", "path": "cpp\\utility\\basic_stacktrace\\basic_stacktrace.html", "desc": "std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::basic_stacktrace"}, {"name": "std::basic_stacktrace<Allocator>:: std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::begin, std::basic_stacktrace<Allocator>::cbegin", "type": "cpp", "path": "cpp\\utility\\basic_stacktrace\\begin.html", "desc": "std::basic_stacktrace<Allocator>:: std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::begin, std::basic_stacktrace<Allocator>::cbegin"}, {"name": "std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::current", "type": "cpp", "path": "cpp\\utility\\basic_stacktrace\\current.html", "desc": "std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::current"}, {"name": "std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::empty", "type": "cpp", "path": "cpp\\utility\\basic_stacktrace\\empty.html", "desc": "std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::empty"}, {"name": "std::basic_stacktrace<Allocator>:: std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::end, std::basic_stacktrace<Allocator>::cend", "type": "cpp", "path": "cpp\\utility\\basic_stacktrace\\end.html", "desc": "std::basic_stacktrace<Allocator>:: std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::end, std::basic_stacktrace<Allocator>::cend"}, {"name": "std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::get_allocator", "type": "cpp", "path": "cpp\\utility\\basic_stacktrace\\get_allocator.html", "desc": "std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::get_allocator"}, {"name": "std::std::hash(std::basic_stacktrace)", "type": "cpp", "path": "cpp\\utility\\basic_stacktrace\\hash.html", "desc": "std::std::hash(std::basic_stacktrace)"}, {"name": "std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::max_size", "type": "cpp", "path": "cpp\\utility\\basic_stacktrace\\max_size.html", "desc": "std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::max_size"}, {"name": "std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::operator=", "type": "cpp", "path": "cpp\\utility\\basic_stacktrace\\operator=.html", "desc": "std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::operator="}, {"name": "std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::operator[]", "type": "cpp", "path": "cpp\\utility\\basic_stacktrace\\operator_at.html", "desc": "std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::operator[]"}, {"name": "operator==, operator<=>(std::basic_stacktrace)", "type": "cpp", "path": "cpp\\utility\\basic_stacktrace\\operator_cmp.html", "desc": "operator==, operator<=>(std::basic_stacktrace)"}, {"name": "std::std::operator<<(std::basic_stacktrace)", "type": "cpp", "path": "cpp\\utility\\basic_stacktrace\\operator_ltlt.html", "desc": "std::std::operator<<(std::basic_stacktrace)"}, {"name": "std::basic_stacktrace<Allocator>:: std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::rbegin, std::basic_stacktrace<Allocator>::crbegin", "type": "cpp", "path": "cpp\\utility\\basic_stacktrace\\rbegin.html", "desc": "std::basic_stacktrace<Allocator>:: std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::rbegin, std::basic_stacktrace<Allocator>::crbegin"}, {"name": "std::basic_stacktrace<Allocator>:: std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::rend, std::basic_stacktrace<Allocator>::crend", "type": "cpp", "path": "cpp\\utility\\basic_stacktrace\\rend.html", "desc": "std::basic_stacktrace<Allocator>:: std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::rend, std::basic_stacktrace<Allocator>::crend"}, {"name": "std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::size", "type": "cpp", "path": "cpp\\utility\\basic_stacktrace\\size.html", "desc": "std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::size"}, {"name": "std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::swap", "type": "cpp", "path": "cpp\\utility\\basic_stacktrace\\swap.html", "desc": "std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::swap"}, {"name": "std::std::swap(std::basic_stacktrace)", "type": "cpp", "path": "cpp\\utility\\basic_stacktrace\\swap2.html", "desc": "std::std::swap(std::basic_stacktrace)"}, {"name": "std::std::to_string", "type": "cpp", "path": "cpp\\utility\\basic_stacktrace\\to_string.html", "desc": "std::std::to_string"}, {"name": "std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::~basic_stacktrace", "type": "cpp", "path": "cpp\\utility\\basic_stacktrace\\~basic_stacktrace.html", "desc": "std::basic_stacktrace<Allocator>::std::basic_stacktrace<Allocator>::~basic_stacktrace"}, {"name": "std::bitset<N>:: std::bitset<N>:: std::bitset<N>::std::bitset<N>::all, std::bitset<N>::any, std::bitset<N>::none", "type": "cpp", "path": "cpp\\utility\\bitset\\all_any_none.html", "desc": "std::bitset<N>:: std::bitset<N>:: std::bitset<N>::std::bitset<N>::all, std::bitset<N>::any, std::bitset<N>::none"}, {"name": "std::bitset<N>::std::bitset<N>::bitset", "type": "cpp", "path": "cpp\\utility\\bitset\\bitset.html", "desc": "std::bitset<N>::std::bitset<N>::bitset"}, {"name": "std::bitset<N>::std::bitset<N>::count", "type": "cpp", "path": "cpp\\utility\\bitset\\count.html", "desc": "std::bitset<N>::std::bitset<N>::count"}, {"name": "std::bitset<N>::std::bitset<N>::flip", "type": "cpp", "path": "cpp\\utility\\bitset\\flip.html", "desc": "std::bitset<N>::std::bitset<N>::flip"}, {"name": "std::std::hash(std::bitset)", "type": "cpp", "path": "cpp\\utility\\bitset\\hash.html", "desc": "std::std::hash(std::bitset)"}, {"name": "std::bitset<N>::std::bitset<N>::operator[]", "type": "cpp", "path": "cpp\\utility\\bitset\\operator_at.html", "desc": "std::bitset<N>::std::bitset<N>::operator[]"}, {"name": "std::bitset<N>:: std::bitset<N>::std::bitset<N>::operator==, std::bitset<N>::operator!=", "type": "cpp", "path": "cpp\\utility\\bitset\\operator_cmp.html", "desc": "std::bitset<N>:: std::bitset<N>::std::bitset<N>::operator==, std::bitset<N>::operator!="}, {"name": "std::bitset<N>::std::bitset<N>::operator&=,|=,^=,~", "type": "cpp", "path": "cpp\\utility\\bitset\\operator_logic.html", "desc": "std::bitset<N>::std::bitset<N>::operator&=,|=,^=,~"}, {"name": "operator&,|,^(std::bitset)", "type": "cpp", "path": "cpp\\utility\\bitset\\operator_logic2.html", "desc": "operator&,|,^(std::bitset)"}, {"name": "std::bitset<N>::std::bitset<N>::operator<<,<<=,>>,>>=", "type": "cpp", "path": "cpp\\utility\\bitset\\operator_ltltgtgt.html", "desc": "std::bitset<N>::std::bitset<N>::operator<<,<<=,>>,>>="}, {"name": "operator<<,>>(std::bitset)", "type": "cpp", "path": "cpp\\utility\\bitset\\operator_ltltgtgt2.html", "desc": "operator<<,>>(std::bitset)"}, {"name": "std::bitset<N>::std::bitset<N>::reference", "type": "cpp", "path": "cpp\\utility\\bitset\\reference.html", "desc": "std::bitset<N>::std::bitset<N>::reference"}, {"name": "std::bitset<N>::std::bitset<N>::reset", "type": "cpp", "path": "cpp\\utility\\bitset\\reset.html", "desc": "std::bitset<N>::std::bitset<N>::reset"}, {"name": "std::bitset<N>::std::bitset<N>::set", "type": "cpp", "path": "cpp\\utility\\bitset\\set.html", "desc": "std::bitset<N>::std::bitset<N>::set"}, {"name": "std::bitset<N>::std::bitset<N>::size", "type": "cpp", "path": "cpp\\utility\\bitset\\size.html", "desc": "std::bitset<N>::std::bitset<N>::size"}, {"name": "std::bitset<N>::std::bitset<N>::test", "type": "cpp", "path": "cpp\\utility\\bitset\\test.html", "desc": "std::bitset<N>::std::bitset<N>::test"}, {"name": "std::bitset<N>::std::bitset<N>::to_string", "type": "cpp", "path": "cpp\\utility\\bitset\\to_string.html", "desc": "std::bitset<N>::std::bitset<N>::to_string"}, {"name": "std::bitset<N>::std::bitset<N>::to_ullong", "type": "cpp", "path": "cpp\\utility\\bitset\\to_ullong.html", "desc": "std::bitset<N>::std::bitset<N>::to_ullong"}, {"name": "std::bitset<N>::std::bitset<N>::to_ulong", "type": "cpp", "path": "cpp\\utility\\bitset\\to_ulong.html", "desc": "std::bitset<N>::std::bitset<N>::to_ulong"}, {"name": "std::std::common_comparison_category", "type": "cpp", "path": "cpp\\utility\\compare\\common_comparison_category.html", "desc": "std::std::common_comparison_category"}, {"name": "std::std::compare_partial_order_fallback", "type": "cpp", "path": "cpp\\utility\\compare\\compare_partial_order_fallback.html", "desc": "std::std::compare_partial_order_fallback"}, {"name": "std::std::compare_strong_order_fallback", "type": "cpp", "path": "cpp\\utility\\compare\\compare_strong_order_fallback.html", "desc": "std::std::compare_strong_order_fallback"}, {"name": "std::std::compare_three_way", "type": "cpp", "path": "cpp\\utility\\compare\\compare_three_way.html", "desc": "std::std::compare_three_way"}, {"name": "std::std::compare_three_way_result", "type": "cpp", "path": "cpp\\utility\\compare\\compare_three_way_result.html", "desc": "std::std::compare_three_way_result"}, {"name": "std::std::compare_weak_order_fallback", "type": "cpp", "path": "cpp\\utility\\compare\\compare_weak_order_fallback.html", "desc": "std::std::compare_weak_order_fallback"}, {"name": "std:: std:: std:: std:: std:: std::std::is_eq, std::is_neq, std::is_lt, std::is_gt, std::is_lteq, std::is_gteq", "type": "cpp", "path": "cpp\\utility\\compare\\named_comparison_functions.html", "desc": "std:: std:: std:: std:: std:: std::std::is_eq, std::is_neq, std::is_lt, std::is_gt, std::is_lteq, std::is_gteq"}, {"name": "std::std::partial_order", "type": "cpp", "path": "cpp\\utility\\compare\\partial_order.html", "desc": "std::std::partial_order"}, {"name": "std::std::partial_ordering", "type": "cpp", "path": "cpp\\utility\\compare\\partial_ordering.html", "desc": "std::std::partial_ordering"}, {"name": "std::std::strong_order", "type": "cpp", "path": "cpp\\utility\\compare\\strong_order.html", "desc": "std::std::strong_order"}, {"name": "std::std::strong_ordering", "type": "cpp", "path": "cpp\\utility\\compare\\strong_ordering.html", "desc": "std::std::strong_ordering"}, {"name": "std:: std::std::three_way_comparable, std::three_way_comparable_with", "type": "cpp", "path": "cpp\\utility\\compare\\three_way_comparable.html", "desc": "std:: std::std::three_way_comparable, std::three_way_comparable_with"}, {"name": "std::std::weak_order", "type": "cpp", "path": "cpp\\utility\\compare\\weak_order.html", "desc": "std::std::weak_order"}, {"name": "std::std::weak_ordering", "type": "cpp", "path": "cpp\\utility\\compare\\weak_ordering.html", "desc": "std::std::weak_ordering"}, {"name": "std::expected<T,E>::std::expected<T,E>::and_then", "type": "cpp", "path": "cpp\\utility\\expected\\and_then.html", "desc": "std::expected<T,E>::std::expected<T,E>::and_then"}, {"name": "std::std::bad_expected_access", "type": "cpp", "path": "cpp\\utility\\expected\\bad_expected_access.html", "desc": "std::std::bad_expected_access"}, {"name": "std::expected<T,E>::std::expected<T,E>::emplace", "type": "cpp", "path": "cpp\\utility\\expected\\emplace.html", "desc": "std::expected<T,E>::std::expected<T,E>::emplace"}, {"name": "std::expected<T,E>::std::expected<T,E>::error", "type": "cpp", "path": "cpp\\utility\\expected\\error.html", "desc": "std::expected<T,E>::std::expected<T,E>::error"}, {"name": "std::expected<T,E>::std::expected<T,E>::expected", "type": "cpp", "path": "cpp\\utility\\expected\\expected.html", "desc": "std::expected<T,E>::std::expected<T,E>::expected"}, {"name": "std::expected<T,E>:: std::expected<T,E>::std::expected<T,E>::operator->, std::expected<T,E>::operator*", "type": "cpp", "path": "cpp\\utility\\expected\\operator%2A.html", "desc": "std::expected<T,E>:: std::expected<T,E>::std::expected<T,E>::operator->, std::expected<T,E>::operator*"}, {"name": "std::expected<T,E>::std::expected<T,E>::operator=", "type": "cpp", "path": "cpp\\utility\\expected\\operator=.html", "desc": "std::expected<T,E>::std::expected<T,E>::operator="}, {"name": "std::expected<T,E>:: std::expected<T,E>::std::expected<T,E>::operator bool, std::expected<T,E>::has_value", "type": "cpp", "path": "cpp\\utility\\expected\\operator_bool.html", "desc": "std::expected<T,E>:: std::expected<T,E>::std::expected<T,E>::operator bool, std::expected<T,E>::has_value"}, {"name": "operator==(std::expected)", "type": "cpp", "path": "cpp\\utility\\expected\\operator_cmp.html", "desc": "operator==(std::expected)"}, {"name": "std::expected<T,E>::std::expected<T,E>::or_else", "type": "cpp", "path": "cpp\\utility\\expected\\or_else.html", "desc": "std::expected<T,E>::std::expected<T,E>::or_else"}, {"name": "std::expected<T,E>::std::expected<T,E>::swap", "type": "cpp", "path": "cpp\\utility\\expected\\swap.html", "desc": "std::expected<T,E>::std::expected<T,E>::swap"}, {"name": "swap(std::expected)", "type": "cpp", "path": "cpp\\utility\\expected\\swap2.html", "desc": "swap(std::expected)"}, {"name": "std::expected<T,E>::std::expected<T,E>::transform", "type": "cpp", "path": "cpp\\utility\\expected\\transform.html", "desc": "std::expected<T,E>::std::expected<T,E>::transform"}, {"name": "std::expected<T,E>::std::expected<T,E>::transform_error", "type": "cpp", "path": "cpp\\utility\\expected\\transform_error.html", "desc": "std::expected<T,E>::std::expected<T,E>::transform_error"}, {"name": "std::std::unexpected", "type": "cpp", "path": "cpp\\utility\\expected\\unexpected.html", "desc": "std::std::unexpected"}, {"name": "std:: std::std::unexpect_t, std::unexpect", "type": "cpp", "path": "cpp\\utility\\expected\\unexpect_t.html", "desc": "std:: std::std::unexpect_t, std::unexpect"}, {"name": "std::expected<T,E>::std::expected<T,E>::value", "type": "cpp", "path": "cpp\\utility\\expected\\value.html", "desc": "std::expected<T,E>::std::expected<T,E>::value"}, {"name": "std::expected<T,E>::std::expected<T,E>::value_or", "type": "cpp", "path": "cpp\\utility\\expected\\value_or.html", "desc": "std::expected<T,E>::std::expected<T,E>::value_or"}, {"name": "std::expected<T,E>::std::expected<T,E>::~expected", "type": "cpp", "path": "cpp\\utility\\expected\\~expected.html", "desc": "std::expected<T,E>::std::expected<T,E>::~expected"}, {"name": "std::std::basic_format_arg", "type": "cpp", "path": "cpp\\utility\\format\\basic_format_arg.html", "desc": "std::std::basic_format_arg"}, {"name": "std::std::basic_format_args", "type": "cpp", "path": "cpp\\utility\\format\\basic_format_args.html", "desc": "std::std::basic_format_args"}, {"name": "std::std::basic_format_context", "type": "cpp", "path": "cpp\\utility\\format\\basic_format_context.html", "desc": "std::std::basic_format_context"}, {"name": "std::std::basic_format_parse_context", "type": "cpp", "path": "cpp\\utility\\format\\basic_format_parse_context.html", "desc": "std::std::basic_format_parse_context"}, {"name": "std::std::format", "type": "cpp", "path": "cpp\\utility\\format\\format.html", "desc": "std::std::format"}, {"name": "std::std::formatted_size", "type": "cpp", "path": "cpp\\utility\\format\\formatted_size.html", "desc": "std::std::formatted_size"}, {"name": "std::std::formatter", "type": "cpp", "path": "cpp\\utility\\format\\formatter.html", "desc": "std::std::formatter"}, {"name": "std::std::format_error", "type": "cpp", "path": "cpp\\utility\\format\\format_error.html", "desc": "std::std::format_error"}, {"name": "std::std::format_to", "type": "cpp", "path": "cpp\\utility\\format\\format_to.html", "desc": "std::std::format_to"}, {"name": "std::std::format_to_n", "type": "cpp", "path": "cpp\\utility\\format\\format_to_n.html", "desc": "std::std::format_to_n"}, {"name": "std:: std::std::make_format_args, std::make_wformat_args", "type": "cpp", "path": "cpp\\utility\\format\\make_format_args.html", "desc": "std:: std::std::make_format_args, std::make_wformat_args"}, {"name": "std::std::vformat", "type": "cpp", "path": "cpp\\utility\\format\\vformat.html", "desc": "std::std::vformat"}, {"name": "std::std::vformat_to", "type": "cpp", "path": "cpp\\utility\\format\\vformat_to.html", "desc": "std::std::vformat_to"}, {"name": "std::std::visit_format_arg", "type": "cpp", "path": "cpp\\utility\\format\\visit_format_arg.html", "desc": "std::std::visit_format_arg"}, {"name": "std::basic_format_arg<Context>::std::basic_format_arg<Context>::handle", "type": "cpp", "path": "cpp\\utility\\format\\basic_format_arg\\handle.html", "desc": "std::basic_format_arg<Context>::std::basic_format_arg<Context>::handle"}, {"name": "std::std::bad_function_call", "type": "cpp", "path": "cpp\\utility\\functional\\bad_function_call.html", "desc": "std::std::bad_function_call"}, {"name": "std::std::binary_function", "type": "cpp", "path": "cpp\\utility\\functional\\binary_function.html", "desc": "std::std::binary_function"}, {"name": "std::std::binary_negate", "type": "cpp", "path": "cpp\\utility\\functional\\binary_negate.html", "desc": "std::std::binary_negate"}, {"name": "std::std::bind", "type": "cpp", "path": "cpp\\utility\\functional\\bind.html", "desc": "std::std::bind"}, {"name": "std:: std::std::bind1st, std::bind2nd", "type": "cpp", "path": "cpp\\utility\\functional\\bind12.html", "desc": "std:: std::std::bind1st, std::bind2nd"}, {"name": "std:: std::std::binder1st, std::binder2nd", "type": "cpp", "path": "cpp\\utility\\functional\\binder12.html", "desc": "std:: std::std::binder1st, std::binder2nd"}, {"name": "std:: std::std::bind_front, std::bind_back", "type": "cpp", "path": "cpp\\utility\\functional\\bind_front.html", "desc": "std:: std::std::bind_front, std::bind_back"}, {"name": "std::std::bit_and", "type": "cpp", "path": "cpp\\utility\\functional\\bit_and.html", "desc": "std::std::bit_and"}, {"name": "std::std::bit_and<void>", "type": "cpp", "path": "cpp\\utility\\functional\\bit_and_void.html", "desc": "std::std::bit_and<void>"}, {"name": "std::std::bit_not", "type": "cpp", "path": "cpp\\utility\\functional\\bit_not.html", "desc": "std::std::bit_not"}, {"name": "std::std::bit_not<void>", "type": "cpp", "path": "cpp\\utility\\functional\\bit_not_void.html", "desc": "std::std::bit_not<void>"}, {"name": "std::std::bit_or", "type": "cpp", "path": "cpp\\utility\\functional\\bit_or.html", "desc": "std::std::bit_or"}, {"name": "std::std::bit_or<void>", "type": "cpp", "path": "cpp\\utility\\functional\\bit_or_void.html", "desc": "std::std::bit_or<void>"}, {"name": "std::std::bit_xor", "type": "cpp", "path": "cpp\\utility\\functional\\bit_xor.html", "desc": "std::std::bit_xor"}, {"name": "std::std::bit_xor<void>", "type": "cpp", "path": "cpp\\utility\\functional\\bit_xor_void.html", "desc": "std::std::bit_xor<void>"}, {"name": "std::std::boyer_moore_horspool_searcher", "type": "cpp", "path": "cpp\\utility\\functional\\boyer_moore_horspool_searcher.html", "desc": "std::std::boyer_moore_horspool_searcher"}, {"name": "std::std::boyer_moore_searcher", "type": "cpp", "path": "cpp\\utility\\functional\\boyer_moore_searcher.html", "desc": "std::std::boyer_moore_searcher"}, {"name": "std::std::default_searcher", "type": "cpp", "path": "cpp\\utility\\functional\\default_searcher.html", "desc": "std::std::default_searcher"}, {"name": "std::std::divides", "type": "cpp", "path": "cpp\\utility\\functional\\divides.html", "desc": "std::std::divides"}, {"name": "std::std::divides<void>", "type": "cpp", "path": "cpp\\utility\\functional\\divides_void.html", "desc": "std::std::divides<void>"}, {"name": "std::std::equal_to", "type": "cpp", "path": "cpp\\utility\\functional\\equal_to.html", "desc": "std::std::equal_to"}, {"name": "std::std::equal_to<void>", "type": "cpp", "path": "cpp\\utility\\functional\\equal_to_void.html", "desc": "std::std::equal_to<void>"}, {"name": "std::std::function", "type": "cpp", "path": "cpp\\utility\\functional\\function.html", "desc": "std::std::function"}, {"name": "std::std::greater", "type": "cpp", "path": "cpp\\utility\\functional\\greater.html", "desc": "std::std::greater"}, {"name": "std::std::greater_equal", "type": "cpp", "path": "cpp\\utility\\functional\\greater_equal.html", "desc": "std::std::greater_equal"}, {"name": "std::std::greater_equal<void>", "type": "cpp", "path": "cpp\\utility\\functional\\greater_equal_void.html", "desc": "std::std::greater_equal<void>"}, {"name": "std::std::greater<void>", "type": "cpp", "path": "cpp\\utility\\functional\\greater_void.html", "desc": "std::std::greater<void>"}, {"name": "std::std::identity", "type": "cpp", "path": "cpp\\utility\\functional\\identity.html", "desc": "std::std::identity"}, {"name": "std:: std::std::invoke, std::invoke_r", "type": "cpp", "path": "cpp\\utility\\functional\\invoke.html", "desc": "std:: std::std::invoke, std::invoke_r"}, {"name": "std::std::is_bind_expression", "type": "cpp", "path": "cpp\\utility\\functional\\is_bind_expression.html", "desc": "std::std::is_bind_expression"}, {"name": "std::std::is_placeholder", "type": "cpp", "path": "cpp\\utility\\functional\\is_placeholder.html", "desc": "std::std::is_placeholder"}, {"name": "std::std::less", "type": "cpp", "path": "cpp\\utility\\functional\\less.html", "desc": "std::std::less"}, {"name": "std::std::less_equal", "type": "cpp", "path": "cpp\\utility\\functional\\less_equal.html", "desc": "std::std::less_equal"}, {"name": "std::std::less_equal<void>", "type": "cpp", "path": "cpp\\utility\\functional\\less_equal_void.html", "desc": "std::std::less_equal<void>"}, {"name": "std::std::less<void>", "type": "cpp", "path": "cpp\\utility\\functional\\less_void.html", "desc": "std::std::less<void>"}, {"name": "std::std::logical_and", "type": "cpp", "path": "cpp\\utility\\functional\\logical_and.html", "desc": "std::std::logical_and"}, {"name": "std::std::logical_and<void>", "type": "cpp", "path": "cpp\\utility\\functional\\logical_and_void.html", "desc": "std::std::logical_and<void>"}, {"name": "std::std::logical_not", "type": "cpp", "path": "cpp\\utility\\functional\\logical_not.html", "desc": "std::std::logical_not"}, {"name": "std::std::logical_not<void>", "type": "cpp", "path": "cpp\\utility\\functional\\logical_not_void.html", "desc": "std::std::logical_not<void>"}, {"name": "std::std::logical_or", "type": "cpp", "path": "cpp\\utility\\functional\\logical_or.html", "desc": "std::std::logical_or"}, {"name": "std::std::logical_or<void>", "type": "cpp", "path": "cpp\\utility\\functional\\logical_or_void.html", "desc": "std::std::logical_or<void>"}, {"name": "std::std::mem_fn", "type": "cpp", "path": "cpp\\utility\\functional\\mem_fn.html", "desc": "std::std::mem_fn"}, {"name": "std::std::mem_fun", "type": "cpp", "path": "cpp\\utility\\functional\\mem_fun.html", "desc": "std::std::mem_fun"}, {"name": "std::std::mem_fun_ref", "type": "cpp", "path": "cpp\\utility\\functional\\mem_fun_ref.html", "desc": "std::std::mem_fun_ref"}, {"name": "std:: std:: std:: std::std::mem_fun_ref_t, std::mem_fun1_ref_t, std::const_mem_fun_ref_t, std::const_mem_fun1_ref_t", "type": "cpp", "path": "cpp\\utility\\functional\\mem_fun_ref_t.html", "desc": "std:: std:: std:: std::std::mem_fun_ref_t, std::mem_fun1_ref_t, std::const_mem_fun_ref_t, std::const_mem_fun1_ref_t"}, {"name": "std:: std:: std:: std::std::mem_fun_t, std::mem_fun1_t, std::const_mem_fun_t, std::const_mem_fun1_t", "type": "cpp", "path": "cpp\\utility\\functional\\mem_fun_t.html", "desc": "std:: std:: std:: std::std::mem_fun_t, std::mem_fun1_t, std::const_mem_fun_t, std::const_mem_fun1_t"}, {"name": "std::std::minus", "type": "cpp", "path": "cpp\\utility\\functional\\minus.html", "desc": "std::std::minus"}, {"name": "std::std::minus<void>", "type": "cpp", "path": "cpp\\utility\\functional\\minus_void.html", "desc": "std::std::minus<void>"}, {"name": "std::std::modulus", "type": "cpp", "path": "cpp\\utility\\functional\\modulus.html", "desc": "std::std::modulus"}, {"name": "std::std::modulus<void>", "type": "cpp", "path": "cpp\\utility\\functional\\modulus_void.html", "desc": "std::std::modulus<void>"}, {"name": "std::std::move_only_function", "type": "cpp", "path": "cpp\\utility\\functional\\move_only_function.html", "desc": "std::std::move_only_function"}, {"name": "std::std::multiplies", "type": "cpp", "path": "cpp\\utility\\functional\\multiplies.html", "desc": "std::std::multiplies"}, {"name": "std::std::multiplies<void>", "type": "cpp", "path": "cpp\\utility\\functional\\multiplies_void.html", "desc": "std::std::multiplies<void>"}, {"name": "std::std::negate", "type": "cpp", "path": "cpp\\utility\\functional\\negate.html", "desc": "std::std::negate"}, {"name": "std::std::negate<void>", "type": "cpp", "path": "cpp\\utility\\functional\\negate_void.html", "desc": "std::std::negate<void>"}, {"name": "std::std::not1", "type": "cpp", "path": "cpp\\utility\\functional\\not1.html", "desc": "std::std::not1"}, {"name": "std::std::not2", "type": "cpp", "path": "cpp\\utility\\functional\\not2.html", "desc": "std::std::not2"}, {"name": "std::std::not_equal_to", "type": "cpp", "path": "cpp\\utility\\functional\\not_equal_to.html", "desc": "std::std::not_equal_to"}, {"name": "std::std::not_equal_to<void>", "type": "cpp", "path": "cpp\\utility\\functional\\not_equal_to_void.html", "desc": "std::std::not_equal_to<void>"}, {"name": "std::std::not_fn", "type": "cpp", "path": "cpp\\utility\\functional\\not_fn.html", "desc": "std::std::not_fn"}, {"name": "std::placeholders:: std::placeholders:: std::placeholders::std::placeholders::_1, std::placeholders::_2, ..., std::placeholders::_N", "type": "cpp", "path": "cpp\\utility\\functional\\placeholders.html", "desc": "std::placeholders:: std::placeholders:: std::placeholders::std::placeholders::_1, std::placeholders::_2, ..., std::placeholders::_N"}, {"name": "std::std::plus", "type": "cpp", "path": "cpp\\utility\\functional\\plus.html", "desc": "std::std::plus"}, {"name": "std::std::plus<void>", "type": "cpp", "path": "cpp\\utility\\functional\\plus_void.html", "desc": "std::std::plus<void>"}, {"name": "std::std::pointer_to_binary_function", "type": "cpp", "path": "cpp\\utility\\functional\\pointer_to_binary_function.html", "desc": "std::std::pointer_to_binary_function"}, {"name": "std::std::pointer_to_unary_function", "type": "cpp", "path": "cpp\\utility\\functional\\pointer_to_unary_function.html", "desc": "std::std::pointer_to_unary_function"}, {"name": "std::std::ptr_fun", "type": "cpp", "path": "cpp\\utility\\functional\\ptr_fun.html", "desc": "std::std::ptr_fun"}, {"name": "std:: std::std::ref, std::cref", "type": "cpp", "path": "cpp\\utility\\functional\\ref.html", "desc": "std:: std::std::ref, std::cref"}, {"name": "std::std::reference_wrapper", "type": "cpp", "path": "cpp\\utility\\functional\\reference_wrapper.html", "desc": "std::std::reference_wrapper"}, {"name": "std::std::unary_function", "type": "cpp", "path": "cpp\\utility\\functional\\unary_function.html", "desc": "std::std::unary_function"}, {"name": "std::std::unary_negate", "type": "cpp", "path": "cpp\\utility\\functional\\unary_negate.html", "desc": "std::std::unary_negate"}, {"name": "std:: std::std::unwrap_reference, std::unwrap_ref_decay", "type": "cpp", "path": "cpp\\utility\\functional\\unwrap_reference.html", "desc": "std:: std::std::unwrap_reference, std::unwrap_ref_decay"}, {"name": "std::function<R(Args...)>::std::function<R(Args...)>::assign", "type": "cpp", "path": "cpp\\utility\\functional\\function\\assign.html", "desc": "std::function<R(Args...)>::std::function<R(Args...)>::assign"}, {"name": "std::function \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\utility\\functional\\function\\deduction_guides.html", "desc": "std::function \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::function<R(Args...)>::std::function<R(Args...)>::function", "type": "cpp", "path": "cpp\\utility\\functional\\function\\function.html", "desc": "std::function<R(Args...)>::std::function<R(Args...)>::function"}, {"name": "std::function<R(Args...)>::std::function<R(Args...)>::operator()", "type": "cpp", "path": "cpp\\utility\\functional\\function\\operator().html", "desc": "std::function<R(Args...)>::std::function<R(Args...)>::operator()"}, {"name": "std::function<R(Args...)>::std::function<R(Args...)>::operator=", "type": "cpp", "path": "cpp\\utility\\functional\\function\\operator=.html", "desc": "std::function<R(Args...)>::std::function<R(Args...)>::operator="}, {"name": "std::function<R(Args...)>::std::function<R(Args...)>::operator bool", "type": "cpp", "path": "cpp\\utility\\functional\\function\\operator_bool.html", "desc": "std::function<R(Args...)>::std::function<R(Args...)>::operator bool"}, {"name": "operator==,!=(std::function)", "type": "cpp", "path": "cpp\\utility\\functional\\function\\operator_cmp.html", "desc": "operator==,!=(std::function)"}, {"name": "std::function<R(Args...)>::std::function<R(Args...)>::swap", "type": "cpp", "path": "cpp\\utility\\functional\\function\\swap.html", "desc": "std::function<R(Args...)>::std::function<R(Args...)>::swap"}, {"name": "std::std::swap(std::function)", "type": "cpp", "path": "cpp\\utility\\functional\\function\\swap2.html", "desc": "std::std::swap(std::function)"}, {"name": "std::function<R(Args...)>::std::function<R(Args...)>::target", "type": "cpp", "path": "cpp\\utility\\functional\\function\\target.html", "desc": "std::function<R(Args...)>::std::function<R(Args...)>::target"}, {"name": "std::function<R(Args...)>::std::function<R(Args...)>::target_type", "type": "cpp", "path": "cpp\\utility\\functional\\function\\target_type.html", "desc": "std::function<R(Args...)>::std::function<R(Args...)>::target_type"}, {"name": "std::std::uses_allocator<std::function>", "type": "cpp", "path": "cpp\\utility\\functional\\function\\uses_allocator.html", "desc": "std::std::uses_allocator<std::function>"}, {"name": "std::function<R(Args...)>::std::function<R(Args...)>::~function", "type": "cpp", "path": "cpp\\utility\\functional\\function\\~function.html", "desc": "std::function<R(Args...)>::std::function<R(Args...)>::~function"}, {"name": "std::move_only_function::std::move_only_function::move_only_function", "type": "cpp", "path": "cpp\\utility\\functional\\move_only_function\\move_only_function.html", "desc": "std::move_only_function::std::move_only_function::move_only_function"}, {"name": "std::move_only_function::std::move_only_function::operator()", "type": "cpp", "path": "cpp\\utility\\functional\\move_only_function\\operator().html", "desc": "std::move_only_function::std::move_only_function::operator()"}, {"name": "std::move_only_function::std::move_only_function::operator=", "type": "cpp", "path": "cpp\\utility\\functional\\move_only_function\\operator=.html", "desc": "std::move_only_function::std::move_only_function::operator="}, {"name": "operator==(std::move_only_function)", "type": "cpp", "path": "cpp\\utility\\functional\\move_only_function\\operator==.html", "desc": "operator==(std::move_only_function)"}, {"name": "std::move_only_function::std::move_only_function::operator bool", "type": "cpp", "path": "cpp\\utility\\functional\\move_only_function\\operator_bool.html", "desc": "std::move_only_function::std::move_only_function::operator bool"}, {"name": "std::move_only_function::std::move_only_function::swap", "type": "cpp", "path": "cpp\\utility\\functional\\move_only_function\\swap.html", "desc": "std::move_only_function::std::move_only_function::swap"}, {"name": "swap(std::move_only_function)", "type": "cpp", "path": "cpp\\utility\\functional\\move_only_function\\swap2.html", "desc": "swap(std::move_only_function)"}, {"name": "std::move_only_function::std::move_only_function::~move_only_function", "type": "cpp", "path": "cpp\\utility\\functional\\move_only_function\\~move_only_function.html", "desc": "std::move_only_function::std::move_only_function::~move_only_function"}, {"name": "std::ranges::std::ranges::equal_to", "type": "cpp", "path": "cpp\\utility\\functional\\ranges\\equal_to.html", "desc": "std::ranges::std::ranges::equal_to"}, {"name": "std::ranges::std::ranges::greater", "type": "cpp", "path": "cpp\\utility\\functional\\ranges\\greater.html", "desc": "std::ranges::std::ranges::greater"}, {"name": "std::ranges::std::ranges::greater_equal", "type": "cpp", "path": "cpp\\utility\\functional\\ranges\\greater_equal.html", "desc": "std::ranges::std::ranges::greater_equal"}, {"name": "std::ranges::std::ranges::less", "type": "cpp", "path": "cpp\\utility\\functional\\ranges\\less.html", "desc": "std::ranges::std::ranges::less"}, {"name": "std::ranges::std::ranges::less_equal", "type": "cpp", "path": "cpp\\utility\\functional\\ranges\\less_equal.html", "desc": "std::ranges::std::ranges::less_equal"}, {"name": "std::ranges::std::ranges::not_equal_to", "type": "cpp", "path": "cpp\\utility\\functional\\ranges\\not_equal_to.html", "desc": "std::ranges::std::ranges::not_equal_to"}, {"name": "std::reference_wrapper \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\utility\\functional\\reference_wrapper\\deduction_guides.html", "desc": "std::reference_wrapper \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::reference_wrapper<T>:: std::reference_wrapper<T>::std::reference_wrapper<T>::get, std::reference_wrapper<T>::operator T&", "type": "cpp", "path": "cpp\\utility\\functional\\reference_wrapper\\get.html", "desc": "std::reference_wrapper<T>:: std::reference_wrapper<T>::std::reference_wrapper<T>::get, std::reference_wrapper<T>::operator T&"}, {"name": "std::reference_wrapper<T>::std::reference_wrapper<T>::operator()", "type": "cpp", "path": "cpp\\utility\\functional\\reference_wrapper\\operator().html", "desc": "std::reference_wrapper<T>::std::reference_wrapper<T>::operator()"}, {"name": "std::reference_wrapper<T>::std::reference_wrapper<T>::operator=", "type": "cpp", "path": "cpp\\utility\\functional\\reference_wrapper\\operator=.html", "desc": "std::reference_wrapper<T>::std::reference_wrapper<T>::operator="}, {"name": "std::reference_wrapper<T>::std::reference_wrapper<T>::reference_wrapper", "type": "cpp", "path": "cpp\\utility\\functional\\reference_wrapper\\reference_wrapper.html", "desc": "std::reference_wrapper<T>::std::reference_wrapper<T>::reference_wrapper"}, {"name": "std:: hash::std::hash::hash", "type": "cpp", "path": "cpp\\utility\\hash\\hash.html", "desc": "std:: hash::std::hash::hash"}, {"name": "std:: hash<Key>::std::hash<Key>::operator()", "type": "cpp", "path": "cpp\\utility\\hash\\operator().html", "desc": "std:: hash<Key>::std::hash<Key>::operator()"}, {"name": "std::initializer_list<T>::std::initializer_list<T>::begin", "type": "cpp", "path": "cpp\\utility\\initializer_list\\begin.html", "desc": "std::initializer_list<T>::std::initializer_list<T>::begin"}, {"name": "std::std::begin(std::initializer_list)", "type": "cpp", "path": "cpp\\utility\\initializer_list\\begin2.html", "desc": "std::std::begin(std::initializer_list)"}, {"name": "std::initializer_list<T>::std::initializer_list<T>::end", "type": "cpp", "path": "cpp\\utility\\initializer_list\\end.html", "desc": "std::initializer_list<T>::std::initializer_list<T>::end"}, {"name": "std::std::end(std::initializer_list)", "type": "cpp", "path": "cpp\\utility\\initializer_list\\end2.html", "desc": "std::std::end(std::initializer_list)"}, {"name": "std::initializer_list<T>::std::initializer_list<T>::initializer_list", "type": "cpp", "path": "cpp\\utility\\initializer_list\\initializer_list.html", "desc": "std::initializer_list<T>::std::initializer_list<T>::initializer_list"}, {"name": "std::initializer_list<T>::std::initializer_list<T>::size", "type": "cpp", "path": "cpp\\utility\\initializer_list\\size.html", "desc": "std::initializer_list<T>::std::initializer_list<T>::size"}, {"name": "std::optional<T>::std::optional<T>::and_then", "type": "cpp", "path": "cpp\\utility\\optional\\and_then.html", "desc": "std::optional<T>::std::optional<T>::and_then"}, {"name": "std::std::bad_optional_access", "type": "cpp", "path": "cpp\\utility\\optional\\bad_optional_access.html", "desc": "std::std::bad_optional_access"}, {"name": "std::optional \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\utility\\optional\\deduction_guides.html", "desc": "std::optional \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::optional<T>::std::optional<T>::emplace", "type": "cpp", "path": "cpp\\utility\\optional\\emplace.html", "desc": "std::optional<T>::std::optional<T>::emplace"}, {"name": "std::std::hash <std::optional>", "type": "cpp", "path": "cpp\\utility\\optional\\hash.html", "desc": "std::std::hash <std::optional>"}, {"name": "std::std::make_optional", "type": "cpp", "path": "cpp\\utility\\optional\\make_optional.html", "desc": "std::std::make_optional"}, {"name": "std::std::nullopt", "type": "cpp", "path": "cpp\\utility\\optional\\nullopt.html", "desc": "std::std::nullopt"}, {"name": "std::std::nullopt_t", "type": "cpp", "path": "cpp\\utility\\optional\\nullopt_t.html", "desc": "std::std::nullopt_t"}, {"name": "std::optional<T>:: std::optional<T>::std::optional<T>::operator->, std::optional<T>::operator*", "type": "cpp", "path": "cpp\\utility\\optional\\operator%2A.html", "desc": "std::optional<T>:: std::optional<T>::std::optional<T>::operator->, std::optional<T>::operator*"}, {"name": "std::optional<T>::std::optional<T>::operator=", "type": "cpp", "path": "cpp\\utility\\optional\\operator=.html", "desc": "std::optional<T>::std::optional<T>::operator="}, {"name": "std::optional<T>:: std::optional<T>::std::optional<T>::operator bool, std::optional<T>::has_value", "type": "cpp", "path": "cpp\\utility\\optional\\operator_bool.html", "desc": "std::optional<T>:: std::optional<T>::std::optional<T>::operator bool, std::optional<T>::has_value"}, {"name": "(std::optional)operator==, !=, <, <=, >, >=, <=>(std::optional)", "type": "cpp", "path": "cpp\\utility\\optional\\operator_cmp.html", "desc": "(std::optional)operator==, !=, <, <=, >, >=, <=>(std::optional)"}, {"name": "std::optional<T>::std::optional<T>::optional", "type": "cpp", "path": "cpp\\utility\\optional\\optional.html", "desc": "std::optional<T>::std::optional<T>::optional"}, {"name": "std::optional<T>::std::optional<T>::or_else", "type": "cpp", "path": "cpp\\utility\\optional\\or_else.html", "desc": "std::optional<T>::std::optional<T>::or_else"}, {"name": "std::optional<T>::std::optional<T>::reset", "type": "cpp", "path": "cpp\\utility\\optional\\reset.html", "desc": "std::optional<T>::std::optional<T>::reset"}, {"name": "std::optional<T>::std::optional<T>::swap", "type": "cpp", "path": "cpp\\utility\\optional\\swap.html", "desc": "std::optional<T>::std::optional<T>::swap"}, {"name": "std::std::swap(std::optional)", "type": "cpp", "path": "cpp\\utility\\optional\\swap2.html", "desc": "std::std::swap(std::optional)"}, {"name": "std::optional<T>::std::optional<T>::transform", "type": "cpp", "path": "cpp\\utility\\optional\\transform.html", "desc": "std::optional<T>::std::optional<T>::transform"}, {"name": "std::optional<T>::std::optional<T>::value", "type": "cpp", "path": "cpp\\utility\\optional\\value.html", "desc": "std::optional<T>::std::optional<T>::value"}, {"name": "std::optional<T>::std::optional<T>::value_or", "type": "cpp", "path": "cpp\\utility\\optional\\value_or.html", "desc": "std::optional<T>::std::optional<T>::value_or"}, {"name": "std::optional<T>::std::optional<T>::~optional", "type": "cpp", "path": "cpp\\utility\\optional\\~optional.html", "desc": "std::optional<T>::std::optional<T>::~optional"}, {"name": "std::std::basic_common_reference<std::pair>", "type": "cpp", "path": "cpp\\utility\\pair\\basic_common_reference.html", "desc": "std::std::basic_common_reference<std::pair>"}, {"name": "std::std::common_type<std::pair>", "type": "cpp", "path": "cpp\\utility\\pair\\common_type.html", "desc": "std::std::common_type<std::pair>"}, {"name": "std::pair \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\utility\\pair\\deduction_guides.html", "desc": "std::pair \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::std::get(std::pair)", "type": "cpp", "path": "cpp\\utility\\pair\\get.html", "desc": "std::std::get(std::pair)"}, {"name": "std::std::make_pair", "type": "cpp", "path": "cpp\\utility\\pair\\make_pair.html", "desc": "std::std::make_pair"}, {"name": "std::pair<T1,T2>::std::pair<T1,T2>::operator=", "type": "cpp", "path": "cpp\\utility\\pair\\operator=.html", "desc": "std::pair<T1,T2>::std::pair<T1,T2>::operator="}, {"name": "operator==,!=,<,<=,>,>=,<=>(std::pair)", "type": "cpp", "path": "cpp\\utility\\pair\\operator_cmp.html", "desc": "operator==,!=,<,<=,>,>=,<=>(std::pair)"}, {"name": "std::pair<T1,T2>::std::pair<T1,T2>::pair", "type": "cpp", "path": "cpp\\utility\\pair\\pair.html", "desc": "std::pair<T1,T2>::std::pair<T1,T2>::pair"}, {"name": "std::pair<T1,T2>::std::pair<T1,T2>::swap", "type": "cpp", "path": "cpp\\utility\\pair\\swap.html", "desc": "std::pair<T1,T2>::std::pair<T1,T2>::swap"}, {"name": "std::std::swap(std::pair)", "type": "cpp", "path": "cpp\\utility\\pair\\swap2.html", "desc": "std::std::swap(std::pair)"}, {"name": "std::std::tuple_element<std::pair>", "type": "cpp", "path": "cpp\\utility\\pair\\tuple_element.html", "desc": "std::std::tuple_element<std::pair>"}, {"name": "std::std::tuple_size<std::pair>", "type": "cpp", "path": "cpp\\utility\\pair\\tuple_size.html", "desc": "std::std::tuple_size<std::pair>"}, {"name": "std::std::abort", "type": "cpp", "path": "cpp\\utility\\program\\abort.html", "desc": "std::std::abort"}, {"name": "std::std::atexit", "type": "cpp", "path": "cpp\\utility\\program\\atexit.html", "desc": "std::std::atexit"}, {"name": "std::std::at_quick_exit", "type": "cpp", "path": "cpp\\utility\\program\\at_quick_exit.html", "desc": "std::std::at_quick_exit"}, {"name": "std::std::exit", "type": "cpp", "path": "cpp\\utility\\program\\exit.html", "desc": "std::std::exit"}, {"name": "EXIT_SUCCESS, EXIT_FAILURE", "type": "cpp", "path": "cpp\\utility\\program\\EXIT_status.html", "desc": "EXIT_SUCCESS, EXIT_FAILURE"}, {"name": "std::std::getenv", "type": "cpp", "path": "cpp\\utility\\program\\getenv.html", "desc": "std::std::getenv"}, {"name": "std::std::jmp_buf", "type": "cpp", "path": "cpp\\utility\\program\\jmp_buf.html", "desc": "std::std::jmp_buf"}, {"name": "std::std::longjmp", "type": "cpp", "path": "cpp\\utility\\program\\longjmp.html", "desc": "std::std::longjmp"}, {"name": "std::std::quick_exit", "type": "cpp", "path": "cpp\\utility\\program\\quick_exit.html", "desc": "std::std::quick_exit"}, {"name": "std::std::raise", "type": "cpp", "path": "cpp\\utility\\program\\raise.html", "desc": "std::std::raise"}, {"name": "setjmp", "type": "cpp", "path": "cpp\\utility\\program\\setjmp.html", "desc": "setjmp"}, {"name": "std::std::signal", "type": "cpp", "path": "cpp\\utility\\program\\signal.html", "desc": "std::std::signal"}, {"name": "std::std::sig_atomic_t", "type": "cpp", "path": "cpp\\utility\\program\\sig_atomic_t.html", "desc": "std::std::sig_atomic_t"}, {"name": "SIG_ERR", "type": "cpp", "path": "cpp\\utility\\program\\SIG_ERR.html", "desc": "SIG_ERR"}, {"name": "SIG_DFL, SIG_IGN", "type": "cpp", "path": "cpp\\utility\\program\\SIG_strategies.html", "desc": "SIG_DFL, SIG_IGN"}, {"name": "SIGTERM, SIGSEGV, SIGINT, SIGILL, SIGABRT, SIGFPE", "type": "cpp", "path": "cpp\\utility\\program\\SIG_types.html", "desc": "SIGTERM, SIGSEGV, SIGINT, SIGILL, SIGABRT, SIGFPE"}, {"name": "std::std::system", "type": "cpp", "path": "cpp\\utility\\program\\system.html", "desc": "std::std::system"}, {"name": "std::std::_Exit", "type": "cpp", "path": "cpp\\utility\\program\\_Exit.html", "desc": "std::std::_Exit"}, {"name": "std::ranges::std::ranges::swap", "type": "cpp", "path": "cpp\\utility\\ranges\\swap.html", "desc": "std::ranges::std::ranges::swap"}, {"name": "std::rel_ops::std::rel_ops::operator!=,>,<=,>=", "type": "cpp", "path": "cpp\\utility\\rel_ops\\operator_cmp.html", "desc": "std::rel_ops::std::rel_ops::operator!=,>,<=,>="}, {"name": "std::source_location::std::source_location::column", "type": "cpp", "path": "cpp\\utility\\source_location\\column.html", "desc": "std::source_location::std::source_location::column"}, {"name": "std::source_location::std::source_location::current", "type": "cpp", "path": "cpp\\utility\\source_location\\current.html", "desc": "std::source_location::std::source_location::current"}, {"name": "std::source_location::std::source_location::file_name", "type": "cpp", "path": "cpp\\utility\\source_location\\file_name.html", "desc": "std::source_location::std::source_location::file_name"}, {"name": "std::source_location::std::source_location::function_name", "type": "cpp", "path": "cpp\\utility\\source_location\\function_name.html", "desc": "std::source_location::std::source_location::function_name"}, {"name": "std::source_location::std::source_location::line", "type": "cpp", "path": "cpp\\utility\\source_location\\line.html", "desc": "std::source_location::std::source_location::line"}, {"name": "std::source_location::std::source_location::source_location", "type": "cpp", "path": "cpp\\utility\\source_location\\source_location.html", "desc": "std::source_location::std::source_location::source_location"}, {"name": "std::stacktrace_entry::std::stacktrace_entry::description", "type": "cpp", "path": "cpp\\utility\\stacktrace_entry\\description.html", "desc": "std::stacktrace_entry::std::stacktrace_entry::description"}, {"name": "std::std::hash(std::stacktrace_entry)", "type": "cpp", "path": "cpp\\utility\\stacktrace_entry\\hash.html", "desc": "std::std::hash(std::stacktrace_entry)"}, {"name": "std::stacktrace_entry::std::stacktrace_entry::native_handle", "type": "cpp", "path": "cpp\\utility\\stacktrace_entry\\native_handle.html", "desc": "std::stacktrace_entry::std::stacktrace_entry::native_handle"}, {"name": "std::stacktrace_entry::std::stacktrace_entry::operator=", "type": "cpp", "path": "cpp\\utility\\stacktrace_entry\\operator=.html", "desc": "std::stacktrace_entry::std::stacktrace_entry::operator="}, {"name": "std::stacktrace_entry::std::stacktrace_entry::operator bool", "type": "cpp", "path": "cpp\\utility\\stacktrace_entry\\operator_bool.html", "desc": "std::stacktrace_entry::std::stacktrace_entry::operator bool"}, {"name": "operator==, operator<=>(std::stacktrace_entry)", "type": "cpp", "path": "cpp\\utility\\stacktrace_entry\\operator_cmp.html", "desc": "operator==, operator<=>(std::stacktrace_entry)"}, {"name": "std::std::operator<<(std::stacktrace_entry)", "type": "cpp", "path": "cpp\\utility\\stacktrace_entry\\operator_ltlt.html", "desc": "std::std::operator<<(std::stacktrace_entry)"}, {"name": "std::stacktrace_entry::std::stacktrace_entry::source_file", "type": "cpp", "path": "cpp\\utility\\stacktrace_entry\\source_file.html", "desc": "std::stacktrace_entry::std::stacktrace_entry::source_file"}, {"name": "std::stacktrace_entry::std::stacktrace_entry::source_line", "type": "cpp", "path": "cpp\\utility\\stacktrace_entry\\source_line.html", "desc": "std::stacktrace_entry::std::stacktrace_entry::source_line"}, {"name": "std::stacktrace_entry::std::stacktrace_entry::stacktrace_entry", "type": "cpp", "path": "cpp\\utility\\stacktrace_entry\\stacktrace_entry.html", "desc": "std::stacktrace_entry::std::stacktrace_entry::stacktrace_entry"}, {"name": "std::std::to_string", "type": "cpp", "path": "cpp\\utility\\stacktrace_entry\\to_string.html", "desc": "std::std::to_string"}, {"name": "std::std::basic_common_reference<tuple-like>", "type": "cpp", "path": "cpp\\utility\\tuple\\basic_common_reference.html", "desc": "std::std::basic_common_reference<tuple-like>"}, {"name": "std::std::common_type<tuple-like>", "type": "cpp", "path": "cpp\\utility\\tuple\\common_type.html", "desc": "std::std::common_type<tuple-like>"}, {"name": "std::tuple \u7684\u63a8\u5bfc\u6307\u5f15", "type": "cpp", "path": "cpp\\utility\\tuple\\deduction_guides.html", "desc": "std::tuple \u7684\u63a8\u5bfc\u6307\u5f15"}, {"name": "std::std::forward_as_tuple", "type": "cpp", "path": "cpp\\utility\\tuple\\forward_as_tuple.html", "desc": "std::std::forward_as_tuple"}, {"name": "std::std::get(std::tuple)", "type": "cpp", "path": "cpp\\utility\\tuple\\get.html", "desc": "std::std::get(std::tuple)"}, {"name": "std::std::ignore", "type": "cpp", "path": "cpp\\utility\\tuple\\ignore.html", "desc": "std::std::ignore"}, {"name": "std::std::make_tuple", "type": "cpp", "path": "cpp\\utility\\tuple\\make_tuple.html", "desc": "std::std::make_tuple"}, {"name": "std::tuple<Types...>::std::tuple<Types...>::operator=", "type": "cpp", "path": "cpp\\utility\\tuple\\operator=.html", "desc": "std::tuple<Types...>::std::tuple<Types...>::operator="}, {"name": "operator==,!=,<,<=,>,>=,<=>(std::tuple)", "type": "cpp", "path": "cpp\\utility\\tuple\\operator_cmp.html", "desc": "operator==,!=,<,<=,>,>=,<=>(std::tuple)"}, {"name": "std::tuple<Types...>::std::tuple<Types...>::swap", "type": "cpp", "path": "cpp\\utility\\tuple\\swap.html", "desc": "std::tuple<Types...>::std::tuple<Types...>::swap"}, {"name": "std::std::swap(std::tuple)", "type": "cpp", "path": "cpp\\utility\\tuple\\swap2.html", "desc": "std::std::swap(std::tuple)"}, {"name": "std::std::tie", "type": "cpp", "path": "cpp\\utility\\tuple\\tie.html", "desc": "std::std::tie"}, {"name": "tuple-like, pair-like", "type": "cpp", "path": "cpp\\utility\\tuple\\tuple-like.html", "desc": "tuple-like, pair-like"}, {"name": "std::tuple<Types...>::std::tuple<Types...>::tuple", "type": "cpp", "path": "cpp\\utility\\tuple\\tuple.html", "desc": "std::tuple<Types...>::std::tuple<Types...>::tuple"}, {"name": "std::std::tuple_cat", "type": "cpp", "path": "cpp\\utility\\tuple\\tuple_cat.html", "desc": "std::std::tuple_cat"}, {"name": "std::std::tuple_element<std::tuple>", "type": "cpp", "path": "cpp\\utility\\tuple\\tuple_element.html", "desc": "std::std::tuple_element<std::tuple>"}, {"name": "std::std::tuple_size<std::tuple>", "type": "cpp", "path": "cpp\\utility\\tuple\\tuple_size.html", "desc": "std::std::tuple_size<std::tuple>"}, {"name": "std::std::uses_allocator<std::tuple>", "type": "cpp", "path": "cpp\\utility\\tuple\\uses_allocator.html", "desc": "std::std::uses_allocator<std::tuple>"}, {"name": "va_arg", "type": "cpp", "path": "cpp\\utility\\variadic\\va_arg.html", "desc": "va_arg"}, {"name": "va_copy", "type": "cpp", "path": "cpp\\utility\\variadic\\va_copy.html", "desc": "va_copy"}, {"name": "va_end", "type": "cpp", "path": "cpp\\utility\\variadic\\va_end.html", "desc": "va_end"}, {"name": "std::std::va_list", "type": "cpp", "path": "cpp\\utility\\variadic\\va_list.html", "desc": "std::std::va_list"}, {"name": "va_start", "type": "cpp", "path": "cpp\\utility\\variadic\\va_start.html", "desc": "va_start"}, {"name": "std::std::bad_variant_access", "type": "cpp", "path": "cpp\\utility\\variant\\bad_variant_access.html", "desc": "std::std::bad_variant_access"}, {"name": "std::variant<Types...>::std::variant<Types...>::emplace", "type": "cpp", "path": "cpp\\utility\\variant\\emplace.html", "desc": "std::variant<Types...>::std::variant<Types...>::emplace"}, {"name": "std:: (std::variant)std::get (std::variant)", "type": "cpp", "path": "cpp\\utility\\variant\\get.html", "desc": "std:: (std::variant)std::get (std::variant)"}, {"name": "std::std::get_if", "type": "cpp", "path": "cpp\\utility\\variant\\get_if.html", "desc": "std::std::get_if"}, {"name": "std::std::hash <std::variant>", "type": "cpp", "path": "cpp\\utility\\variant\\hash.html", "desc": "std::std::hash <std::variant>"}, {"name": "std::std::holds_alternative", "type": "cpp", "path": "cpp\\utility\\variant\\holds_alternative.html", "desc": "std::std::holds_alternative"}, {"name": "std::variant<Types...>::std::variant<Types...>::index", "type": "cpp", "path": "cpp\\utility\\variant\\index.html", "desc": "std::variant<Types...>::std::variant<Types...>::index"}, {"name": "std::std::monostate", "type": "cpp", "path": "cpp\\utility\\variant\\monostate.html", "desc": "std::std::monostate"}, {"name": "std::variant<Types...>::std::variant<Types...>::operator=", "type": "cpp", "path": "cpp\\utility\\variant\\operator=.html", "desc": "std::variant<Types...>::std::variant<Types...>::operator="}, {"name": "operator==, !=, <, <=, >, >=, <=>(std::variant)", "type": "cpp", "path": "cpp\\utility\\variant\\operator_cmp.html", "desc": "operator==, !=, <, <=, >, >=, <=>(std::variant)"}, {"name": "std::variant<Types...>::std::variant<Types...>::swap", "type": "cpp", "path": "cpp\\utility\\variant\\swap.html", "desc": "std::variant<Types...>::std::variant<Types...>::swap"}, {"name": "std::std::swap(std::variant)", "type": "cpp", "path": "cpp\\utility\\variant\\swap2.html", "desc": "std::std::swap(std::variant)"}, {"name": "std::variant<Types...>::std::variant<Types...>::valueless_by_exception", "type": "cpp", "path": "cpp\\utility\\variant\\valueless_by_exception.html", "desc": "std::variant<Types...>::std::variant<Types...>::valueless_by_exception"}, {"name": "std::variant<Types...>::std::variant<Types...>::variant", "type": "cpp", "path": "cpp\\utility\\variant\\variant.html", "desc": "std::variant<Types...>::std::variant<Types...>::variant"}, {"name": "std:: std::std::variant_alternative, std::variant_alternative_t", "type": "cpp", "path": "cpp\\utility\\variant\\variant_alternative.html", "desc": "std:: std::std::variant_alternative, std::variant_alternative_t"}, {"name": "std::std::variant_npos", "type": "cpp", "path": "cpp\\utility\\variant\\variant_npos.html", "desc": "std::std::variant_npos"}, {"name": "std:: std::std::variant_size, std::variant_size_v", "type": "cpp", "path": "cpp\\utility\\variant\\variant_size.html", "desc": "std:: std::std::variant_size, std::variant_size_v"}, {"name": "std::std::visit", "type": "cpp", "path": "cpp\\utility\\variant\\visit.html", "desc": "std::std::visit"}, {"name": "std::variant<Types...>::std::variant<Types...>::~variant", "type": "cpp", "path": "cpp\\utility\\variant\\~variant.html", "desc": "std::variant<Types...>::std::variant<Types...>::~variant"}]